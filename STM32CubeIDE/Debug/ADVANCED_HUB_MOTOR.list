
ADVANCED_HUB_MOTOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e50  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  08008ff0  08008ff0  00018ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093d8  080093d8  00020610  2**0
                  CONTENTS
  4 .ARM          00000008  080093d8  080093d8  000193d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080093e0  080093e0  00020610  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093e0  080093e0  000193e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080093e4  080093e4  000193e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000610  20000000  080093e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004430  20000610  080099f8  00020610  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004a40  080099f8  00024a40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020610  2**0
                  CONTENTS, READONLY
 12 .debug_line   00044345  00000000  00000000  00020640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   0004d0da  00000000  00000000  00064985  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009187  00000000  00000000  000b1a5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e50  00000000  00000000  000babe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000b4442  00000000  00000000  000bca38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00004418  00000000  00000000  00170e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024393  00000000  00000000  00175298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019962b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059f0  00000000  00000000  0019967c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0002206d  00000000  00000000  0019f06c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000610 	.word	0x20000610
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008fd8 	.word	0x08008fd8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000614 	.word	0x20000614
 80001dc:	08008fd8 	.word	0x08008fd8

080001e0 <__aeabi_dmul>:
 80001e0:	b570      	push	{r4, r5, r6, lr}
 80001e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001ee:	bf1d      	ittte	ne
 80001f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001f4:	ea94 0f0c 	teqne	r4, ip
 80001f8:	ea95 0f0c 	teqne	r5, ip
 80001fc:	f000 f8de 	bleq	80003bc <__aeabi_dmul+0x1dc>
 8000200:	442c      	add	r4, r5
 8000202:	ea81 0603 	eor.w	r6, r1, r3
 8000206:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800020a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800020e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000212:	bf18      	it	ne
 8000214:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000218:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800021c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000220:	d038      	beq.n	8000294 <__aeabi_dmul+0xb4>
 8000222:	fba0 ce02 	umull	ip, lr, r0, r2
 8000226:	f04f 0500 	mov.w	r5, #0
 800022a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800022e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000232:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000236:	f04f 0600 	mov.w	r6, #0
 800023a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800023e:	f09c 0f00 	teq	ip, #0
 8000242:	bf18      	it	ne
 8000244:	f04e 0e01 	orrne.w	lr, lr, #1
 8000248:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800024c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000250:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000254:	d204      	bcs.n	8000260 <__aeabi_dmul+0x80>
 8000256:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800025a:	416d      	adcs	r5, r5
 800025c:	eb46 0606 	adc.w	r6, r6, r6
 8000260:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000264:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000268:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800026c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000270:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000274:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000278:	bf88      	it	hi
 800027a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800027e:	d81e      	bhi.n	80002be <__aeabi_dmul+0xde>
 8000280:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000284:	bf08      	it	eq
 8000286:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800028a:	f150 0000 	adcs.w	r0, r0, #0
 800028e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000298:	ea46 0101 	orr.w	r1, r6, r1
 800029c:	ea40 0002 	orr.w	r0, r0, r2
 80002a0:	ea81 0103 	eor.w	r1, r1, r3
 80002a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a8:	bfc2      	ittt	gt
 80002aa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002b2:	bd70      	popgt	{r4, r5, r6, pc}
 80002b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b8:	f04f 0e00 	mov.w	lr, #0
 80002bc:	3c01      	subs	r4, #1
 80002be:	f300 80ab 	bgt.w	8000418 <__aeabi_dmul+0x238>
 80002c2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002c6:	bfde      	ittt	le
 80002c8:	2000      	movle	r0, #0
 80002ca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002ce:	bd70      	pople	{r4, r5, r6, pc}
 80002d0:	f1c4 0400 	rsb	r4, r4, #0
 80002d4:	3c20      	subs	r4, #32
 80002d6:	da35      	bge.n	8000344 <__aeabi_dmul+0x164>
 80002d8:	340c      	adds	r4, #12
 80002da:	dc1b      	bgt.n	8000314 <__aeabi_dmul+0x134>
 80002dc:	f104 0414 	add.w	r4, r4, #20
 80002e0:	f1c4 0520 	rsb	r5, r4, #32
 80002e4:	fa00 f305 	lsl.w	r3, r0, r5
 80002e8:	fa20 f004 	lsr.w	r0, r0, r4
 80002ec:	fa01 f205 	lsl.w	r2, r1, r5
 80002f0:	ea40 0002 	orr.w	r0, r0, r2
 80002f4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000300:	fa21 f604 	lsr.w	r6, r1, r4
 8000304:	eb42 0106 	adc.w	r1, r2, r6
 8000308:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800030c:	bf08      	it	eq
 800030e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000312:	bd70      	pop	{r4, r5, r6, pc}
 8000314:	f1c4 040c 	rsb	r4, r4, #12
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f304 	lsl.w	r3, r0, r4
 8000320:	fa20 f005 	lsr.w	r0, r0, r5
 8000324:	fa01 f204 	lsl.w	r2, r1, r4
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000330:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800033c:	bf08      	it	eq
 800033e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f1c4 0520 	rsb	r5, r4, #32
 8000348:	fa00 f205 	lsl.w	r2, r0, r5
 800034c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000350:	fa20 f304 	lsr.w	r3, r0, r4
 8000354:	fa01 f205 	lsl.w	r2, r1, r5
 8000358:	ea43 0302 	orr.w	r3, r3, r2
 800035c:	fa21 f004 	lsr.w	r0, r1, r4
 8000360:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000364:	fa21 f204 	lsr.w	r2, r1, r4
 8000368:	ea20 0002 	bic.w	r0, r0, r2
 800036c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f094 0f00 	teq	r4, #0
 8000380:	d10f      	bne.n	80003a2 <__aeabi_dmul+0x1c2>
 8000382:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000386:	0040      	lsls	r0, r0, #1
 8000388:	eb41 0101 	adc.w	r1, r1, r1
 800038c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000390:	bf08      	it	eq
 8000392:	3c01      	subeq	r4, #1
 8000394:	d0f7      	beq.n	8000386 <__aeabi_dmul+0x1a6>
 8000396:	ea41 0106 	orr.w	r1, r1, r6
 800039a:	f095 0f00 	teq	r5, #0
 800039e:	bf18      	it	ne
 80003a0:	4770      	bxne	lr
 80003a2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003a6:	0052      	lsls	r2, r2, #1
 80003a8:	eb43 0303 	adc.w	r3, r3, r3
 80003ac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003b0:	bf08      	it	eq
 80003b2:	3d01      	subeq	r5, #1
 80003b4:	d0f7      	beq.n	80003a6 <__aeabi_dmul+0x1c6>
 80003b6:	ea43 0306 	orr.w	r3, r3, r6
 80003ba:	4770      	bx	lr
 80003bc:	ea94 0f0c 	teq	r4, ip
 80003c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003c4:	bf18      	it	ne
 80003c6:	ea95 0f0c 	teqne	r5, ip
 80003ca:	d00c      	beq.n	80003e6 <__aeabi_dmul+0x206>
 80003cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d0:	bf18      	it	ne
 80003d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003d6:	d1d1      	bne.n	800037c <__aeabi_dmul+0x19c>
 80003d8:	ea81 0103 	eor.w	r1, r1, r3
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	f04f 0000 	mov.w	r0, #0
 80003e4:	bd70      	pop	{r4, r5, r6, pc}
 80003e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003ea:	bf06      	itte	eq
 80003ec:	4610      	moveq	r0, r2
 80003ee:	4619      	moveq	r1, r3
 80003f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003f4:	d019      	beq.n	800042a <__aeabi_dmul+0x24a>
 80003f6:	ea94 0f0c 	teq	r4, ip
 80003fa:	d102      	bne.n	8000402 <__aeabi_dmul+0x222>
 80003fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000400:	d113      	bne.n	800042a <__aeabi_dmul+0x24a>
 8000402:	ea95 0f0c 	teq	r5, ip
 8000406:	d105      	bne.n	8000414 <__aeabi_dmul+0x234>
 8000408:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800040c:	bf1c      	itt	ne
 800040e:	4610      	movne	r0, r2
 8000410:	4619      	movne	r1, r3
 8000412:	d10a      	bne.n	800042a <__aeabi_dmul+0x24a>
 8000414:	ea81 0103 	eor.w	r1, r1, r3
 8000418:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800041c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd70      	pop	{r4, r5, r6, pc}
 800042a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800042e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000432:	bd70      	pop	{r4, r5, r6, pc}

08000434 <__aeabi_drsub>:
 8000434:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000438:	e002      	b.n	8000440 <__adddf3>
 800043a:	bf00      	nop

0800043c <__aeabi_dsub>:
 800043c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000440 <__adddf3>:
 8000440:	b530      	push	{r4, r5, lr}
 8000442:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000446:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800044a:	ea94 0f05 	teq	r4, r5
 800044e:	bf08      	it	eq
 8000450:	ea90 0f02 	teqeq	r0, r2
 8000454:	bf1f      	itttt	ne
 8000456:	ea54 0c00 	orrsne.w	ip, r4, r0
 800045a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800045e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000462:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000466:	f000 80e2 	beq.w	800062e <__adddf3+0x1ee>
 800046a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800046e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000472:	bfb8      	it	lt
 8000474:	426d      	neglt	r5, r5
 8000476:	dd0c      	ble.n	8000492 <__adddf3+0x52>
 8000478:	442c      	add	r4, r5
 800047a:	ea80 0202 	eor.w	r2, r0, r2
 800047e:	ea81 0303 	eor.w	r3, r1, r3
 8000482:	ea82 0000 	eor.w	r0, r2, r0
 8000486:	ea83 0101 	eor.w	r1, r3, r1
 800048a:	ea80 0202 	eor.w	r2, r0, r2
 800048e:	ea81 0303 	eor.w	r3, r1, r3
 8000492:	2d36      	cmp	r5, #54	; 0x36
 8000494:	bf88      	it	hi
 8000496:	bd30      	pophi	{r4, r5, pc}
 8000498:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800049c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004a0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a8:	d002      	beq.n	80004b0 <__adddf3+0x70>
 80004aa:	4240      	negs	r0, r0
 80004ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004bc:	d002      	beq.n	80004c4 <__adddf3+0x84>
 80004be:	4252      	negs	r2, r2
 80004c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004c4:	ea94 0f05 	teq	r4, r5
 80004c8:	f000 80a7 	beq.w	800061a <__adddf3+0x1da>
 80004cc:	f1a4 0401 	sub.w	r4, r4, #1
 80004d0:	f1d5 0e20 	rsbs	lr, r5, #32
 80004d4:	db0d      	blt.n	80004f2 <__adddf3+0xb2>
 80004d6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004da:	fa22 f205 	lsr.w	r2, r2, r5
 80004de:	1880      	adds	r0, r0, r2
 80004e0:	f141 0100 	adc.w	r1, r1, #0
 80004e4:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e8:	1880      	adds	r0, r0, r2
 80004ea:	fa43 f305 	asr.w	r3, r3, r5
 80004ee:	4159      	adcs	r1, r3
 80004f0:	e00e      	b.n	8000510 <__adddf3+0xd0>
 80004f2:	f1a5 0520 	sub.w	r5, r5, #32
 80004f6:	f10e 0e20 	add.w	lr, lr, #32
 80004fa:	2a01      	cmp	r2, #1
 80004fc:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000500:	bf28      	it	cs
 8000502:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000506:	fa43 f305 	asr.w	r3, r3, r5
 800050a:	18c0      	adds	r0, r0, r3
 800050c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	d507      	bpl.n	8000526 <__adddf3+0xe6>
 8000516:	f04f 0e00 	mov.w	lr, #0
 800051a:	f1dc 0c00 	rsbs	ip, ip, #0
 800051e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000522:	eb6e 0101 	sbc.w	r1, lr, r1
 8000526:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800052a:	d31b      	bcc.n	8000564 <__adddf3+0x124>
 800052c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000530:	d30c      	bcc.n	800054c <__adddf3+0x10c>
 8000532:	0849      	lsrs	r1, r1, #1
 8000534:	ea5f 0030 	movs.w	r0, r0, rrx
 8000538:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800053c:	f104 0401 	add.w	r4, r4, #1
 8000540:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000544:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000548:	f080 809a 	bcs.w	8000680 <__adddf3+0x240>
 800054c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000550:	bf08      	it	eq
 8000552:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000556:	f150 0000 	adcs.w	r0, r0, #0
 800055a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800055e:	ea41 0105 	orr.w	r1, r1, r5
 8000562:	bd30      	pop	{r4, r5, pc}
 8000564:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000568:	4140      	adcs	r0, r0
 800056a:	eb41 0101 	adc.w	r1, r1, r1
 800056e:	3c01      	subs	r4, #1
 8000570:	bf28      	it	cs
 8000572:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000576:	d2e9      	bcs.n	800054c <__adddf3+0x10c>
 8000578:	f091 0f00 	teq	r1, #0
 800057c:	bf04      	itt	eq
 800057e:	4601      	moveq	r1, r0
 8000580:	2000      	moveq	r0, #0
 8000582:	fab1 f381 	clz	r3, r1
 8000586:	bf08      	it	eq
 8000588:	3320      	addeq	r3, #32
 800058a:	f1a3 030b 	sub.w	r3, r3, #11
 800058e:	f1b3 0220 	subs.w	r2, r3, #32
 8000592:	da0c      	bge.n	80005ae <__adddf3+0x16e>
 8000594:	320c      	adds	r2, #12
 8000596:	dd08      	ble.n	80005aa <__adddf3+0x16a>
 8000598:	f102 0c14 	add.w	ip, r2, #20
 800059c:	f1c2 020c 	rsb	r2, r2, #12
 80005a0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005a4:	fa21 f102 	lsr.w	r1, r1, r2
 80005a8:	e00c      	b.n	80005c4 <__adddf3+0x184>
 80005aa:	f102 0214 	add.w	r2, r2, #20
 80005ae:	bfd8      	it	le
 80005b0:	f1c2 0c20 	rsble	ip, r2, #32
 80005b4:	fa01 f102 	lsl.w	r1, r1, r2
 80005b8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005bc:	bfdc      	itt	le
 80005be:	ea41 010c 	orrle.w	r1, r1, ip
 80005c2:	4090      	lslle	r0, r2
 80005c4:	1ae4      	subs	r4, r4, r3
 80005c6:	bfa2      	ittt	ge
 80005c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005cc:	4329      	orrge	r1, r5
 80005ce:	bd30      	popge	{r4, r5, pc}
 80005d0:	ea6f 0404 	mvn.w	r4, r4
 80005d4:	3c1f      	subs	r4, #31
 80005d6:	da1c      	bge.n	8000612 <__adddf3+0x1d2>
 80005d8:	340c      	adds	r4, #12
 80005da:	dc0e      	bgt.n	80005fa <__adddf3+0x1ba>
 80005dc:	f104 0414 	add.w	r4, r4, #20
 80005e0:	f1c4 0220 	rsb	r2, r4, #32
 80005e4:	fa20 f004 	lsr.w	r0, r0, r4
 80005e8:	fa01 f302 	lsl.w	r3, r1, r2
 80005ec:	ea40 0003 	orr.w	r0, r0, r3
 80005f0:	fa21 f304 	lsr.w	r3, r1, r4
 80005f4:	ea45 0103 	orr.w	r1, r5, r3
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	f1c4 040c 	rsb	r4, r4, #12
 80005fe:	f1c4 0220 	rsb	r2, r4, #32
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 f304 	lsl.w	r3, r1, r4
 800060a:	ea40 0003 	orr.w	r0, r0, r3
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	fa21 f004 	lsr.w	r0, r1, r4
 8000616:	4629      	mov	r1, r5
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	f094 0f00 	teq	r4, #0
 800061e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000622:	bf06      	itte	eq
 8000624:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000628:	3401      	addeq	r4, #1
 800062a:	3d01      	subne	r5, #1
 800062c:	e74e      	b.n	80004cc <__adddf3+0x8c>
 800062e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000632:	bf18      	it	ne
 8000634:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000638:	d029      	beq.n	800068e <__adddf3+0x24e>
 800063a:	ea94 0f05 	teq	r4, r5
 800063e:	bf08      	it	eq
 8000640:	ea90 0f02 	teqeq	r0, r2
 8000644:	d005      	beq.n	8000652 <__adddf3+0x212>
 8000646:	ea54 0c00 	orrs.w	ip, r4, r0
 800064a:	bf04      	itt	eq
 800064c:	4619      	moveq	r1, r3
 800064e:	4610      	moveq	r0, r2
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	ea91 0f03 	teq	r1, r3
 8000656:	bf1e      	ittt	ne
 8000658:	2100      	movne	r1, #0
 800065a:	2000      	movne	r0, #0
 800065c:	bd30      	popne	{r4, r5, pc}
 800065e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000662:	d105      	bne.n	8000670 <__adddf3+0x230>
 8000664:	0040      	lsls	r0, r0, #1
 8000666:	4149      	adcs	r1, r1
 8000668:	bf28      	it	cs
 800066a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd30      	pop	{r4, r5, pc}
 8000670:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000674:	bf3c      	itt	cc
 8000676:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800067a:	bd30      	popcc	{r4, r5, pc}
 800067c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000680:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000684:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000688:	f04f 0000 	mov.w	r0, #0
 800068c:	bd30      	pop	{r4, r5, pc}
 800068e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000692:	bf1a      	itte	ne
 8000694:	4619      	movne	r1, r3
 8000696:	4610      	movne	r0, r2
 8000698:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800069c:	bf1c      	itt	ne
 800069e:	460b      	movne	r3, r1
 80006a0:	4602      	movne	r2, r0
 80006a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006a6:	bf06      	itte	eq
 80006a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006ac:	ea91 0f03 	teqeq	r1, r3
 80006b0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006b4:	bd30      	pop	{r4, r5, pc}
 80006b6:	bf00      	nop

080006b8 <__aeabi_ui2d>:
 80006b8:	f090 0f00 	teq	r0, #0
 80006bc:	bf04      	itt	eq
 80006be:	2100      	moveq	r1, #0
 80006c0:	4770      	bxeq	lr
 80006c2:	b530      	push	{r4, r5, lr}
 80006c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006cc:	f04f 0500 	mov.w	r5, #0
 80006d0:	f04f 0100 	mov.w	r1, #0
 80006d4:	e750      	b.n	8000578 <__adddf3+0x138>
 80006d6:	bf00      	nop

080006d8 <__aeabi_i2d>:
 80006d8:	f090 0f00 	teq	r0, #0
 80006dc:	bf04      	itt	eq
 80006de:	2100      	moveq	r1, #0
 80006e0:	4770      	bxeq	lr
 80006e2:	b530      	push	{r4, r5, lr}
 80006e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006f0:	bf48      	it	mi
 80006f2:	4240      	negmi	r0, r0
 80006f4:	f04f 0100 	mov.w	r1, #0
 80006f8:	e73e      	b.n	8000578 <__adddf3+0x138>
 80006fa:	bf00      	nop

080006fc <__aeabi_f2d>:
 80006fc:	0042      	lsls	r2, r0, #1
 80006fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000702:	ea4f 0131 	mov.w	r1, r1, rrx
 8000706:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800070a:	bf1f      	itttt	ne
 800070c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000710:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000714:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000718:	4770      	bxne	lr
 800071a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800071e:	bf08      	it	eq
 8000720:	4770      	bxeq	lr
 8000722:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000726:	bf04      	itt	eq
 8000728:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800072c:	4770      	bxeq	lr
 800072e:	b530      	push	{r4, r5, lr}
 8000730:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000734:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000738:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800073c:	e71c      	b.n	8000578 <__adddf3+0x138>
 800073e:	bf00      	nop

08000740 <__aeabi_ul2d>:
 8000740:	ea50 0201 	orrs.w	r2, r0, r1
 8000744:	bf08      	it	eq
 8000746:	4770      	bxeq	lr
 8000748:	b530      	push	{r4, r5, lr}
 800074a:	f04f 0500 	mov.w	r5, #0
 800074e:	e00a      	b.n	8000766 <__aeabi_l2d+0x16>

08000750 <__aeabi_l2d>:
 8000750:	ea50 0201 	orrs.w	r2, r0, r1
 8000754:	bf08      	it	eq
 8000756:	4770      	bxeq	lr
 8000758:	b530      	push	{r4, r5, lr}
 800075a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800075e:	d502      	bpl.n	8000766 <__aeabi_l2d+0x16>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800076a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000772:	f43f aed8 	beq.w	8000526 <__adddf3+0xe6>
 8000776:	f04f 0203 	mov.w	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000786:	bf18      	it	ne
 8000788:	3203      	addne	r2, #3
 800078a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800078e:	f1c2 0320 	rsb	r3, r2, #32
 8000792:	fa00 fc03 	lsl.w	ip, r0, r3
 8000796:	fa20 f002 	lsr.w	r0, r0, r2
 800079a:	fa01 fe03 	lsl.w	lr, r1, r3
 800079e:	ea40 000e 	orr.w	r0, r0, lr
 80007a2:	fa21 f102 	lsr.w	r1, r1, r2
 80007a6:	4414      	add	r4, r2
 80007a8:	e6bd      	b.n	8000526 <__adddf3+0xe6>
 80007aa:	bf00      	nop

080007ac <__aeabi_d2f>:
 80007ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007b0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007b4:	bf24      	itt	cs
 80007b6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007ba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007be:	d90d      	bls.n	80007dc <__aeabi_d2f+0x30>
 80007c0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007c4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007c8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007cc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007d0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007d4:	bf08      	it	eq
 80007d6:	f020 0001 	biceq.w	r0, r0, #1
 80007da:	4770      	bx	lr
 80007dc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007e0:	d121      	bne.n	8000826 <__aeabi_d2f+0x7a>
 80007e2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007e6:	bfbc      	itt	lt
 80007e8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007ec:	4770      	bxlt	lr
 80007ee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007f2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007f6:	f1c2 0218 	rsb	r2, r2, #24
 80007fa:	f1c2 0c20 	rsb	ip, r2, #32
 80007fe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000802:	fa20 f002 	lsr.w	r0, r0, r2
 8000806:	bf18      	it	ne
 8000808:	f040 0001 	orrne.w	r0, r0, #1
 800080c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000810:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000814:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000818:	ea40 000c 	orr.w	r0, r0, ip
 800081c:	fa23 f302 	lsr.w	r3, r3, r2
 8000820:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000824:	e7cc      	b.n	80007c0 <__aeabi_d2f+0x14>
 8000826:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800082a:	d107      	bne.n	800083c <__aeabi_d2f+0x90>
 800082c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000830:	bf1e      	ittt	ne
 8000832:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000836:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800083a:	4770      	bxne	lr
 800083c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000840:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000844:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop

0800084c <__aeabi_uldivmod>:
 800084c:	b953      	cbnz	r3, 8000864 <__aeabi_uldivmod+0x18>
 800084e:	b94a      	cbnz	r2, 8000864 <__aeabi_uldivmod+0x18>
 8000850:	2900      	cmp	r1, #0
 8000852:	bf08      	it	eq
 8000854:	2800      	cmpeq	r0, #0
 8000856:	bf1c      	itt	ne
 8000858:	f04f 31ff 	movne.w	r1, #4294967295
 800085c:	f04f 30ff 	movne.w	r0, #4294967295
 8000860:	f000 b974 	b.w	8000b4c <__aeabi_idiv0>
 8000864:	f1ad 0c08 	sub.w	ip, sp, #8
 8000868:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800086c:	f000 f806 	bl	800087c <__udivmoddi4>
 8000870:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000874:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000878:	b004      	add	sp, #16
 800087a:	4770      	bx	lr

0800087c <__udivmoddi4>:
 800087c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000880:	9d08      	ldr	r5, [sp, #32]
 8000882:	4604      	mov	r4, r0
 8000884:	468e      	mov	lr, r1
 8000886:	2b00      	cmp	r3, #0
 8000888:	d14d      	bne.n	8000926 <__udivmoddi4+0xaa>
 800088a:	428a      	cmp	r2, r1
 800088c:	4694      	mov	ip, r2
 800088e:	d969      	bls.n	8000964 <__udivmoddi4+0xe8>
 8000890:	fab2 f282 	clz	r2, r2
 8000894:	b152      	cbz	r2, 80008ac <__udivmoddi4+0x30>
 8000896:	fa01 f302 	lsl.w	r3, r1, r2
 800089a:	f1c2 0120 	rsb	r1, r2, #32
 800089e:	fa20 f101 	lsr.w	r1, r0, r1
 80008a2:	fa0c fc02 	lsl.w	ip, ip, r2
 80008a6:	ea41 0e03 	orr.w	lr, r1, r3
 80008aa:	4094      	lsls	r4, r2
 80008ac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008b0:	0c21      	lsrs	r1, r4, #16
 80008b2:	fbbe f6f8 	udiv	r6, lr, r8
 80008b6:	fa1f f78c 	uxth.w	r7, ip
 80008ba:	fb08 e316 	mls	r3, r8, r6, lr
 80008be:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80008c2:	fb06 f107 	mul.w	r1, r6, r7
 80008c6:	4299      	cmp	r1, r3
 80008c8:	d90a      	bls.n	80008e0 <__udivmoddi4+0x64>
 80008ca:	eb1c 0303 	adds.w	r3, ip, r3
 80008ce:	f106 30ff 	add.w	r0, r6, #4294967295
 80008d2:	f080 811f 	bcs.w	8000b14 <__udivmoddi4+0x298>
 80008d6:	4299      	cmp	r1, r3
 80008d8:	f240 811c 	bls.w	8000b14 <__udivmoddi4+0x298>
 80008dc:	3e02      	subs	r6, #2
 80008de:	4463      	add	r3, ip
 80008e0:	1a5b      	subs	r3, r3, r1
 80008e2:	b2a4      	uxth	r4, r4
 80008e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80008e8:	fb08 3310 	mls	r3, r8, r0, r3
 80008ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008f0:	fb00 f707 	mul.w	r7, r0, r7
 80008f4:	42a7      	cmp	r7, r4
 80008f6:	d90a      	bls.n	800090e <__udivmoddi4+0x92>
 80008f8:	eb1c 0404 	adds.w	r4, ip, r4
 80008fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000900:	f080 810a 	bcs.w	8000b18 <__udivmoddi4+0x29c>
 8000904:	42a7      	cmp	r7, r4
 8000906:	f240 8107 	bls.w	8000b18 <__udivmoddi4+0x29c>
 800090a:	4464      	add	r4, ip
 800090c:	3802      	subs	r0, #2
 800090e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000912:	1be4      	subs	r4, r4, r7
 8000914:	2600      	movs	r6, #0
 8000916:	b11d      	cbz	r5, 8000920 <__udivmoddi4+0xa4>
 8000918:	40d4      	lsrs	r4, r2
 800091a:	2300      	movs	r3, #0
 800091c:	e9c5 4300 	strd	r4, r3, [r5]
 8000920:	4631      	mov	r1, r6
 8000922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000926:	428b      	cmp	r3, r1
 8000928:	d909      	bls.n	800093e <__udivmoddi4+0xc2>
 800092a:	2d00      	cmp	r5, #0
 800092c:	f000 80ef 	beq.w	8000b0e <__udivmoddi4+0x292>
 8000930:	2600      	movs	r6, #0
 8000932:	e9c5 0100 	strd	r0, r1, [r5]
 8000936:	4630      	mov	r0, r6
 8000938:	4631      	mov	r1, r6
 800093a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800093e:	fab3 f683 	clz	r6, r3
 8000942:	2e00      	cmp	r6, #0
 8000944:	d14a      	bne.n	80009dc <__udivmoddi4+0x160>
 8000946:	428b      	cmp	r3, r1
 8000948:	d302      	bcc.n	8000950 <__udivmoddi4+0xd4>
 800094a:	4282      	cmp	r2, r0
 800094c:	f200 80f9 	bhi.w	8000b42 <__udivmoddi4+0x2c6>
 8000950:	1a84      	subs	r4, r0, r2
 8000952:	eb61 0303 	sbc.w	r3, r1, r3
 8000956:	2001      	movs	r0, #1
 8000958:	469e      	mov	lr, r3
 800095a:	2d00      	cmp	r5, #0
 800095c:	d0e0      	beq.n	8000920 <__udivmoddi4+0xa4>
 800095e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000962:	e7dd      	b.n	8000920 <__udivmoddi4+0xa4>
 8000964:	b902      	cbnz	r2, 8000968 <__udivmoddi4+0xec>
 8000966:	deff      	udf	#255	; 0xff
 8000968:	fab2 f282 	clz	r2, r2
 800096c:	2a00      	cmp	r2, #0
 800096e:	f040 8092 	bne.w	8000a96 <__udivmoddi4+0x21a>
 8000972:	eba1 010c 	sub.w	r1, r1, ip
 8000976:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800097a:	fa1f fe8c 	uxth.w	lr, ip
 800097e:	2601      	movs	r6, #1
 8000980:	0c20      	lsrs	r0, r4, #16
 8000982:	fbb1 f3f7 	udiv	r3, r1, r7
 8000986:	fb07 1113 	mls	r1, r7, r3, r1
 800098a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800098e:	fb0e f003 	mul.w	r0, lr, r3
 8000992:	4288      	cmp	r0, r1
 8000994:	d908      	bls.n	80009a8 <__udivmoddi4+0x12c>
 8000996:	eb1c 0101 	adds.w	r1, ip, r1
 800099a:	f103 38ff 	add.w	r8, r3, #4294967295
 800099e:	d202      	bcs.n	80009a6 <__udivmoddi4+0x12a>
 80009a0:	4288      	cmp	r0, r1
 80009a2:	f200 80cb 	bhi.w	8000b3c <__udivmoddi4+0x2c0>
 80009a6:	4643      	mov	r3, r8
 80009a8:	1a09      	subs	r1, r1, r0
 80009aa:	b2a4      	uxth	r4, r4
 80009ac:	fbb1 f0f7 	udiv	r0, r1, r7
 80009b0:	fb07 1110 	mls	r1, r7, r0, r1
 80009b4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80009b8:	fb0e fe00 	mul.w	lr, lr, r0
 80009bc:	45a6      	cmp	lr, r4
 80009be:	d908      	bls.n	80009d2 <__udivmoddi4+0x156>
 80009c0:	eb1c 0404 	adds.w	r4, ip, r4
 80009c4:	f100 31ff 	add.w	r1, r0, #4294967295
 80009c8:	d202      	bcs.n	80009d0 <__udivmoddi4+0x154>
 80009ca:	45a6      	cmp	lr, r4
 80009cc:	f200 80bb 	bhi.w	8000b46 <__udivmoddi4+0x2ca>
 80009d0:	4608      	mov	r0, r1
 80009d2:	eba4 040e 	sub.w	r4, r4, lr
 80009d6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80009da:	e79c      	b.n	8000916 <__udivmoddi4+0x9a>
 80009dc:	f1c6 0720 	rsb	r7, r6, #32
 80009e0:	40b3      	lsls	r3, r6
 80009e2:	fa22 fc07 	lsr.w	ip, r2, r7
 80009e6:	ea4c 0c03 	orr.w	ip, ip, r3
 80009ea:	fa20 f407 	lsr.w	r4, r0, r7
 80009ee:	fa01 f306 	lsl.w	r3, r1, r6
 80009f2:	431c      	orrs	r4, r3
 80009f4:	40f9      	lsrs	r1, r7
 80009f6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80009fa:	fa00 f306 	lsl.w	r3, r0, r6
 80009fe:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a02:	0c20      	lsrs	r0, r4, #16
 8000a04:	fa1f fe8c 	uxth.w	lr, ip
 8000a08:	fb09 1118 	mls	r1, r9, r8, r1
 8000a0c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a10:	fb08 f00e 	mul.w	r0, r8, lr
 8000a14:	4288      	cmp	r0, r1
 8000a16:	fa02 f206 	lsl.w	r2, r2, r6
 8000a1a:	d90b      	bls.n	8000a34 <__udivmoddi4+0x1b8>
 8000a1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a20:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a24:	f080 8088 	bcs.w	8000b38 <__udivmoddi4+0x2bc>
 8000a28:	4288      	cmp	r0, r1
 8000a2a:	f240 8085 	bls.w	8000b38 <__udivmoddi4+0x2bc>
 8000a2e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a32:	4461      	add	r1, ip
 8000a34:	1a09      	subs	r1, r1, r0
 8000a36:	b2a4      	uxth	r4, r4
 8000a38:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a3c:	fb09 1110 	mls	r1, r9, r0, r1
 8000a40:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a44:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a48:	458e      	cmp	lr, r1
 8000a4a:	d908      	bls.n	8000a5e <__udivmoddi4+0x1e2>
 8000a4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a50:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a54:	d26c      	bcs.n	8000b30 <__udivmoddi4+0x2b4>
 8000a56:	458e      	cmp	lr, r1
 8000a58:	d96a      	bls.n	8000b30 <__udivmoddi4+0x2b4>
 8000a5a:	3802      	subs	r0, #2
 8000a5c:	4461      	add	r1, ip
 8000a5e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a62:	fba0 9402 	umull	r9, r4, r0, r2
 8000a66:	eba1 010e 	sub.w	r1, r1, lr
 8000a6a:	42a1      	cmp	r1, r4
 8000a6c:	46c8      	mov	r8, r9
 8000a6e:	46a6      	mov	lr, r4
 8000a70:	d356      	bcc.n	8000b20 <__udivmoddi4+0x2a4>
 8000a72:	d053      	beq.n	8000b1c <__udivmoddi4+0x2a0>
 8000a74:	b15d      	cbz	r5, 8000a8e <__udivmoddi4+0x212>
 8000a76:	ebb3 0208 	subs.w	r2, r3, r8
 8000a7a:	eb61 010e 	sbc.w	r1, r1, lr
 8000a7e:	fa01 f707 	lsl.w	r7, r1, r7
 8000a82:	fa22 f306 	lsr.w	r3, r2, r6
 8000a86:	40f1      	lsrs	r1, r6
 8000a88:	431f      	orrs	r7, r3
 8000a8a:	e9c5 7100 	strd	r7, r1, [r5]
 8000a8e:	2600      	movs	r6, #0
 8000a90:	4631      	mov	r1, r6
 8000a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a96:	f1c2 0320 	rsb	r3, r2, #32
 8000a9a:	40d8      	lsrs	r0, r3
 8000a9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aa0:	fa21 f303 	lsr.w	r3, r1, r3
 8000aa4:	4091      	lsls	r1, r2
 8000aa6:	4301      	orrs	r1, r0
 8000aa8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aac:	fa1f fe8c 	uxth.w	lr, ip
 8000ab0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ab4:	fb07 3610 	mls	r6, r7, r0, r3
 8000ab8:	0c0b      	lsrs	r3, r1, #16
 8000aba:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000abe:	fb00 f60e 	mul.w	r6, r0, lr
 8000ac2:	429e      	cmp	r6, r3
 8000ac4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ac8:	d908      	bls.n	8000adc <__udivmoddi4+0x260>
 8000aca:	eb1c 0303 	adds.w	r3, ip, r3
 8000ace:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ad2:	d22f      	bcs.n	8000b34 <__udivmoddi4+0x2b8>
 8000ad4:	429e      	cmp	r6, r3
 8000ad6:	d92d      	bls.n	8000b34 <__udivmoddi4+0x2b8>
 8000ad8:	3802      	subs	r0, #2
 8000ada:	4463      	add	r3, ip
 8000adc:	1b9b      	subs	r3, r3, r6
 8000ade:	b289      	uxth	r1, r1
 8000ae0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ae4:	fb07 3316 	mls	r3, r7, r6, r3
 8000ae8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000aec:	fb06 f30e 	mul.w	r3, r6, lr
 8000af0:	428b      	cmp	r3, r1
 8000af2:	d908      	bls.n	8000b06 <__udivmoddi4+0x28a>
 8000af4:	eb1c 0101 	adds.w	r1, ip, r1
 8000af8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000afc:	d216      	bcs.n	8000b2c <__udivmoddi4+0x2b0>
 8000afe:	428b      	cmp	r3, r1
 8000b00:	d914      	bls.n	8000b2c <__udivmoddi4+0x2b0>
 8000b02:	3e02      	subs	r6, #2
 8000b04:	4461      	add	r1, ip
 8000b06:	1ac9      	subs	r1, r1, r3
 8000b08:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b0c:	e738      	b.n	8000980 <__udivmoddi4+0x104>
 8000b0e:	462e      	mov	r6, r5
 8000b10:	4628      	mov	r0, r5
 8000b12:	e705      	b.n	8000920 <__udivmoddi4+0xa4>
 8000b14:	4606      	mov	r6, r0
 8000b16:	e6e3      	b.n	80008e0 <__udivmoddi4+0x64>
 8000b18:	4618      	mov	r0, r3
 8000b1a:	e6f8      	b.n	800090e <__udivmoddi4+0x92>
 8000b1c:	454b      	cmp	r3, r9
 8000b1e:	d2a9      	bcs.n	8000a74 <__udivmoddi4+0x1f8>
 8000b20:	ebb9 0802 	subs.w	r8, r9, r2
 8000b24:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b28:	3801      	subs	r0, #1
 8000b2a:	e7a3      	b.n	8000a74 <__udivmoddi4+0x1f8>
 8000b2c:	4646      	mov	r6, r8
 8000b2e:	e7ea      	b.n	8000b06 <__udivmoddi4+0x28a>
 8000b30:	4620      	mov	r0, r4
 8000b32:	e794      	b.n	8000a5e <__udivmoddi4+0x1e2>
 8000b34:	4640      	mov	r0, r8
 8000b36:	e7d1      	b.n	8000adc <__udivmoddi4+0x260>
 8000b38:	46d0      	mov	r8, sl
 8000b3a:	e77b      	b.n	8000a34 <__udivmoddi4+0x1b8>
 8000b3c:	3b02      	subs	r3, #2
 8000b3e:	4461      	add	r1, ip
 8000b40:	e732      	b.n	80009a8 <__udivmoddi4+0x12c>
 8000b42:	4630      	mov	r0, r6
 8000b44:	e709      	b.n	800095a <__udivmoddi4+0xde>
 8000b46:	4464      	add	r4, ip
 8000b48:	3802      	subs	r0, #2
 8000b4a:	e742      	b.n	80009d2 <__udivmoddi4+0x156>

08000b4c <__aeabi_idiv0>:
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b88 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b54:	480d      	ldr	r0, [pc, #52]	; (8000b8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b56:	490e      	ldr	r1, [pc, #56]	; (8000b90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b58:	4a0e      	ldr	r2, [pc, #56]	; (8000b94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b5c:	e002      	b.n	8000b64 <LoopCopyDataInit>

08000b5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b62:	3304      	adds	r3, #4

08000b64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b68:	d3f9      	bcc.n	8000b5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b6a:	4a0b      	ldr	r2, [pc, #44]	; (8000b98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b6c:	4c0b      	ldr	r4, [pc, #44]	; (8000b9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b70:	e001      	b.n	8000b76 <LoopFillZerobss>

08000b72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b74:	3204      	adds	r2, #4

08000b76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b78:	d3fb      	bcc.n	8000b72 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b7a:	f002 fea7 	bl	80038cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b7e:	f008 f93b 	bl	8008df8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b82:	f000 f8f9 	bl	8000d78 <main>
  bx  lr    
 8000b86:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b88:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b90:	20000610 	.word	0x20000610
  ldr r2, =_sidata
 8000b94:	080093e8 	.word	0x080093e8
  ldr r2, =_sbss
 8000b98:	20000610 	.word	0x20000610
  ldr r4, =_ebss
 8000b9c:	20004a40 	.word	0x20004a40

08000ba0 <BusFault_Handler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ba0:	e7fe      	b.n	8000ba0 <BusFault_Handler>
	...

08000ba4 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ba4:	4b04      	ldr	r3, [pc, #16]	; (8000bb8 <vApplicationGetIdleTaskMemory+0x14>)
 8000ba6:	6003      	str	r3, [r0, #0]
{
 8000ba8:	b410      	push	{r4}
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000baa:	2380      	movs	r3, #128	; 0x80
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000bac:	4c03      	ldr	r4, [pc, #12]	; (8000bbc <vApplicationGetIdleTaskMemory+0x18>)
 8000bae:	600c      	str	r4, [r1, #0]
  /* place for user code */
}
 8000bb0:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000bb4:	6013      	str	r3, [r2, #0]
}
 8000bb6:	4770      	bx	lr
 8000bb8:	2000082c 	.word	0x2000082c
 8000bbc:	2000062c 	.word	0x2000062c

08000bc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bc0:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc2:	2400      	movs	r4, #0
{
 8000bc4:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc6:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8000bca:	e9cd 4406 	strd	r4, r4, [sp, #24]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bce:	4b36      	ldr	r3, [pc, #216]	; (8000ca8 <MX_GPIO_Init+0xe8>)
 8000bd0:	9400      	str	r4, [sp, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd2:	9408      	str	r4, [sp, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  if(UART_OFF == 0x00)
 8000bd6:	4935      	ldr	r1, [pc, #212]	; (8000cac <MX_GPIO_Init+0xec>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bd8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000bdc:	631a      	str	r2, [r3, #48]	; 0x30
 8000bde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000be0:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000be4:	9200      	str	r2, [sp, #0]
 8000be6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be8:	9401      	str	r4, [sp, #4]
 8000bea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000bec:	f042 0204 	orr.w	r2, r2, #4
 8000bf0:	631a      	str	r2, [r3, #48]	; 0x30
 8000bf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000bf4:	f002 0204 	and.w	r2, r2, #4
 8000bf8:	9201      	str	r2, [sp, #4]
 8000bfa:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfc:	9402      	str	r4, [sp, #8]
 8000bfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c00:	f042 0201 	orr.w	r2, r2, #1
 8000c04:	631a      	str	r2, [r3, #48]	; 0x30
 8000c06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c08:	f002 0201 	and.w	r2, r2, #1
 8000c0c:	9202      	str	r2, [sp, #8]
 8000c0e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c10:	9403      	str	r4, [sp, #12]
 8000c12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c14:	f042 0202 	orr.w	r2, r2, #2
 8000c18:	631a      	str	r2, [r3, #48]	; 0x30
 8000c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  if(UART_OFF == 0x00)
 8000c1c:	780a      	ldrb	r2, [r1, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1e:	f003 0302 	and.w	r3, r3, #2
 8000c22:	9303      	str	r3, [sp, #12]
 8000c24:	9b03      	ldr	r3, [sp, #12]
  if(UART_OFF == 0x00)
 8000c26:	b11a      	cbz	r2, 8000c30 <MX_GPIO_Init+0x70>
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
  }
  else if(UART_OFF == 0x01)
 8000c28:	2a01      	cmp	r2, #1
 8000c2a:	d014      	beq.n	8000c56 <MX_GPIO_Init+0x96>
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,GPIO_PIN_RESET);

  }

}
 8000c2c:	b00a      	add	sp, #40	; 0x28
 8000c2e:	bd10      	pop	{r4, pc}
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000c30:	481f      	ldr	r0, [pc, #124]	; (8000cb0 <MX_GPIO_Init+0xf0>)
 8000c32:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000c36:	f003 fae1 	bl	80041fc <HAL_GPIO_WritePin>
	  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8000c3a:	ed9f 7b19 	vldr	d7, [pc, #100]	; 8000ca0 <MX_GPIO_Init+0xe0>
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2300      	movs	r3, #0
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c42:	481b      	ldr	r0, [pc, #108]	; (8000cb0 <MX_GPIO_Init+0xf0>)
 8000c44:	a904      	add	r1, sp, #16
	  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8000c46:	ed8d 7b04 	vstr	d7, [sp, #16]
 8000c4a:	e9cd 2306 	strd	r2, r3, [sp, #24]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c4e:	f003 f957 	bl	8003f00 <HAL_GPIO_Init>
}
 8000c52:	b00a      	add	sp, #40	; 0x28
 8000c54:	bd10      	pop	{r4, pc}
	  GPIO_InitStruct.Pin  = GPIO_PIN_3; /*UART2 Rx Pin PA3*/
 8000c56:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5a:	a904      	add	r1, sp, #16
	  GPIO_InitStruct.Pin  = GPIO_PIN_3; /*UART2 Rx Pin PA3*/
 8000c5c:	2208      	movs	r2, #8
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5e:	4815      	ldr	r0, [pc, #84]	; (8000cb4 <MX_GPIO_Init+0xf4>)
	  GPIO_InitStruct.Pin  = GPIO_PIN_3; /*UART2 Rx Pin PA3*/
 8000c60:	e9cd 2304 	strd	r2, r3, [sp, #16]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c64:	f003 f94c 	bl	8003f00 <HAL_GPIO_Init>
	  HAL_NVIC_SetPriority(EXTI3_IRQn,3,0);
 8000c68:	4622      	mov	r2, r4
 8000c6a:	2103      	movs	r1, #3
 8000c6c:	2009      	movs	r0, #9
 8000c6e:	f003 f8bb 	bl	8003de8 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000c72:	2009      	movs	r0, #9
 8000c74:	f003 f8f6 	bl	8003e64 <HAL_NVIC_EnableIRQ>
	  GPIO_InitStruct.Pin  = GPIO_PIN_2; /*UART2 Tx Pin PA2*/
 8000c78:	2204      	movs	r2, #4
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e9cd 2304 	strd	r2, r3, [sp, #16]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c80:	a904      	add	r1, sp, #16
	  GPIO_InitStruct.Pin  = GPIO_PIN_2; /*UART2 Tx Pin PA2*/
 8000c82:	2300      	movs	r3, #0
 8000c84:	2200      	movs	r2, #0
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c86:	480b      	ldr	r0, [pc, #44]	; (8000cb4 <MX_GPIO_Init+0xf4>)
	  GPIO_InitStruct.Pin  = GPIO_PIN_2; /*UART2 Tx Pin PA2*/
 8000c88:	e9cd 2306 	strd	r2, r3, [sp, #24]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8c:	f003 f938 	bl	8003f00 <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,GPIO_PIN_RESET);
 8000c90:	4808      	ldr	r0, [pc, #32]	; (8000cb4 <MX_GPIO_Init+0xf4>)
 8000c92:	4622      	mov	r2, r4
 8000c94:	2104      	movs	r1, #4
 8000c96:	f003 fab1 	bl	80041fc <HAL_GPIO_WritePin>
}
 8000c9a:	b00a      	add	sp, #40	; 0x28
 8000c9c:	bd10      	pop	{r4, pc}
 8000c9e:	bf00      	nop
 8000ca0:	00007000 	.word	0x00007000
 8000ca4:	00000001 	.word	0x00000001
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	200008e0 	.word	0x200008e0
 8000cb0:	40020400 	.word	0x40020400
 8000cb4:	40020000 	.word	0x40020000

08000cb8 <SystemClock_Config>:
{
 8000cb8:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cba:	2300      	movs	r3, #0
{
 8000cbc:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cbe:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8000cc2:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cc6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8000cca:	e9cd 3304 	strd	r3, r3, [sp, #16]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cce:	4928      	ldr	r1, [pc, #160]	; (8000d70 <SystemClock_Config+0xb8>)
 8000cd0:	9300      	str	r3, [sp, #0]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cd2:	9306      	str	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd4:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000cd6:	4a27      	ldr	r2, [pc, #156]	; (8000d74 <SystemClock_Config+0xbc>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd8:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8000cdc:	6408      	str	r0, [r1, #64]	; 0x40
 8000cde:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000ce0:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8000ce4:	9100      	str	r1, [sp, #0]
 8000ce6:	9900      	ldr	r1, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ce8:	9301      	str	r3, [sp, #4]
 8000cea:	6813      	ldr	r3, [r2, #0]
 8000cec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000cf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cf4:	6013      	str	r3, [r2, #0]
 8000cf6:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cf8:	ed9f 7b17 	vldr	d7, [pc, #92]	; 8000d58 <SystemClock_Config+0xa0>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000cfc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d00:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d02:	2308      	movs	r3, #8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d04:	2402      	movs	r4, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d06:	9801      	ldr	r0, [sp, #4]
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d08:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d0a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000d0e:	2254      	movs	r2, #84	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d10:	2304      	movs	r3, #4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d12:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d14:	ed8d 7b08 	vstr	d7, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d18:	e9cd 410e 	strd	r4, r1, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d1c:	e9cd 2411 	strd	r2, r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d20:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d22:	f003 fa99 	bl	8004258 <HAL_RCC_OscConfig>
 8000d26:	b108      	cbz	r0, 8000d2c <SystemClock_Config+0x74>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d28:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d2a:	e7fe      	b.n	8000d2a <SystemClock_Config+0x72>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d2c:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8000d60 <SystemClock_Config+0xa8>
 8000d30:	ed8d 7b02 	vstr	d7, [sp, #8]
 8000d34:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8000d68 <SystemClock_Config+0xb0>
 8000d38:	4603      	mov	r3, r0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d3a:	4621      	mov	r1, r4
 8000d3c:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d3e:	ed8d 7b04 	vstr	d7, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d42:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d44:	f003 fc98 	bl	8004678 <HAL_RCC_ClockConfig>
 8000d48:	b108      	cbz	r0, 8000d4e <SystemClock_Config+0x96>
 8000d4a:	b672      	cpsid	i
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <SystemClock_Config+0x94>
  HAL_RCC_EnableCSS();
 8000d4e:	f003 fc67 	bl	8004620 <HAL_RCC_EnableCSS>
}
 8000d52:	b014      	add	sp, #80	; 0x50
 8000d54:	bd10      	pop	{r4, pc}
 8000d56:	bf00      	nop
 8000d58:	00000001 	.word	0x00000001
 8000d5c:	00010000 	.word	0x00010000
 8000d60:	0000000f 	.word	0x0000000f
 8000d64:	00000002 	.word	0x00000002
 8000d68:	00000000 	.word	0x00000000
 8000d6c:	00001000 	.word	0x00001000
 8000d70:	40023800 	.word	0x40023800
 8000d74:	40007000 	.word	0x40007000

08000d78 <main>:
{
 8000d78:	b580      	push	{r7, lr}
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000d7a:	2620      	movs	r6, #32
{
 8000d7c:	b098      	sub	sp, #96	; 0x60
  hadc1.Instance = ADC1;
 8000d7e:	4ca3      	ldr	r4, [pc, #652]	; (800100c <main+0x294>)
  HAL_Init();
 8000d80:	f002 fdae 	bl	80038e0 <HAL_Init>
  SystemClock_Config();
 8000d84:	f7ff ff98 	bl	8000cb8 <SystemClock_Config>
  MX_GPIO_Init();
 8000d88:	f7ff ff1a 	bl	8000bc0 <MX_GPIO_Init>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000d8c:	4632      	mov	r2, r6
 8000d8e:	2100      	movs	r1, #0
 8000d90:	a810      	add	r0, sp, #64	; 0x40
 8000d92:	f008 f857 	bl	8008e44 <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d96:	2300      	movs	r3, #0
 8000d98:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8000d9c:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000da0:	60a3      	str	r3, [r4, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000da2:	7623      	strb	r3, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000da4:	f884 3020 	strb.w	r3, [r4, #32]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000da8:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  hadc1.Instance = ADC1;
 8000dac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000db0:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 8000db4:	6023      	str	r3, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000db6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dba:	4a95      	ldr	r2, [pc, #596]	; (8001010 <main+0x298>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000dbc:	6063      	str	r3, [r4, #4]
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000dbe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000dc2:	60e3      	str	r3, [r4, #12]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dc4:	2300      	movs	r3, #0
  hadc1.Init.ScanConvMode = ENABLE;
 8000dc6:	2501      	movs	r5, #1
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dc8:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dcc:	4620      	mov	r0, r4
  hadc1.Init.ScanConvMode = ENABLE;
 8000dce:	6125      	str	r5, [r4, #16]
  hadc1.Init.NbrOfConversion = 1;
 8000dd0:	61e5      	str	r5, [r4, #28]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dd2:	6165      	str	r5, [r4, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dd4:	f002 fdc2 	bl	800395c <HAL_ADC_Init>
 8000dd8:	b108      	cbz	r0, 8000dde <main+0x66>
 8000dda:	b672      	cpsid	i
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <main+0x64>
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000dde:	2303      	movs	r3, #3
  sConfigInjected.InjectedRank = 1;
 8000de0:	e9cd 0510 	strd	r0, r5, [sp, #64]	; 0x40
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000de4:	9012      	str	r0, [sp, #72]	; 0x48
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000de6:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
  sConfigInjected.InjectedOffset = 0;
 8000dea:	9013      	str	r0, [sp, #76]	; 0x4c
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000dec:	9314      	str	r3, [sp, #80]	; 0x50
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 8000dee:	2200      	movs	r2, #0
 8000df0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000df4:	a910      	add	r1, sp, #64	; 0x40
 8000df6:	4620      	mov	r0, r4
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 8000df8:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000dfc:	f002 ff0a 	bl	8003c14 <HAL_ADCEx_InjectedConfigChannel>
 8000e00:	b108      	cbz	r0, 8000e06 <main+0x8e>
 8000e02:	b672      	cpsid	i
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <main+0x8c>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_11;
 8000e06:	220b      	movs	r2, #11
 8000e08:	2302      	movs	r3, #2
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000e0a:	a910      	add	r1, sp, #64	; 0x40
 8000e0c:	4620      	mov	r0, r4
  sConfigInjected.InjectedChannel = ADC_CHANNEL_11;
 8000e0e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000e12:	f002 feff 	bl	8003c14 <HAL_ADCEx_InjectedConfigChannel>
 8000e16:	b108      	cbz	r0, 8000e1c <main+0xa4>
 8000e18:	b672      	cpsid	i
  while (1)
 8000e1a:	e7fe      	b.n	8000e1a <main+0xa2>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_10;
 8000e1c:	220a      	movs	r2, #10
 8000e1e:	2303      	movs	r3, #3
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000e20:	a910      	add	r1, sp, #64	; 0x40
 8000e22:	4620      	mov	r0, r4
  sConfigInjected.InjectedChannel = ADC_CHANNEL_10;
 8000e24:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000e28:	f002 fef4 	bl	8003c14 <HAL_ADCEx_InjectedConfigChannel>
 8000e2c:	b108      	cbz	r0, 8000e32 <main+0xba>
 8000e2e:	b672      	cpsid	i
  while (1)
 8000e30:	e7fe      	b.n	8000e30 <main+0xb8>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e32:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_1;
 8000e34:	2201      	movs	r2, #1
 8000e36:	2301      	movs	r3, #1
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e38:	a908      	add	r1, sp, #32
  sConfig.Channel = ADC_CHANNEL_1;
 8000e3a:	f04f 0800 	mov.w	r8, #0
 8000e3e:	f04f 0900 	mov.w	r9, #0
 8000e42:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8000e46:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e4a:	f002 fe35 	bl	8003ab8 <HAL_ADC_ConfigChannel>
 8000e4e:	4604      	mov	r4, r0
 8000e50:	b108      	cbz	r0, 8000e56 <main+0xde>
 8000e52:	b672      	cpsid	i
  while (1)
 8000e54:	e7fe      	b.n	8000e54 <main+0xdc>
  htim1.Instance = TIM1;
 8000e56:	4f6f      	ldr	r7, [pc, #444]	; (8001014 <main+0x29c>)
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000e58:	9002      	str	r0, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e5a:	e9cd 0008 	strd	r0, r0, [sp, #32]
 8000e5e:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 8000e62:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000e66:	e9cd 0003 	strd	r0, r0, [sp, #12]
 8000e6a:	e9cd 0005 	strd	r0, r0, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e6e:	9000      	str	r0, [sp, #0]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e70:	900e      	str	r0, [sp, #56]	; 0x38
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e72:	9001      	str	r0, [sp, #4]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e74:	4601      	mov	r1, r0
 8000e76:	4632      	mov	r2, r6
 8000e78:	a810      	add	r0, sp, #64	; 0x40
 8000e7a:	f007 ffe3 	bl	8008e44 <memset>
  htim1.Instance = TIM1;
 8000e7e:	4b66      	ldr	r3, [pc, #408]	; (8001018 <main+0x2a0>)
 8000e80:	603b      	str	r3, [r7, #0]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000e82:	f640 2041 	movw	r0, #2625	; 0xa41
 8000e86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e8a:	e9c7 0303 	strd	r0, r3, [r7, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e8e:	4638      	mov	r0, r7
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000e90:	60be      	str	r6, [r7, #8]
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 8000e92:	617d      	str	r5, [r7, #20]
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 8000e94:	607c      	str	r4, [r7, #4]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e96:	61bc      	str	r4, [r7, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e98:	f003 fcd4 	bl	8004844 <HAL_TIM_Base_Init>
 8000e9c:	b108      	cbz	r0, 8000ea2 <main+0x12a>
 8000e9e:	b672      	cpsid	i
  while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <main+0x128>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ea2:	4638      	mov	r0, r7
 8000ea4:	f003 fd82 	bl	80049ac <HAL_TIM_PWM_Init>
 8000ea8:	b108      	cbz	r0, 8000eae <main+0x136>
 8000eaa:	b672      	cpsid	i
  while (1)
 8000eac:	e7fe      	b.n	8000eac <main+0x134>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000eae:	2206      	movs	r2, #6
 8000eb0:	2310      	movs	r3, #16
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000eb2:	a902      	add	r1, sp, #8
 8000eb4:	4638      	mov	r0, r7
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000eb6:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000eba:	f003 ffab 	bl	8004e14 <HAL_TIM_SlaveConfigSynchro>
 8000ebe:	b108      	cbz	r0, 8000ec4 <main+0x14c>
 8000ec0:	b672      	cpsid	i
  while (1)
 8000ec2:	e7fe      	b.n	8000ec2 <main+0x14a>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ec4:	4669      	mov	r1, sp
 8000ec6:	4638      	mov	r0, r7
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ec8:	e9cd 8900 	strd	r8, r9, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ecc:	f004 fa00 	bl	80052d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	b108      	cbz	r0, 8000ed8 <main+0x160>
 8000ed4:	b672      	cpsid	i
  while (1)
 8000ed6:	e7fe      	b.n	8000ed6 <main+0x15e>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ed8:	2460      	movs	r4, #96	; 0x60
 8000eda:	2500      	movs	r5, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000edc:	4638      	mov	r0, r7
 8000ede:	a908      	add	r1, sp, #32
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ee0:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8000ee4:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8000ee8:	e9cd 4508 	strd	r4, r5, [sp, #32]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000eec:	920e      	str	r2, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000eee:	f003 fddb 	bl	8004aa8 <HAL_TIM_PWM_ConfigChannel>
 8000ef2:	b108      	cbz	r0, 8000ef8 <main+0x180>
 8000ef4:	b672      	cpsid	i
  while (1)
 8000ef6:	e7fe      	b.n	8000ef6 <main+0x17e>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ef8:	4846      	ldr	r0, [pc, #280]	; (8001014 <main+0x29c>)
 8000efa:	2204      	movs	r2, #4
 8000efc:	a908      	add	r1, sp, #32
 8000efe:	f003 fdd3 	bl	8004aa8 <HAL_TIM_PWM_ConfigChannel>
 8000f02:	b108      	cbz	r0, 8000f08 <main+0x190>
 8000f04:	b672      	cpsid	i
  while (1)
 8000f06:	e7fe      	b.n	8000f06 <main+0x18e>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f08:	4842      	ldr	r0, [pc, #264]	; (8001014 <main+0x29c>)
 8000f0a:	2208      	movs	r2, #8
 8000f0c:	a908      	add	r1, sp, #32
 8000f0e:	f003 fdcb 	bl	8004aa8 <HAL_TIM_PWM_ConfigChannel>
 8000f12:	b108      	cbz	r0, 8000f18 <main+0x1a0>
 8000f14:	b672      	cpsid	i
  while (1)
 8000f16:	e7fe      	b.n	8000f16 <main+0x19e>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000f18:	2270      	movs	r2, #112	; 0x70
 8000f1a:	f44f 6324 	mov.w	r3, #2624	; 0xa40
 8000f1e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f22:	483c      	ldr	r0, [pc, #240]	; (8001014 <main+0x29c>)
 8000f24:	220c      	movs	r2, #12
 8000f26:	a908      	add	r1, sp, #32
 8000f28:	f003 fdbe 	bl	8004aa8 <HAL_TIM_PWM_ConfigChannel>
 8000f2c:	b108      	cbz	r0, 8000f32 <main+0x1ba>
 8000f2e:	b672      	cpsid	i
  while (1)
 8000f30:	e7fe      	b.n	8000f30 <main+0x1b8>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000f32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f3a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f3e:	9017      	str	r0, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000f40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f44:	232e      	movs	r3, #46	; 0x2e
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f46:	4833      	ldr	r0, [pc, #204]	; (8001014 <main+0x29c>)
 8000f48:	a910      	add	r1, sp, #64	; 0x40
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000f4a:	2600      	movs	r6, #0
 8000f4c:	2700      	movs	r7, #0
 8000f4e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8000f52:	e9cd 6714 	strd	r6, r7, [sp, #80]	; 0x50
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f56:	f004 f9f3 	bl	8005340 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f5a:	4604      	mov	r4, r0
 8000f5c:	b108      	cbz	r0, 8000f62 <main+0x1ea>
 8000f5e:	b672      	cpsid	i
  while (1)
 8000f60:	e7fe      	b.n	8000f60 <main+0x1e8>
  htim2.Instance = TIM2;
 8000f62:	4d2e      	ldr	r5, [pc, #184]	; (800101c <main+0x2a4>)
  HAL_TIM_MspPostInit(&htim1);
 8000f64:	482b      	ldr	r0, [pc, #172]	; (8001014 <main+0x29c>)
 8000f66:	f001 fee3 	bl	8002d30 <HAL_TIM_MspPostInit>
  htim2.Instance = TIM2;
 8000f6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f6e:	602b      	str	r3, [r5, #0]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f70:	4628      	mov	r0, r5
  htim2.Init.Period = M1_HALL_TIM_PERIOD;
 8000f72:	f64f 73ff 	movw	r3, #65535	; 0xffff
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f76:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
 8000f7a:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
  TIM_HallSensor_InitTypeDef sConfig = {0};
 8000f7e:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8000f82:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f86:	e9cd 4402 	strd	r4, r4, [sp, #8]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f8a:	e9c5 4401 	strd	r4, r4, [r5, #4]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f8e:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f90:	61ac      	str	r4, [r5, #24]
  htim2.Init.Period = M1_HALL_TIM_PERIOD;
 8000f92:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f94:	f003 fc56 	bl	8004844 <HAL_TIM_Base_Init>
 8000f98:	b108      	cbz	r0, 8000f9e <main+0x226>
 8000f9a:	b672      	cpsid	i
  while (1)
 8000f9c:	e7fe      	b.n	8000f9c <main+0x224>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fa2:	a910      	add	r1, sp, #64	; 0x40
 8000fa4:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fa6:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fa8:	f003 fe84 	bl	8004cb4 <HAL_TIM_ConfigClockSource>
 8000fac:	b108      	cbz	r0, 8000fb2 <main+0x23a>
 8000fae:	b672      	cpsid	i
  while (1)
 8000fb0:	e7fe      	b.n	8000fb0 <main+0x238>
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000fb2:	220b      	movs	r2, #11
 8000fb4:	2300      	movs	r3, #0
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 8000fb6:	a908      	add	r1, sp, #32
 8000fb8:	4628      	mov	r0, r5
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000fba:	e9cd 6708 	strd	r6, r7, [sp, #32]
 8000fbe:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 8000fc2:	f004 f921 	bl	8005208 <HAL_TIMEx_HallSensor_Init>
 8000fc6:	b108      	cbz	r0, 8000fcc <main+0x254>
 8000fc8:	b672      	cpsid	i
  while (1)
 8000fca:	e7fe      	b.n	8000fca <main+0x252>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8000fcc:	2250      	movs	r2, #80	; 0x50
 8000fce:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fd0:	a902      	add	r1, sp, #8
 8000fd2:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8000fd4:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fd8:	f004 f97a 	bl	80052d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	b108      	cbz	r0, 8000fe4 <main+0x26c>
 8000fe0:	b672      	cpsid	i
  while (1)
 8000fe2:	e7fe      	b.n	8000fe2 <main+0x26a>
  huart2.Instance = USART2;
 8000fe4:	480e      	ldr	r0, [pc, #56]	; (8001020 <main+0x2a8>)
  huart2.Init.BaudRate = 115200;
 8000fe6:	4b0f      	ldr	r3, [pc, #60]	; (8001024 <main+0x2ac>)
 8000fe8:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000fec:	e9c0 3100 	strd	r3, r1, [r0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ff0:	210c      	movs	r1, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ff2:	e9c0 2202 	strd	r2, r2, [r0, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ff6:	e9c0 2104 	strd	r2, r1, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ffa:	e9c0 2206 	strd	r2, r2, [r0, #24]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ffe:	f004 f9cd 	bl	800539c <HAL_UART_Init>
 8001002:	4605      	mov	r5, r0
 8001004:	b180      	cbz	r0, 8001028 <main+0x2b0>
 8001006:	b672      	cpsid	i
  while (1)
 8001008:	e7fe      	b.n	8001008 <main+0x290>
 800100a:	bf00      	nop
 800100c:	200008e8 	.word	0x200008e8
 8001010:	0f000001 	.word	0x0f000001
 8001014:	20000930 	.word	0x20000930
 8001018:	40010000 	.word	0x40010000
 800101c:	20000978 	.word	0x20000978
 8001020:	200009c0 	.word	0x200009c0
 8001024:	40004400 	.word	0x40004400
  MX_MotorControl_Init();
 8001028:	f001 fc50 	bl	80028cc <MX_MotorControl_Init>
  HAL_NVIC_SetPriority(ADC_IRQn, 2, 0);
 800102c:	462a      	mov	r2, r5
 800102e:	2102      	movs	r1, #2
 8001030:	2012      	movs	r0, #18
 8001032:	f002 fed9 	bl	8003de8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001036:	2012      	movs	r0, #18
 8001038:	f002 ff14 	bl	8003e64 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800103c:	462a      	mov	r2, r5
 800103e:	4629      	mov	r1, r5
 8001040:	2019      	movs	r0, #25
 8001042:	f002 fed1 	bl	8003de8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001046:	2019      	movs	r0, #25
 8001048:	f002 ff0c 	bl	8003e64 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 4, 0);
 800104c:	462a      	mov	r2, r5
 800104e:	2104      	movs	r1, #4
 8001050:	2018      	movs	r0, #24
 8001052:	f002 fec9 	bl	8003de8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001056:	2018      	movs	r0, #24
 8001058:	f002 ff04 	bl	8003e64 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 800105c:	462a      	mov	r2, r5
 800105e:	2103      	movs	r1, #3
 8001060:	201c      	movs	r0, #28
 8001062:	f002 fec1 	bl	8003de8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001066:	201c      	movs	r0, #28
 8001068:	f002 fefc 	bl	8003e64 <HAL_NVIC_EnableIRQ>
  osThreadDef(mediumFrequency, startMediumFrequencyTask, osPriorityNormal, 0, 128);
 800106c:	4c1a      	ldr	r4, [pc, #104]	; (80010d8 <main+0x360>)
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 800106e:	462a      	mov	r2, r5
 8001070:	2103      	movs	r1, #3
 8001072:	2026      	movs	r0, #38	; 0x26
 8001074:	f002 feb8 	bl	8003de8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001078:	2026      	movs	r0, #38	; 0x26
 800107a:	f002 fef3 	bl	8003e64 <HAL_NVIC_EnableIRQ>
  osThreadDef(mediumFrequency, startMediumFrequencyTask, osPriorityNormal, 0, 128);
 800107e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001080:	ae08      	add	r6, sp, #32
 8001082:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001084:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001088:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  mediumFrequencyHandle = osThreadCreate(osThread(mediumFrequency), NULL);
 800108c:	4629      	mov	r1, r5
 800108e:	a808      	add	r0, sp, #32
 8001090:	f004 fcd8 	bl	8005a44 <osThreadCreate>
 8001094:	4b11      	ldr	r3, [pc, #68]	; (80010dc <main+0x364>)
  osThreadDef(safety, StartSafetyTask, osPriorityAboveNormal, 0, 128);
 8001096:	340c      	adds	r4, #12
  mediumFrequencyHandle = osThreadCreate(osThread(mediumFrequency), NULL);
 8001098:	6018      	str	r0, [r3, #0]
  osThreadDef(safety, StartSafetyTask, osPriorityAboveNormal, 0, 128);
 800109a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800109c:	ae10      	add	r6, sp, #64	; 0x40
 800109e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80010a0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80010a4:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  safetyHandle = osThreadCreate(osThread(safety), NULL);
 80010a8:	4629      	mov	r1, r5
 80010aa:	a810      	add	r0, sp, #64	; 0x40
 80010ac:	f004 fcca 	bl	8005a44 <osThreadCreate>
 80010b0:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <main+0x368>)
 80010b2:	6018      	str	r0, [r3, #0]
  POWER_CONTROL_Init();
 80010b4:	f007 fe4c 	bl	8008d50 <POWER_CONTROL_Init>
  POWER_CONTROL_START_MONITORING();
 80010b8:	f007 fe66 	bl	8008d88 <POWER_CONTROL_START_MONITORING>
  retransmissionTimerStart(); /*In case Rx is disconnected*/
 80010bc:	f007 fcfa 	bl	8008ab4 <retransmissionTimerStart>
  POWER_CONTROL_TxConnect_Init(); /*In case Tx is disconnected*/
 80010c0:	f007 fe5c 	bl	8008d7c <POWER_CONTROL_TxConnect_Init>
  TxWaitTimerStart(); /*In case Tx is disconnected*/
 80010c4:	f007 fd08 	bl	8008ad8 <TxWaitTimerStart>
  ESCOOTER_init();
 80010c8:	f004 fc76 	bl	80059b8 <ESCOOTER_init>
  ESCOOTER_RunCoreTask();
 80010cc:	f004 fc76 	bl	80059bc <ESCOOTER_RunCoreTask>
  osKernelStart();
 80010d0:	f004 fcb2 	bl	8005a38 <osKernelStart>
  while (1)
 80010d4:	e7fe      	b.n	80010d4 <main+0x35c>
 80010d6:	bf00      	nop
 80010d8:	08008ff0 	.word	0x08008ff0
 80010dc:	20000a04 	.word	0x20000a04
 80010e0:	20000a08 	.word	0x20000a08

080010e4 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM5) {
 80010e4:	4b03      	ldr	r3, [pc, #12]	; (80010f4 <HAL_TIM_PeriodElapsedCallback+0x10>)
 80010e6:	6802      	ldr	r2, [r0, #0]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d000      	beq.n	80010ee <HAL_TIM_PeriodElapsedCallback+0xa>
}
 80010ec:	4770      	bx	lr
    HAL_IncTick();
 80010ee:	f002 bc11 	b.w	8003914 <HAL_IncTick>
 80010f2:	bf00      	nop
 80010f4:	40000c00 	.word	0x40000c00

080010f8 <suspend_SystemTask>:
{
 80010f8:	b508      	push	{r3, lr}
    vTaskSuspend(mediumFrequencyHandle);
 80010fa:	4b05      	ldr	r3, [pc, #20]	; (8001110 <suspend_SystemTask+0x18>)
 80010fc:	6818      	ldr	r0, [r3, #0]
 80010fe:	f005 fc6f 	bl	80069e0 <vTaskSuspend>
    vTaskSuspend(safetyHandle);
 8001102:	4b04      	ldr	r3, [pc, #16]	; (8001114 <suspend_SystemTask+0x1c>)
 8001104:	6818      	ldr	r0, [r3, #0]
}
 8001106:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    vTaskSuspend(safetyHandle);
 800110a:	f005 bc69 	b.w	80069e0 <vTaskSuspend>
 800110e:	bf00      	nop
 8001110:	20000a04 	.word	0x20000a04
 8001114:	20000a08 	.word	0x20000a08

08001118 <Peripheral_DeInit>:
{
 8001118:	b538      	push	{r3, r4, r5, lr}
	if(HAL_UART_DeInit(&huart2) == HAL_OK)
 800111a:	4811      	ldr	r0, [pc, #68]	; (8001160 <Peripheral_DeInit+0x48>)
 800111c:	f004 f9d8 	bl	80054d0 <HAL_UART_DeInit>
 8001120:	b9b8      	cbnz	r0, 8001152 <Peripheral_DeInit+0x3a>
		UART_OFF = 0x01;
 8001122:	4b10      	ldr	r3, [pc, #64]	; (8001164 <Peripheral_DeInit+0x4c>)
 8001124:	4604      	mov	r4, r0
 8001126:	2501      	movs	r5, #1
 8001128:	701d      	strb	r5, [r3, #0]
		MX_GPIO_Init();
 800112a:	f7ff fd49 	bl	8000bc0 <MX_GPIO_Init>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,GPIO_PIN_RESET);
 800112e:	4622      	mov	r2, r4
 8001130:	480d      	ldr	r0, [pc, #52]	; (8001168 <Peripheral_DeInit+0x50>)
 8001132:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001136:	f003 f861 	bl	80041fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,GPIO_PIN_RESET);
 800113a:	480b      	ldr	r0, [pc, #44]	; (8001168 <Peripheral_DeInit+0x50>)
 800113c:	4622      	mov	r2, r4
 800113e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001142:	f003 f85b 	bl	80041fc <HAL_GPIO_WritePin>
		HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI); //I have commented 2024-01-10
 8001146:	4629      	mov	r1, r5
 8001148:	4628      	mov	r0, r5
}
 800114a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI); //I have commented 2024-01-10
 800114e:	f003 b863 	b.w	8004218 <HAL_PWR_EnterSTOPMode>
	else if(HAL_UART_DeInit(&huart2) != HAL_OK)
 8001152:	4803      	ldr	r0, [pc, #12]	; (8001160 <Peripheral_DeInit+0x48>)
 8001154:	f004 f9bc 	bl	80054d0 <HAL_UART_DeInit>
 8001158:	b108      	cbz	r0, 800115e <Peripheral_DeInit+0x46>
 800115a:	b672      	cpsid	i
  while (1)
 800115c:	e7fe      	b.n	800115c <Peripheral_DeInit+0x44>
}
 800115e:	bd38      	pop	{r3, r4, r5, pc}
 8001160:	200009c0 	.word	0x200009c0
 8001164:	200008e0 	.word	0x200008e0
 8001168:	40020400 	.word	0x40020400
 800116c:	00000000 	.word	0x00000000

08001170 <ReBoot_Clock>:
{
 8001170:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001172:	2300      	movs	r3, #0
{
 8001174:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001176:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 800117a:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800117e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001182:	e9cd 3304 	strd	r3, r3, [sp, #16]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001186:	4928      	ldr	r1, [pc, #160]	; (8001228 <ReBoot_Clock+0xb8>)
 8001188:	9300      	str	r3, [sp, #0]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800118a:	9306      	str	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 800118c:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800118e:	4a27      	ldr	r2, [pc, #156]	; (800122c <ReBoot_Clock+0xbc>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001190:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8001194:	6408      	str	r0, [r1, #64]	; 0x40
 8001196:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001198:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 800119c:	9100      	str	r1, [sp, #0]
 800119e:	9900      	ldr	r1, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80011a0:	9301      	str	r3, [sp, #4]
 80011a2:	6813      	ldr	r3, [r2, #0]
 80011a4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80011a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011ac:	6013      	str	r3, [r2, #0]
 80011ae:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011b0:	ed9f 7b17 	vldr	d7, [pc, #92]	; 8001210 <ReBoot_Clock+0xa0>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80011b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011b8:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011ba:	2308      	movs	r3, #8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011bc:	2402      	movs	r4, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80011be:	9801      	ldr	r0, [sp, #4]
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011c0:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011c2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLN = 84;
 80011c6:	2254      	movs	r2, #84	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011c8:	2304      	movs	r3, #4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ca:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011cc:	ed8d 7b08 	vstr	d7, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011d0:	e9cd 410e 	strd	r4, r1, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011d4:	e9cd 2411 	strd	r2, r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011d8:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011da:	f003 f83d 	bl	8004258 <HAL_RCC_OscConfig>
 80011de:	b108      	cbz	r0, 80011e4 <ReBoot_Clock+0x74>
 80011e0:	b672      	cpsid	i
  while (1)
 80011e2:	e7fe      	b.n	80011e2 <ReBoot_Clock+0x72>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011e4:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8001218 <ReBoot_Clock+0xa8>
 80011e8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80011ec:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8001220 <ReBoot_Clock+0xb0>
 80011f0:	4603      	mov	r3, r0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011f2:	4621      	mov	r1, r4
 80011f4:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011f6:	ed8d 7b04 	vstr	d7, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011fa:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011fc:	f003 fa3c 	bl	8004678 <HAL_RCC_ClockConfig>
 8001200:	b108      	cbz	r0, 8001206 <ReBoot_Clock+0x96>
 8001202:	b672      	cpsid	i
  while (1)
 8001204:	e7fe      	b.n	8001204 <ReBoot_Clock+0x94>
  HAL_RCC_EnableCSS();
 8001206:	f003 fa0b 	bl	8004620 <HAL_RCC_EnableCSS>
}
 800120a:	b014      	add	sp, #80	; 0x50
 800120c:	bd10      	pop	{r4, pc}
 800120e:	bf00      	nop
 8001210:	00000001 	.word	0x00000001
 8001214:	00010000 	.word	0x00010000
 8001218:	0000000f 	.word	0x0000000f
 800121c:	00000002 	.word	0x00000002
 8001220:	00000000 	.word	0x00000000
 8001224:	00001000 	.word	0x00001000
 8001228:	40023800 	.word	0x40023800
 800122c:	40007000 	.word	0x40007000

08001230 <MC_StartMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
	return MCI_StartMotor( pMCI[M1] );
 8001230:	4b01      	ldr	r3, [pc, #4]	; (8001238 <MC_StartMotor1+0x8>)
 8001232:	6818      	ldr	r0, [r3, #0]
 8001234:	f000 b864 	b.w	8001300 <MCI_StartMotor>
 8001238:	20000b14 	.word	0x20000b14

0800123c <MC_StopMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
	return MCI_StopMotor( pMCI[M1] );
 800123c:	4b01      	ldr	r3, [pc, #4]	; (8001244 <MC_StopMotor1+0x8>)
 800123e:	6818      	ldr	r0, [r3, #0]
 8001240:	f000 b868 	b.w	8001314 <MCI_StopMotor>
 8001244:	20000b14 	.word	0x20000b14

08001248 <MC_ProgramTorqueRampMotor1>:
  * @param  hDurationms Duration of the ramp expressed in milliseconds. It
  *         is possible to set 0 to perform an instantaneous change in the torque
  *         value.
  */
__weak void MC_ProgramTorqueRampMotor1( int16_t hFinalTorque, uint16_t hDurationms )
{
 8001248:	b410      	push	{r4}
	MCI_ExecTorqueRamp( pMCI[M1], hFinalTorque, hDurationms );
 800124a:	4c04      	ldr	r4, [pc, #16]	; (800125c <MC_ProgramTorqueRampMotor1+0x14>)
{
 800124c:	4603      	mov	r3, r0
 800124e:	460a      	mov	r2, r1
	MCI_ExecTorqueRamp( pMCI[M1], hFinalTorque, hDurationms );
 8001250:	6820      	ldr	r0, [r4, #0]
}
 8001252:	f85d 4b04 	ldr.w	r4, [sp], #4
	MCI_ExecTorqueRamp( pMCI[M1], hFinalTorque, hDurationms );
 8001256:	4619      	mov	r1, r3
 8001258:	f000 b83e 	b.w	80012d8 <MCI_ExecTorqueRamp>
 800125c:	20000b14 	.word	0x20000b14

08001260 <MC_GetMecSpeedAverageMotor1>:
/**
 * @brief Returns the last computed average mechanical rotor speed for Motor 1, expressed in the unit defined by #SPEED_UNIT
 */
__weak int16_t MC_GetMecSpeedAverageMotor1(void)
{
	return MCI_GetAvrgMecSpeedUnit( pMCI[M1] );
 8001260:	4b01      	ldr	r3, [pc, #4]	; (8001268 <MC_GetMecSpeedAverageMotor1+0x8>)
 8001262:	6818      	ldr	r0, [r3, #0]
 8001264:	f000 b8bc 	b.w	80013e0 <MCI_GetAvrgMecSpeedUnit>
 8001268:	20000b14 	.word	0x20000b14

0800126c <MC_GetPhaseCurrentAmplitudeMotor1>:
 * @f]
 *
 */
__weak int16_t MC_GetPhaseCurrentAmplitudeMotor1(void)
{
	return MCI_GetPhaseCurrentAmplitude( pMCI[M1] );
 800126c:	4b01      	ldr	r3, [pc, #4]	; (8001274 <MC_GetPhaseCurrentAmplitudeMotor1+0x8>)
 800126e:	6818      	ldr	r0, [r3, #0]
 8001270:	f000 b91a 	b.w	80014a8 <MCI_GetPhaseCurrentAmplitude>
 8001274:	20000b14 	.word	0x20000b14

08001278 <MC_GetPhaseVoltageAmplitudeMotor1>:
 * @f]
 *
 */
__weak int16_t MC_GetPhaseVoltageAmplitudeMotor1(void)
{
	return MCI_GetPhaseVoltageAmplitude( pMCI[M1] );
 8001278:	4b01      	ldr	r3, [pc, #4]	; (8001280 <MC_GetPhaseVoltageAmplitudeMotor1+0x8>)
 800127a:	6818      	ldr	r0, [r3, #0]
 800127c:	f000 b928 	b.w	80014d0 <MCI_GetPhaseVoltageAmplitude>
 8001280:	20000b14 	.word	0x20000b14

08001284 <MC_GetOccurredFaultsMotor1>:
 * See \link Fault_generation_error_codes Motor Control Faults\endlink for a list of
 * of all possible faults codes.
 */
__weak uint16_t MC_GetOccurredFaultsMotor1(void)
{
	return MCI_GetOccurredFaults( pMCI[M1] );
 8001284:	4b01      	ldr	r3, [pc, #4]	; (800128c <MC_GetOccurredFaultsMotor1+0x8>)
 8001286:	6818      	ldr	r0, [r3, #0]
 8001288:	f000 b890 	b.w	80013ac <MCI_GetOccurredFaults>
 800128c:	20000b14 	.word	0x20000b14

08001290 <MC_GetCurrentFaultsMotor1>:
 * See \link Fault_generation_error_codes Motor Control Faults\endlink for a list of
 * of all possible faults codes.
 */
__weak uint16_t MC_GetCurrentFaultsMotor1(void)
{
	return MCI_GetCurrentFaults( pMCI[M1] );
 8001290:	4b01      	ldr	r3, [pc, #4]	; (8001298 <MC_GetCurrentFaultsMotor1+0x8>)
 8001292:	6818      	ldr	r0, [r3, #0]
 8001294:	f000 b890 	b.w	80013b8 <MCI_GetCurrentFaults>
 8001298:	20000b14 	.word	0x20000b14

0800129c <MC_GetSTMStateMotor1>:
/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak State_t  MC_GetSTMStateMotor1(void)
{
	return MCI_GetSTMState( pMCI[M1] );
 800129c:	4b01      	ldr	r3, [pc, #4]	; (80012a4 <MC_GetSTMStateMotor1+0x8>)
 800129e:	6818      	ldr	r0, [r3, #0]
 80012a0:	f000 b880 	b.w	80013a4 <MCI_GetSTMState>
 80012a4:	20000b14 	.word	0x20000b14

080012a8 <MCI_Init>:
  pHandle->pSTM = pSTM;
  pHandle->pSTC = pSTC;
  pHandle->pFOCVars = pFOCVars;

  /* Buffer related initialization */
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 80012a8:	f04f 0c00 	mov.w	ip, #0
  pHandle->pSTC = pSTC;
 80012ac:	e9c0 1200 	strd	r1, r2, [r0]
  pHandle->pFOCVars = pFOCVars;
 80012b0:	6083      	str	r3, [r0, #8]
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 80012b2:	f880 c00c 	strb.w	ip, [r0, #12]
  pHandle->hFinalSpeed = 0;
 80012b6:	f8c0 c00e 	str.w	ip, [r0, #14]
  pHandle->hFinalTorque = 0;
  pHandle->hDurationms = 0;
 80012ba:	f8a0 c016 	strh.w	ip, [r0, #22]
  pHandle->CommandState = MCI_BUFFER_EMPTY;
 80012be:	f880 c018 	strb.w	ip, [r0, #24]
}
 80012c2:	4770      	bx	lr

080012c4 <MCI_ExecSpeedRamp>:
  *         value.
  * @retval none.
  */
__weak void MCI_ExecSpeedRamp( MCI_Handle_t * pHandle,  int16_t hFinalSpeed, uint16_t hDurationms )
{
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 80012c4:	f04f 0c01 	mov.w	ip, #1
  pHandle->hFinalSpeed = hFinalSpeed;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80012c8:	f240 1301 	movw	r3, #257	; 0x101
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 80012cc:	f880 c00c 	strb.w	ip, [r0, #12]
  pHandle->hFinalSpeed = hFinalSpeed;
 80012d0:	81c1      	strh	r1, [r0, #14]
  pHandle->hDurationms = hDurationms;
 80012d2:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80012d4:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_SPEED_MODE;
}
 80012d6:	4770      	bx	lr

080012d8 <MCI_ExecTorqueRamp>:
  *         value.
  * @retval none.
  */
__weak void MCI_ExecTorqueRamp( MCI_Handle_t * pHandle,  int16_t hFinalTorque, uint16_t hDurationms )
{
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 80012d8:	f04f 0c02 	mov.w	ip, #2
  pHandle->hFinalTorque = hFinalTorque;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80012dc:	2301      	movs	r3, #1
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 80012de:	f880 c00c 	strb.w	ip, [r0, #12]
  pHandle->hFinalTorque = hFinalTorque;
 80012e2:	8201      	strh	r1, [r0, #16]
  pHandle->hDurationms = hDurationms;
 80012e4:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80012e6:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop

080012ec <MCI_SetCurrentReferences>:
  * @param  Iqdref current references on qd reference frame in qd_t
  *         format.
  * @retval none.
  */
__weak void MCI_SetCurrentReferences( MCI_Handle_t * pHandle, qd_t Iqdref )
{
 80012ec:	b082      	sub	sp, #8
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 80012ee:	2203      	movs	r2, #3
  pHandle->Iqdref.q = Iqdref.q;
  pHandle->Iqdref.d = Iqdref.d;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80012f0:	2301      	movs	r3, #1
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 80012f2:	7302      	strb	r2, [r0, #12]
  pHandle->Iqdref.q = Iqdref.q;
 80012f4:	f8c0 1012 	str.w	r1, [r0, #18]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80012f8:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 80012fa:	b002      	add	sp, #8
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop

08001300 <MCI_StartMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StartMotor( MCI_Handle_t * pHandle )
{
 8001300:	b510      	push	{r4, lr}
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8001302:	2103      	movs	r1, #3
{
 8001304:	4604      	mov	r4, r0
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8001306:	6800      	ldr	r0, [r0, #0]
 8001308:	f007 f9f6 	bl	80086f8 <STM_NextState>

  if ( RetVal == true )
 800130c:	b108      	cbz	r0, 8001312 <MCI_StartMotor+0x12>
  {
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800130e:	2301      	movs	r3, #1
 8001310:	7623      	strb	r3, [r4, #24]
  }

  return RetVal;
}
 8001312:	bd10      	pop	{r4, pc}

08001314 <MCI_StopMotor>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StopMotor( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, ANY_STOP );
 8001314:	6800      	ldr	r0, [r0, #0]
 8001316:	2107      	movs	r1, #7
 8001318:	f007 b9ee 	b.w	80086f8 <STM_NextState>

0800131c <MCI_FaultAcknowledged>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_FaultAcknowledged( MCI_Handle_t * pHandle )
{
  return STM_FaultAcknowledged( pHandle->pSTM );
 800131c:	6800      	ldr	r0, [r0, #0]
 800131e:	f007 ba61 	b.w	80087e4 <STM_FaultAcknowledged>
 8001322:	bf00      	nop

08001324 <MCI_EncoderAlign>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_EncoderAlign( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, IDLE_ALIGNMENT );
 8001324:	6800      	ldr	r0, [r0, #0]
 8001326:	2101      	movs	r1, #1
 8001328:	f007 b9e6 	b.w	80086f8 <STM_NextState>

0800132c <MCI_ExecBufferedCommands>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none.
  */
__weak void MCI_ExecBufferedCommands( MCI_Handle_t * pHandle )
{
  if ( pHandle != MC_NULL )
 800132c:	b178      	cbz	r0, 800134e <MCI_ExecBufferedCommands+0x22>
{
 800132e:	b510      	push	{r4, lr}
  {
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8001330:	7e03      	ldrb	r3, [r0, #24]
 8001332:	2b01      	cmp	r3, #1
 8001334:	4604      	mov	r4, r0
 8001336:	d000      	beq.n	800133a <MCI_ExecBufferedCommands+0xe>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
      }
    }
  }
}
 8001338:	bd10      	pop	{r4, pc}
      switch ( pHandle->lastCommand )
 800133a:	7b01      	ldrb	r1, [r0, #12]
 800133c:	2902      	cmp	r1, #2
 800133e:	d020      	beq.n	8001382 <MCI_ExecBufferedCommands+0x56>
 8001340:	2903      	cmp	r1, #3
 8001342:	d005      	beq.n	8001350 <MCI_ExecBufferedCommands+0x24>
 8001344:	2901      	cmp	r1, #1
 8001346:	d00c      	beq.n	8001362 <MCI_ExecBufferedCommands+0x36>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 8001348:	2303      	movs	r3, #3
 800134a:	7623      	strb	r3, [r4, #24]
}
 800134c:	bd10      	pop	{r4, pc}
 800134e:	4770      	bx	lr
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8001350:	6882      	ldr	r2, [r0, #8]
 8001352:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8001356:	f8d0 3012 	ldr.w	r3, [r0, #18]
 800135a:	6113      	str	r3, [r2, #16]
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 800135c:	2302      	movs	r3, #2
 800135e:	7623      	strb	r3, [r4, #24]
}
 8001360:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001362:	6883      	ldr	r3, [r0, #8]
 8001364:	2200      	movs	r2, #0
 8001366:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_SPEED_MODE );
 800136a:	6840      	ldr	r0, [r0, #4]
 800136c:	f007 f900 	bl	8008570 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms );
 8001370:	8ae2      	ldrh	r2, [r4, #22]
 8001372:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001376:	6860      	ldr	r0, [r4, #4]
 8001378:	f007 f8fe 	bl	8008578 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 800137c:	2800      	cmp	r0, #0
 800137e:	d0e3      	beq.n	8001348 <MCI_ExecBufferedCommands+0x1c>
 8001380:	e7ec      	b.n	800135c <MCI_ExecBufferedCommands+0x30>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001382:	6883      	ldr	r3, [r0, #8]
 8001384:	2100      	movs	r1, #0
 8001386:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 800138a:	6840      	ldr	r0, [r0, #4]
 800138c:	f007 f8f0 	bl	8008570 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms );
 8001390:	8ae2      	ldrh	r2, [r4, #22]
 8001392:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 8001396:	6860      	ldr	r0, [r4, #4]
 8001398:	f007 f8ee 	bl	8008578 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 800139c:	2800      	cmp	r0, #0
 800139e:	d0d3      	beq.n	8001348 <MCI_ExecBufferedCommands+0x1c>
 80013a0:	e7dc      	b.n	800135c <MCI_ExecBufferedCommands+0x30>
 80013a2:	bf00      	nop

080013a4 <MCI_GetSTMState>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak State_t  MCI_GetSTMState( MCI_Handle_t * pHandle )
{
  return STM_GetState( pHandle->pSTM );
 80013a4:	6800      	ldr	r0, [r0, #0]
 80013a6:	f007 ba1b 	b.w	80087e0 <STM_GetState>
 80013aa:	bf00      	nop

080013ac <MCI_GetOccurredFaults>:
  *         historically occurred since the state machine has been moved into
  *         FAULT_NOW state.
  * \n\link Fault_generation_error_codes Returned error codes are listed here \endlink
  */
__weak uint16_t MCI_GetOccurredFaults( MCI_Handle_t * pHandle )
{
 80013ac:	b508      	push	{r3, lr}
  return ( uint16_t )( STM_GetFaultState( pHandle->pSTM ) );
 80013ae:	6800      	ldr	r0, [r0, #0]
 80013b0:	f007 fa24 	bl	80087fc <STM_GetFaultState>
}
 80013b4:	b280      	uxth	r0, r0
 80013b6:	bd08      	pop	{r3, pc}

080013b8 <MCI_GetCurrentFaults>:
  * @retval uint16_t  16 bit fields with information about about currently
  *         present faults.
  * \n\link Fault_generation_error_codes Returned error codes are listed here \endlink
  */
__weak uint16_t MCI_GetCurrentFaults( MCI_Handle_t * pHandle )
{
 80013b8:	b508      	push	{r3, lr}
  return ( uint16_t )( STM_GetFaultState( pHandle->pSTM ) >> 16 );
 80013ba:	6800      	ldr	r0, [r0, #0]
 80013bc:	f007 fa1e 	bl	80087fc <STM_GetFaultState>
}
 80013c0:	0c00      	lsrs	r0, r0, #16
 80013c2:	bd08      	pop	{r3, pc}

080013c4 <MCI_GetControlMode>:
  *         these two values: STC_TORQUE_MODE or STC_SPEED_MODE.
  */
__weak STC_Modality_t MCI_GetControlMode( MCI_Handle_t * pHandle )
{
  return pHandle->LastModalitySetByUser;
}
 80013c4:	7e40      	ldrb	r0, [r0, #25]
 80013c6:	4770      	bx	lr

080013c8 <MCI_GetLastRampFinalSpeed>:
__weak int16_t MCI_GetLastRampFinalSpeed( MCI_Handle_t * pHandle )
{
  int16_t hRetVal = 0;

  /* Examine the last buffered commands */
  if ( pHandle->lastCommand == MCI_EXECSPEEDRAMP )
 80013c8:	7b03      	ldrb	r3, [r0, #12]
 80013ca:	2b01      	cmp	r3, #1
  {
    hRetVal = pHandle->hFinalSpeed;
 80013cc:	bf0c      	ite	eq
 80013ce:	f9b0 000e 	ldrsheq.w	r0, [r0, #14]
  int16_t hRetVal = 0;
 80013d2:	2000      	movne	r0, #0
  }
  return hRetVal;
}
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop

080013d8 <MCI_StopRamp>:
  * @brief  Stop the execution of ongoing ramp.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_StopRamp( MCI_Handle_t * pHandle)
{
   STC_StopRamp( pHandle->pSTC );
 80013d8:	6840      	ldr	r0, [r0, #4]
 80013da:	f007 b915 	b.w	8008608 <STC_StopRamp>
 80013de:	bf00      	nop

080013e0 <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit( MCI_Handle_t * pHandle )
{
 80013e0:	b508      	push	{r3, lr}
  SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor( pHandle->pSTC );
 80013e2:	6840      	ldr	r0, [r0, #4]
 80013e4:	f007 f8aa 	bl	800853c <STC_GetSpeedSensor>

  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
}
 80013e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
 80013ec:	f007 b848 	b.w	8008480 <SPD_GetAvrgMecSpeedUnit>

080013f0 <MCI_GetMecSpeedRefUnit>:
  * @param  pHandle Pointer on the component instance to work on.
  *
  */
__weak int16_t MCI_GetMecSpeedRefUnit( MCI_Handle_t * pHandle )
{
  return ( STC_GetMecSpeedRefUnit( pHandle->pSTC ) );
 80013f0:	6840      	ldr	r0, [r0, #4]
 80013f2:	f007 b8ad 	b.w	8008550 <STC_GetMecSpeedRefUnit>
 80013f6:	bf00      	nop

080013f8 <MCI_GetIab>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval ab_t Stator current Iab
  */
__weak ab_t MCI_GetIab( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iab );
 80013f8:	6882      	ldr	r2, [r0, #8]
 80013fa:	6810      	ldr	r0, [r2, #0]
 80013fc:	2300      	movs	r3, #0
 80013fe:	b282      	uxth	r2, r0
 8001400:	f362 030f 	bfi	r3, r2, #0, #16
 8001404:	0c00      	lsrs	r0, r0, #16
 8001406:	f360 431f 	bfi	r3, r0, #16, #16
{
 800140a:	b082      	sub	sp, #8
}
 800140c:	4618      	mov	r0, r3
 800140e:	b002      	add	sp, #8
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop

08001414 <MCI_GetIalphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Ialphabeta
  */
__weak alphabeta_t MCI_GetIalphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Ialphabeta );
 8001414:	6882      	ldr	r2, [r0, #8]
 8001416:	6850      	ldr	r0, [r2, #4]
 8001418:	2300      	movs	r3, #0
 800141a:	b282      	uxth	r2, r0
 800141c:	f362 030f 	bfi	r3, r2, #0, #16
 8001420:	0c00      	lsrs	r0, r0, #16
 8001422:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001426:	b082      	sub	sp, #8
}
 8001428:	4618      	mov	r0, r3
 800142a:	b002      	add	sp, #8
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop

08001430 <MCI_GetIqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqd
  */
__weak qd_t MCI_GetIqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqd );
 8001430:	6882      	ldr	r2, [r0, #8]
 8001432:	68d0      	ldr	r0, [r2, #12]
 8001434:	2300      	movs	r3, #0
 8001436:	b282      	uxth	r2, r0
 8001438:	f362 030f 	bfi	r3, r2, #0, #16
 800143c:	0c00      	lsrs	r0, r0, #16
 800143e:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001442:	b082      	sub	sp, #8
}
 8001444:	4618      	mov	r0, r3
 8001446:	b002      	add	sp, #8
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop

0800144c <MCI_GetIqdref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqdref
  */
__weak qd_t MCI_GetIqdref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqdref );
 800144c:	6882      	ldr	r2, [r0, #8]
 800144e:	6910      	ldr	r0, [r2, #16]
 8001450:	2300      	movs	r3, #0
 8001452:	b282      	uxth	r2, r0
 8001454:	f362 030f 	bfi	r3, r2, #0, #16
 8001458:	0c00      	lsrs	r0, r0, #16
 800145a:	f360 431f 	bfi	r3, r0, #16, #16
{
 800145e:	b082      	sub	sp, #8
}
 8001460:	4618      	mov	r0, r3
 8001462:	b002      	add	sp, #8
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop

08001468 <MCI_GetVqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Vqd
  */
__weak qd_t MCI_GetVqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Vqd );
 8001468:	6882      	ldr	r2, [r0, #8]
 800146a:	f8d2 0016 	ldr.w	r0, [r2, #22]
 800146e:	2300      	movs	r3, #0
 8001470:	b282      	uxth	r2, r0
 8001472:	f362 030f 	bfi	r3, r2, #0, #16
 8001476:	0c00      	lsrs	r0, r0, #16
 8001478:	f360 431f 	bfi	r3, r0, #16, #16
{
 800147c:	b082      	sub	sp, #8
}
 800147e:	4618      	mov	r0, r3
 8001480:	b002      	add	sp, #8
 8001482:	4770      	bx	lr

08001484 <MCI_GetValphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Valphabeta
  */
__weak alphabeta_t MCI_GetValphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Valphabeta );
 8001484:	6882      	ldr	r2, [r0, #8]
 8001486:	f8d2 001a 	ldr.w	r0, [r2, #26]
 800148a:	2300      	movs	r3, #0
 800148c:	b282      	uxth	r2, r0
 800148e:	f362 030f 	bfi	r3, r2, #0, #16
 8001492:	0c00      	lsrs	r0, r0, #16
 8001494:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001498:	b082      	sub	sp, #8
}
 800149a:	4618      	mov	r0, r3
 800149c:	b002      	add	sp, #8
 800149e:	4770      	bx	lr

080014a0 <MCI_GetTeref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t Teref
  */
__weak int16_t MCI_GetTeref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->hTeref );
 80014a0:	6883      	ldr	r3, [r0, #8]
}
 80014a2:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 80014a6:	4770      	bx	lr

080014a8 <MCI_GetPhaseCurrentAmplitude>:
__weak int16_t MCI_GetPhaseCurrentAmplitude( MCI_Handle_t * pHandle )
{
  alphabeta_t Local_Curr;
  int32_t wAux1, wAux2;

  Local_Curr = pHandle->pFOCVars->Ialphabeta;
 80014a8:	6882      	ldr	r2, [r0, #8]
{
 80014aa:	b508      	push	{r3, lr}
  Local_Curr = pHandle->pFOCVars->Ialphabeta;
 80014ac:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 80014b0:	f9b2 0004 	ldrsh.w	r0, [r2, #4]
  wAux1 = ( int32_t )( Local_Curr.alpha ) * Local_Curr.alpha;
  wAux2 = ( int32_t )( Local_Curr.beta ) * Local_Curr.beta;
 80014b4:	fb03 f303 	mul.w	r3, r3, r3

  wAux1 += wAux2;
  wAux1 = MCM_Sqrt( wAux1 );
 80014b8:	fb00 3000 	mla	r0, r0, r0, r3
 80014bc:	f000 f90a 	bl	80016d4 <MCM_Sqrt>
  if ( wAux1 > INT16_MAX )
  {
    wAux1 = ( int32_t ) INT16_MAX;
  }

  return ( ( int16_t )wAux1 );
 80014c0:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80014c4:	4298      	cmp	r0, r3
 80014c6:	bfa8      	it	ge
 80014c8:	4618      	movge	r0, r3
}
 80014ca:	b200      	sxth	r0, r0
 80014cc:	bd08      	pop	{r3, pc}
 80014ce:	bf00      	nop

080014d0 <MCI_GetPhaseVoltageAmplitude>:
__weak int16_t MCI_GetPhaseVoltageAmplitude( MCI_Handle_t * pHandle )
{
  alphabeta_t Local_Voltage;
  int32_t wAux1, wAux2;

  Local_Voltage = pHandle->pFOCVars->Valphabeta;
 80014d0:	6882      	ldr	r2, [r0, #8]
{
 80014d2:	b508      	push	{r3, lr}
  Local_Voltage = pHandle->pFOCVars->Valphabeta;
 80014d4:	f9b2 301c 	ldrsh.w	r3, [r2, #28]
 80014d8:	f9b2 001a 	ldrsh.w	r0, [r2, #26]
  wAux1 = ( int32_t )( Local_Voltage.alpha ) * Local_Voltage.alpha;
  wAux2 = ( int32_t )( Local_Voltage.beta ) * Local_Voltage.beta;
 80014dc:	fb03 f303 	mul.w	r3, r3, r3

  wAux1 += wAux2;
  wAux1 = MCM_Sqrt( wAux1 );
 80014e0:	fb00 3000 	mla	r0, r0, r0, r3
 80014e4:	f000 f8f6 	bl	80016d4 <MCM_Sqrt>
  if ( wAux1 > INT16_MAX )
  {
    wAux1 = ( int32_t ) INT16_MAX;
  }

  return ( ( int16_t ) wAux1 );
 80014e8:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80014ec:	4298      	cmp	r0, r3
 80014ee:	bfa8      	it	ge
 80014f0:	4618      	movge	r0, r3
}
 80014f2:	b200      	sxth	r0, r0
 80014f4:	bd08      	pop	{r3, pc}
 80014f6:	bf00      	nop

080014f8 <MCI_SetIdref>:
  * @param  int16_t New target Id value
  * @retval none
  */
__weak void MCI_SetIdref( MCI_Handle_t * pHandle, int16_t hNewIdref )
{
  pHandle->pFOCVars->Iqdref.d = hNewIdref;
 80014f8:	2300      	movs	r3, #0
 80014fa:	6882      	ldr	r2, [r0, #8]
 80014fc:	f361 030f 	bfi	r3, r1, #0, #16
 8001500:	f361 431f 	bfi	r3, r1, #16, #16
 8001504:	f8c2 3012 	str.w	r3, [r2, #18]
  pHandle->pFOCVars->UserIdref = hNewIdref;
}
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop

0800150c <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
__weak void MCI_Clear_Iqdref( MCI_Handle_t * pHandle )
{
 800150c:	b510      	push	{r4, lr}
  pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref( pHandle->pSTC );
 800150e:	e9d0 0401 	ldrd	r0, r4, [r0, #4]
 8001512:	f007 f8b9 	bl	8008688 <STC_GetDefaultIqdref>
 8001516:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800151a:	8220      	strh	r0, [r4, #16]
 800151c:	8263      	strh	r3, [r4, #18]
}
 800151e:	bd10      	pop	{r4, pc}

08001520 <MCM_Clarke>:
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;

  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8001520:	f644 11e6 	movw	r1, #18918	; 0x49e6
 8001524:	b203      	sxth	r3, r0
  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;
 8001526:	fb13 f201 	smulbb	r2, r3, r1
{
 800152a:	f3c0 400f 	ubfx	r0, r0, #16, #16
  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 800152e:	fb10 f101 	smulbb	r1, r0, r1
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */

  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
 8001532:	4250      	negs	r0, r2
 8001534:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
                 ( b_divSQRT3_tmp ) ) >> 15;
#endif

  /* Check saturation of Ibeta */
  if ( wbeta_tmp > INT16_MAX )
 8001538:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 800153c:	b084      	sub	sp, #16
  if ( wbeta_tmp > INT16_MAX )
 800153e:	da05      	bge.n	800154c <MCM_Clarke+0x2c>
 8001540:	13c1      	asrs	r1, r0, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if ( wbeta_tmp < ( -32768 ) )
 8001542:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
 8001546:	da0c      	bge.n	8001562 <MCM_Clarke+0x42>
 8001548:	4a09      	ldr	r2, [pc, #36]	; (8001570 <MCM_Clarke+0x50>)
 800154a:	e001      	b.n	8001550 <MCM_Clarke+0x30>
 800154c:	f647 72ff 	movw	r2, #32767	; 0x7fff
  if ( Output.beta == ( int16_t )( -32768 ) )
  {
    Output.beta = -32767;
  }

  return ( Output );
 8001550:	b29b      	uxth	r3, r3
 8001552:	2000      	movs	r0, #0
 8001554:	f363 000f 	bfi	r0, r3, #0, #16
 8001558:	b293      	uxth	r3, r2
 800155a:	f363 401f 	bfi	r0, r3, #16, #16
}
 800155e:	b004      	add	sp, #16
 8001560:	4770      	bx	lr
    hbeta_tmp = ( int16_t )( wbeta_tmp );
 8001562:	4803      	ldr	r0, [pc, #12]	; (8001570 <MCM_Clarke+0x50>)
 8001564:	b20a      	sxth	r2, r1
 8001566:	4282      	cmp	r2, r0
 8001568:	bfb8      	it	lt
 800156a:	4602      	movlt	r2, r0
 800156c:	e7f0      	b.n	8001550 <MCM_Clarke+0x30>
 800156e:	bf00      	nop
 8001570:	ffff8001 	.word	0xffff8001

08001574 <MCM_Trig_Functions>:
  uint16_t uhindex;

  Trig_Components Local_Components;

  /* 10 bit index computation  */
  shindex = ( ( int32_t )32768 + ( int32_t )hAngle );
 8001574:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
  uhindex = ( uint16_t )shindex;
  uhindex /= ( uint16_t )64;
 8001578:	f3c0 1089 	ubfx	r0, r0, #6, #10

  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 800157c:	f400 7140 	and.w	r1, r0, #768	; 0x300
 8001580:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
{
 8001584:	b082      	sub	sp, #8
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8001586:	d028      	beq.n	80015da <MCM_Trig_Functions+0x66>
 8001588:	f04f 0300 	mov.w	r3, #0
 800158c:	461a      	mov	r2, r3
 800158e:	d816      	bhi.n	80015be <MCM_Trig_Functions+0x4a>
 8001590:	b361      	cbz	r1, 80015ec <MCM_Trig_Functions+0x78>
 8001592:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8001596:	d109      	bne.n	80015ac <MCM_Trig_Functions+0x38>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
      break;

    case U270_360:
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001598:	b2c0      	uxtb	r0, r0
 800159a:	43c2      	mvns	r2, r0
 800159c:	491a      	ldr	r1, [pc, #104]	; (8001608 <MCM_Trig_Functions+0x94>)
 800159e:	b2d2      	uxtb	r2, r2
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 80015a0:	f931 3010 	ldrsh.w	r3, [r1, r0, lsl #1]
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80015a4:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80015a8:	4252      	negs	r2, r2
 80015aa:	b212      	sxth	r2, r2
      break;
    default:
      break;
  }
  return ( Local_Components );
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	2000      	movs	r0, #0
 80015b0:	f363 000f 	bfi	r0, r3, #0, #16
 80015b4:	b292      	uxth	r2, r2
 80015b6:	f362 401f 	bfi	r0, r2, #16, #16
}
 80015ba:	b002      	add	sp, #8
 80015bc:	4770      	bx	lr
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 80015be:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 80015c2:	d1f3      	bne.n	80015ac <MCM_Trig_Functions+0x38>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80015c4:	4910      	ldr	r1, [pc, #64]	; (8001608 <MCM_Trig_Functions+0x94>)
 80015c6:	b2c0      	uxtb	r0, r0
 80015c8:	43c2      	mvns	r2, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80015ca:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80015ce:	b2d2      	uxtb	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80015d0:	425b      	negs	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80015d2:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80015d6:	b21b      	sxth	r3, r3
      break;
 80015d8:	e7e8      	b.n	80015ac <MCM_Trig_Functions+0x38>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 80015da:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80015dc:	43c3      	mvns	r3, r0
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 80015de:	490a      	ldr	r1, [pc, #40]	; (8001608 <MCM_Trig_Functions+0x94>)
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80015e0:	b2db      	uxtb	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 80015e2:	f931 2010 	ldrsh.w	r2, [r1, r0, lsl #1]
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80015e6:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
      break;
 80015ea:	e7df      	b.n	80015ac <MCM_Trig_Functions+0x38>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80015ec:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80015ee:	43c3      	mvns	r3, r0
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80015f0:	4905      	ldr	r1, [pc, #20]	; (8001608 <MCM_Trig_Functions+0x94>)
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80015f2:	b2db      	uxtb	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80015f4:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80015f8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80015fc:	4252      	negs	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80015fe:	425b      	negs	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001600:	b212      	sxth	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001602:	b21b      	sxth	r3, r3
      break;
 8001604:	e7d2      	b.n	80015ac <MCM_Trig_Functions+0x38>
 8001606:	bf00      	nop
 8001608:	08009094 	.word	0x08009094

0800160c <MCM_Park>:
{
 800160c:	b530      	push	{r4, r5, lr}
 800160e:	b085      	sub	sp, #20
 8001610:	4603      	mov	r3, r0
 8001612:	4605      	mov	r5, r0
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8001614:	4608      	mov	r0, r1
 8001616:	141c      	asrs	r4, r3, #16
{
 8001618:	9301      	str	r3, [sp, #4]
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 800161a:	f7ff ffab 	bl	8001574 <MCM_Trig_Functions>
 800161e:	b22d      	sxth	r5, r5
 8001620:	fa0f fc80 	sxth.w	ip, r0
 8001624:	1403      	asrs	r3, r0, #16
  q_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hCos;
 8001626:	fb05 f10c 	mul.w	r1, r5, ip
  wqd_tmp = ( q_tmp_1 - q_tmp_2 ) >> 15;
 800162a:	fb04 1113 	mls	r1, r4, r3, r1
  if ( wqd_tmp > INT16_MAX )
 800162e:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8001632:	da05      	bge.n	8001640 <MCM_Park+0x34>
 8001634:	13ca      	asrs	r2, r1, #15
  else if ( wqd_tmp < ( -32768 ) )
 8001636:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 800163a:	da22      	bge.n	8001682 <MCM_Park+0x76>
 800163c:	4914      	ldr	r1, [pc, #80]	; (8001690 <MCM_Park+0x84>)
 800163e:	e001      	b.n	8001644 <MCM_Park+0x38>
 8001640:	f647 71ff 	movw	r1, #32767	; 0x7fff
  d_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hCos;
 8001644:	fb0c f404 	mul.w	r4, ip, r4
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8001648:	fb05 4403 	mla	r4, r5, r3, r4
  if ( wqd_tmp > INT16_MAX )
 800164c:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8001650:	ea4f 32e4 	mov.w	r2, r4, asr #15
  if ( wqd_tmp > INT16_MAX )
 8001654:	da04      	bge.n	8001660 <MCM_Park+0x54>
  else if ( wqd_tmp < ( -32768 ) )
 8001656:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 800165a:	da0c      	bge.n	8001676 <MCM_Park+0x6a>
 800165c:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <MCM_Park+0x84>)
 800165e:	e001      	b.n	8001664 <MCM_Park+0x58>
 8001660:	f647 73ff 	movw	r3, #32767	; 0x7fff
  return ( Output );
 8001664:	b28a      	uxth	r2, r1
 8001666:	2000      	movs	r0, #0
 8001668:	f362 000f 	bfi	r0, r2, #0, #16
 800166c:	b29b      	uxth	r3, r3
 800166e:	f363 401f 	bfi	r0, r3, #16, #16
}
 8001672:	b005      	add	sp, #20
 8001674:	bd30      	pop	{r4, r5, pc}
    hqd_tmp = ( int16_t )( wqd_tmp );
 8001676:	4806      	ldr	r0, [pc, #24]	; (8001690 <MCM_Park+0x84>)
 8001678:	b213      	sxth	r3, r2
 800167a:	4283      	cmp	r3, r0
 800167c:	bfb8      	it	lt
 800167e:	4603      	movlt	r3, r0
 8001680:	e7f0      	b.n	8001664 <MCM_Park+0x58>
    hqd_tmp = ( int16_t )( wqd_tmp );
 8001682:	4903      	ldr	r1, [pc, #12]	; (8001690 <MCM_Park+0x84>)
 8001684:	b212      	sxth	r2, r2
 8001686:	4291      	cmp	r1, r2
 8001688:	bfb8      	it	lt
 800168a:	4611      	movlt	r1, r2
 800168c:	e7da      	b.n	8001644 <MCM_Park+0x38>
 800168e:	bf00      	nop
 8001690:	ffff8001 	.word	0xffff8001

08001694 <MCM_Rev_Park>:
{
 8001694:	b530      	push	{r4, r5, lr}
 8001696:	b085      	sub	sp, #20
 8001698:	4604      	mov	r4, r0
 800169a:	4605      	mov	r5, r0
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 800169c:	4608      	mov	r0, r1
{
 800169e:	9401      	str	r4, [sp, #4]
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 80016a0:	f7ff ff68 	bl	8001574 <MCM_Trig_Functions>
 80016a4:	1424      	asrs	r4, r4, #16
 80016a6:	1402      	asrs	r2, r0, #16
 80016a8:	b22d      	sxth	r5, r5
 80016aa:	b200      	sxth	r0, r0
  alpha_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hSin;
 80016ac:	fb04 f302 	mul.w	r3, r4, r2
  Output.alpha = ( int16_t )( ( ( alpha_tmp1 ) + ( alpha_tmp2 ) ) >> 15 );
 80016b0:	fb05 3300 	mla	r3, r5, r0, r3
  beta_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hCos;
 80016b4:	fb00 f404 	mul.w	r4, r0, r4
  Output.beta = ( int16_t )( ( beta_tmp2 - beta_tmp1 ) >> 15 );
 80016b8:	fb05 4412 	mls	r4, r5, r2, r4
  return ( Output );
 80016bc:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 80016c0:	2000      	movs	r0, #0
 80016c2:	f363 000f 	bfi	r0, r3, #0, #16
 80016c6:	f3c4 34cf 	ubfx	r4, r4, #15, #16
 80016ca:	f364 401f 	bfi	r0, r4, #16, #16
}
 80016ce:	b005      	add	sp, #20
 80016d0:	bd30      	pop	{r4, r5, pc}
 80016d2:	bf00      	nop

080016d4 <MCM_Sqrt>:
  */
__weak int32_t MCM_Sqrt( int32_t wInput )
{
  int32_t wtemprootnew;

  if ( wInput > 0 )
 80016d4:	1e03      	subs	r3, r0, #0
 80016d6:	dd32      	ble.n	800173e <MCM_Sqrt+0x6a>
    {
      wtemproot = ( int32_t )128;
    }
    else
    {
      wtemproot = ( int32_t )8192;
 80016d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80016dc:	bfd4      	ite	le
 80016de:	2080      	movle	r0, #128	; 0x80
 80016e0:	f44f 5000 	movgt.w	r0, #8192	; 0x2000
    }

    do
    {
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 80016e4:	fb93 f2f0 	sdiv	r2, r3, r0
 80016e8:	4402      	add	r2, r0
      if ( wtemprootnew == wtemproot )
 80016ea:	ebb0 0f62 	cmp.w	r0, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 80016ee:	ea4f 0162 	mov.w	r1, r2, asr #1
      if ( wtemprootnew == wtemproot )
 80016f2:	d025      	beq.n	8001740 <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 80016f4:	fb93 f2f1 	sdiv	r2, r3, r1
 80016f8:	440a      	add	r2, r1
      if ( wtemprootnew == wtemproot )
 80016fa:	ebb1 0f62 	cmp.w	r1, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 80016fe:	ea4f 0062 	mov.w	r0, r2, asr #1
      if ( wtemprootnew == wtemproot )
 8001702:	d01d      	beq.n	8001740 <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8001704:	fb93 f2f0 	sdiv	r2, r3, r0
 8001708:	4402      	add	r2, r0
      if ( wtemprootnew == wtemproot )
 800170a:	ebb0 0f62 	cmp.w	r0, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 800170e:	ea4f 0162 	mov.w	r1, r2, asr #1
      if ( wtemprootnew == wtemproot )
 8001712:	d015      	beq.n	8001740 <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8001714:	fb93 f2f1 	sdiv	r2, r3, r1
 8001718:	440a      	add	r2, r1
      if ( wtemprootnew == wtemproot )
 800171a:	ebb1 0f62 	cmp.w	r1, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 800171e:	ea4f 0062 	mov.w	r0, r2, asr #1
      if ( wtemprootnew == wtemproot )
 8001722:	d00d      	beq.n	8001740 <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8001724:	fb93 f2f0 	sdiv	r2, r3, r0
 8001728:	4402      	add	r2, r0
      if ( wtemprootnew == wtemproot )
 800172a:	ebb0 0f62 	cmp.w	r0, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 800172e:	ea4f 0162 	mov.w	r1, r2, asr #1
      if ( wtemprootnew == wtemproot )
 8001732:	d005      	beq.n	8001740 <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8001734:	fb93 f0f1 	sdiv	r0, r3, r1
 8001738:	4408      	add	r0, r1
 800173a:	1040      	asrs	r0, r0, #1
      if ( wtemprootnew == wtemproot )
 800173c:	4770      	bx	lr
    while ( biter < 6u );

  }
  else
  {
    wtemprootnew = ( int32_t )0;
 800173e:	2000      	movs	r0, #0
  }

  return ( wtemprootnew );
}
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop

08001744 <FOC_Clear>:
  ab_t NULL_ab = {(int16_t)0, (int16_t)0};
  qd_t NULL_qd = {(int16_t)0, (int16_t)0};
  alphabeta_t NULL_alphabeta = {(int16_t)0, (int16_t)0};

  FOCVars[bMotor].Iab = NULL_ab;
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 8001744:	2226      	movs	r2, #38	; 0x26
{
 8001746:	b538      	push	{r3, r4, r5, lr}
 8001748:	fb00 f202 	mul.w	r2, r0, r2
 800174c:	4b15      	ldr	r3, [pc, #84]	; (80017a4 <FOC_Clear+0x60>)
  FOCVars[bMotor].Iab = NULL_ab;
 800174e:	2400      	movs	r4, #0
 8001750:	509c      	str	r4, [r3, r2]
{
 8001752:	4605      	mov	r5, r0
 8001754:	f102 0108 	add.w	r1, r2, #8
 8001758:	1898      	adds	r0, r3, r2
 800175a:	3210      	adds	r2, #16
 800175c:	4419      	add	r1, r3
 800175e:	4413      	add	r3, r2
  FOCVars[bMotor].hTeref = (int16_t)0;
  FOCVars[bMotor].Vqd = NULL_qd;
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8001760:	4a11      	ldr	r2, [pc, #68]	; (80017a8 <FOC_Clear+0x64>)
  FOCVars[bMotor].Iab = NULL_ab;
 8001762:	6044      	str	r4, [r0, #4]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8001764:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
  FOCVars[bMotor].Iqd = NULL_qd;
 8001768:	604c      	str	r4, [r1, #4]
 800176a:	608c      	str	r4, [r1, #8]
  FOCVars[bMotor].Vqd = NULL_qd;
 800176c:	f8c3 4006 	str.w	r4, [r3, #6]
 8001770:	f8c3 400a 	str.w	r4, [r3, #10]
 8001774:	f8c3 400e 	str.w	r4, [r3, #14]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8001778:	4621      	mov	r1, r4
 800177a:	f005 feaf 	bl	80074dc <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], (int32_t)0);
 800177e:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <FOC_Clear+0x68>)
 8001780:	4621      	mov	r1, r4
 8001782:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8001786:	f005 fea9 	bl	80074dc <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 800178a:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <FOC_Clear+0x6c>)
 800178c:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8001790:	f006 fed6 	bl	8008540 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001794:	4b07      	ldr	r3, [pc, #28]	; (80017b4 <FOC_Clear+0x70>)
 8001796:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 800179a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800179e:	f006 b8b7 	b.w	8007910 <PWMC_SwitchOffPWM>
 80017a2:	bf00      	nop
 80017a4:	20000a38 	.word	0x20000a38
 80017a8:	20000af4 	.word	0x20000af4
 80017ac:	20000af0 	.word	0x20000af0
 80017b0:	20000b00 	.word	0x20000b00
 80017b4:	20000b08 	.word	0x20000b08

080017b8 <MCboot>:
{
 80017b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  STM_Init(&STM[M1]);
 80017bc:	4e5b      	ldr	r6, [pc, #364]	; (800192c <MCboot+0x174>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 80017be:	4d5c      	ldr	r5, [pc, #368]	; (8001930 <MCboot+0x178>)
  PID_HandleInit(&PIDSpeedHandle_M1);
 80017c0:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 8001978 <MCboot+0x1c0>
  HALL_Init (&HALL_M1);
 80017c4:	4f5b      	ldr	r7, [pc, #364]	; (8001934 <MCboot+0x17c>)
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 80017c6:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 800197c <MCboot+0x1c4>
  PID_HandleInit(&PIDIqHandle_M1);
 80017ca:	f8df b1b4 	ldr.w	fp, [pc, #436]	; 8001980 <MCboot+0x1c8>
  PID_HandleInit(&PIDIdHandle_M1);
 80017ce:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 8001984 <MCboot+0x1cc>
{
 80017d2:	b087      	sub	sp, #28
 80017d4:	4603      	mov	r3, r0
  STM_Init(&STM[M1]);
 80017d6:	4630      	mov	r0, r6
{
 80017d8:	e9cd 3101 	strd	r3, r1, [sp, #4]
  STM_Init(&STM[M1]);
 80017dc:	f006 ff6a 	bl	80086b4 <STM_Init>
  bMCBootCompleted = 0;
 80017e0:	4a55      	ldr	r2, [pc, #340]	; (8001938 <MCboot+0x180>)
  pCLM[M1] = &CircleLimitationM1;
 80017e2:	4b56      	ldr	r3, [pc, #344]	; (800193c <MCboot+0x184>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 80017e4:	4856      	ldr	r0, [pc, #344]	; (8001940 <MCboot+0x188>)
 80017e6:	6028      	str	r0, [r5, #0]
  bMCBootCompleted = 0;
 80017e8:	2400      	movs	r4, #0
 80017ea:	7014      	strb	r4, [r2, #0]
  pCLM[M1] = &CircleLimitationM1;
 80017ec:	4a55      	ldr	r2, [pc, #340]	; (8001944 <MCboot+0x18c>)
 80017ee:	601a      	str	r2, [r3, #0]
  R3_1_Init(&PWM_Handle_M1);
 80017f0:	f006 fb14 	bl	8007e1c <R3_1_Init>
  pSTC[M1] = &SpeednTorqCtrlM1;
 80017f4:	4d54      	ldr	r5, [pc, #336]	; (8001948 <MCboot+0x190>)
  startTimers();
 80017f6:	f005 fef9 	bl	80075ec <startTimers>
  PID_HandleInit(&PIDSpeedHandle_M1);
 80017fa:	4640      	mov	r0, r8
 80017fc:	f005 fe5a 	bl	80074b4 <PID_HandleInit>
  pSTC[M1] = &SpeednTorqCtrlM1;
 8001800:	4b52      	ldr	r3, [pc, #328]	; (800194c <MCboot+0x194>)
 8001802:	602b      	str	r3, [r5, #0]
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8001804:	f8c9 8000 	str.w	r8, [r9]
  HALL_Init (&HALL_M1);
 8001808:	4638      	mov	r0, r7
 800180a:	f005 f9cd 	bl	8006ba8 <HALL_Init>
  STC_Init(pSTC[M1],pPIDSpeed[M1], &HALL_M1._Super);
 800180e:	463a      	mov	r2, r7
 8001810:	f8d9 1000 	ldr.w	r1, [r9]
 8001814:	6828      	ldr	r0, [r5, #0]
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8001816:	f8df 8170 	ldr.w	r8, [pc, #368]	; 8001988 <MCboot+0x1d0>
  STC_Init(pSTC[M1],pPIDSpeed[M1], &HALL_M1._Super);
 800181a:	f006 fe79 	bl	8008510 <STC_Init>
  PID_HandleInit(&PIDIqHandle_M1);
 800181e:	4658      	mov	r0, fp
 8001820:	f005 fe48 	bl	80074b4 <PID_HandleInit>
  PID_HandleInit(&PIDIdHandle_M1);
 8001824:	4650      	mov	r0, sl
 8001826:	f005 fe45 	bl	80074b4 <PID_HandleInit>
  pPIDIq[M1] = &PIDIqHandle_M1;
 800182a:	4949      	ldr	r1, [pc, #292]	; (8001950 <MCboot+0x198>)
  pPIDId[M1] = &PIDIdHandle_M1;
 800182c:	4b49      	ldr	r3, [pc, #292]	; (8001954 <MCboot+0x19c>)
  pPIDIq[M1] = &PIDIqHandle_M1;
 800182e:	f8c1 b000 	str.w	fp, [r1]
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8001832:	4849      	ldr	r0, [pc, #292]	; (8001958 <MCboot+0x1a0>)
  pPIDId[M1] = &PIDIdHandle_M1;
 8001834:	f8c3 a000 	str.w	sl, [r3]
  NTC_Init(&TempSensorParamsM1);
 8001838:	f8df b150 	ldr.w	fp, [pc, #336]	; 800198c <MCboot+0x1d4>
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 800183c:	f8c8 0000 	str.w	r0, [r8]
  RVBS_Init(pBusSensorM1);
 8001840:	f006 fd98 	bl	8008374 <RVBS_Init>
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8001844:	4a45      	ldr	r2, [pc, #276]	; (800195c <MCboot+0x1a4>)
 8001846:	4b46      	ldr	r3, [pc, #280]	; (8001960 <MCboot+0x1a8>)
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 8001848:	f8df a144 	ldr.w	sl, [pc, #324]	; 8001990 <MCboot+0x1d8>
  pMPM[M1] = &PQD_MotorPowMeasM1;
 800184c:	6013      	str	r3, [r2, #0]
  NTC_Init(&TempSensorParamsM1);
 800184e:	4658      	mov	r0, fp
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 8001850:	f8d8 2000 	ldr.w	r2, [r8]
 8001854:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 8001858:	f8c3 a10c 	str.w	sl, [r3, #268]	; 0x10c
  NTC_Init(&TempSensorParamsM1);
 800185c:	f005 fde6 	bl	800742c <NTC_Init>
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 8001860:	4940      	ldr	r1, [pc, #256]	; (8001964 <MCboot+0x1ac>)
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8001862:	4b41      	ldr	r3, [pc, #260]	; (8001968 <MCboot+0x1b0>)
 8001864:	4841      	ldr	r0, [pc, #260]	; (800196c <MCboot+0x1b4>)
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 8001866:	f8c1 b000 	str.w	fp, [r1]
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 800186a:	6018      	str	r0, [r3, #0]
  REMNG_Init(pREMNG[M1]);
 800186c:	f006 fdd0 	bl	8008410 <REMNG_Init>
  FOCVars[M1].bDriveInput = EXTERNAL;
 8001870:	f04f 0b01 	mov.w	fp, #1
  FOC_Clear(M1);
 8001874:	4620      	mov	r0, r4
 8001876:	f7ff ff65 	bl	8001744 <FOC_Clear>
  FOCVars[M1].bDriveInput = EXTERNAL;
 800187a:	f88a b024 	strb.w	fp, [sl, #36]	; 0x24
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 800187e:	6828      	ldr	r0, [r5, #0]
 8001880:	f006 ff02 	bl	8008688 <STC_GetDefaultIqdref>
 8001884:	f8ca 0010 	str.w	r0, [sl, #16]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8001888:	6828      	ldr	r0, [r5, #0]
 800188a:	f006 fefd 	bl	8008688 <STC_GetDefaultIqdref>
 800188e:	f3c0 400f 	ubfx	r0, r0, #16, #16
 8001892:	f8aa 0014 	strh.w	r0, [sl, #20]
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8001896:	4653      	mov	r3, sl
  oMCInterface[M1] = & Mci[M1];
 8001898:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 8001994 <MCboot+0x1dc>
 800189c:	4834      	ldr	r0, [pc, #208]	; (8001970 <MCboot+0x1b8>)
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 800189e:	682a      	ldr	r2, [r5, #0]
  oMCInterface[M1] = & Mci[M1];
 80018a0:	f8ca 0000 	str.w	r0, [sl]
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 80018a4:	4631      	mov	r1, r6
 80018a6:	f7ff fcff 	bl	80012a8 <MCI_Init>
  MCI_ExecSpeedRamp(oMCInterface[M1],
 80018aa:	f8da 3000 	ldr.w	r3, [sl]
 80018ae:	6828      	ldr	r0, [r5, #0]
 80018b0:	9303      	str	r3, [sp, #12]
 80018b2:	f006 fedf 	bl	8008674 <STC_GetMecSpeedRefUnitDefault>
 80018b6:	9b03      	ldr	r3, [sp, #12]
 80018b8:	4601      	mov	r1, r0
 80018ba:	4622      	mov	r2, r4
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff fd01 	bl	80012c4 <MCI_ExecSpeedRamp>
  pMCIList[M1] = oMCInterface[M1];
 80018c2:	9801      	ldr	r0, [sp, #4]
 80018c4:	f8da 3000 	ldr.w	r3, [sl]
 80018c8:	6003      	str	r3, [r0, #0]
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 80018ca:	4b19      	ldr	r3, [pc, #100]	; (8001930 <MCboot+0x178>)
  MCT[M1].pPIDIq = pPIDIq[M1];
 80018cc:	4820      	ldr	r0, [pc, #128]	; (8001950 <MCboot+0x198>)
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 80018ce:	6819      	ldr	r1, [r3, #0]
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 80018d0:	682a      	ldr	r2, [r5, #0]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 80018d2:	4b22      	ldr	r3, [pc, #136]	; (800195c <MCboot+0x1a4>)
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 80018d4:	4d23      	ldr	r5, [pc, #140]	; (8001964 <MCboot+0x1ac>)
  MCT[M1].pPIDIq = pPIDIq[M1];
 80018d6:	f8d0 c000 	ldr.w	ip, [r0]
  MCT[M1].pPIDId = pPIDId[M1];
 80018da:	481e      	ldr	r0, [pc, #120]	; (8001954 <MCboot+0x19c>)
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 80018dc:	f8d9 e000 	ldr.w	lr, [r9]
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 80018e0:	682d      	ldr	r5, [r5, #0]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 80018e2:	f8d3 9000 	ldr.w	r9, [r3]
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 80018e6:	f8d8 8000 	ldr.w	r8, [r8]
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 80018ea:	4b22      	ldr	r3, [pc, #136]	; (8001974 <MCboot+0x1bc>)
  MCT[M1].pPIDId = pPIDId[M1];
 80018ec:	6800      	ldr	r0, [r0, #0]
 80018ee:	6098      	str	r0, [r3, #8]
  MCT[M1].pStateMachine = &STM[M1];
 80018f0:	e9c3 2609 	strd	r2, r6, [r3, #36]	; 0x24
  MCT[M1].pPIDIq = pPIDIq[M1];
 80018f4:	e9c3 ec00 	strd	lr, ip, [r3]
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 80018f8:	e9c3 580b 	strd	r5, r8, [r3, #44]	; 0x2c
  MCT[M1].pSpeedSensorVirtual = MC_NULL;
 80018fc:	e9c3 4407 	strd	r4, r4, [r3, #28]
  MCT[M1].pNTCRelay = MC_NULL;             /* relay is defined, oRelayM1*/
 8001900:	e9c3 440d 	strd	r4, r4, [r3, #52]	; 0x34
  MCT[M1].pFF = MC_NULL;
 8001904:	e9c3 4410 	strd	r4, r4, [r3, #64]	; 0x40
  MCT[M1].pSCC = MC_NULL;
 8001908:	e9c3 4412 	strd	r4, r4, [r3, #72]	; 0x48
  bMCBootCompleted = 1;
 800190c:	4a0a      	ldr	r2, [pc, #40]	; (8001938 <MCboot+0x180>)
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 800190e:	6119      	str	r1, [r3, #16]
  MCT[M1].pSpeedSensorMain = (SpeednPosFdbk_Handle_t *) &HALL_M1;
 8001910:	619f      	str	r7, [r3, #24]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8001912:	f8c3 903c 	str.w	r9, [r3, #60]	; 0x3c
  MCT[M1].pPIDFluxWeakening = MC_NULL; /* if M1 doesn't has FW */
 8001916:	60dc      	str	r4, [r3, #12]
  MCT[M1].pRevupCtrl = MC_NULL;              /* only if M1 is not sensorless*/
 8001918:	615c      	str	r4, [r3, #20]
  MCT[M1].pOTT = MC_NULL;
 800191a:	651c      	str	r4, [r3, #80]	; 0x50
  pMCTList[M1] = &MCT[M1];
 800191c:	9902      	ldr	r1, [sp, #8]
 800191e:	600b      	str	r3, [r1, #0]
  bMCBootCompleted = 1;
 8001920:	f882 b000 	strb.w	fp, [r2]
}
 8001924:	b007      	add	sp, #28
 8001926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800192a:	bf00      	nop
 800192c:	20000ad0 	.word	0x20000ad0
 8001930:	20000b08 	.word	0x20000b08
 8001934:	200000b4 	.word	0x200000b4
 8001938:	20000ad6 	.word	0x20000ad6
 800193c:	20000ae8 	.word	0x20000ae8
 8001940:	20000314 	.word	0x20000314
 8001944:	20000000 	.word	0x20000000
 8001948:	20000b00 	.word	0x20000b00
 800194c:	200003d0 	.word	0x200003d0
 8001950:	20000af4 	.word	0x20000af4
 8001954:	20000af0 	.word	0x20000af0
 8001958:	200003a8 	.word	0x200003a8
 800195c:	20000aec 	.word	0x20000aec
 8001960:	20000200 	.word	0x20000200
 8001964:	20000b04 	.word	0x20000b04
 8001968:	20000afc 	.word	0x20000afc
 800196c:	20000390 	.word	0x20000390
 8001970:	20000ab4 	.word	0x20000ab4
 8001974:	20000a60 	.word	0x20000a60
 8001978:	200001d4 	.word	0x200001d4
 800197c:	20000af8 	.word	0x20000af8
 8001980:	200001a8 	.word	0x200001a8
 8001984:	2000017c 	.word	0x2000017c
 8001988:	20000ae4 	.word	0x20000ae4
 800198c:	20000404 	.word	0x20000404
 8001990:	20000a38 	.word	0x20000a38
 8001994:	20000ae0 	.word	0x20000ae0

08001998 <FOC_InitAdditionalMethods>:
__weak void FOC_InitAdditionalMethods(uint8_t bMotor)
{
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
}
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop

0800199c <FOC_CalcCurrRef>:
  *         in oTSC parameters
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 800199c:	b510      	push	{r4, lr}

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 800199e:	4c08      	ldr	r4, [pc, #32]	; (80019c0 <FOC_CalcCurrRef+0x24>)
 80019a0:	2326      	movs	r3, #38	; 0x26
 80019a2:	fb03 4400 	mla	r4, r3, r0, r4
 80019a6:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80019aa:	b103      	cbz	r3, 80019ae <FOC_CalcCurrRef+0x12>

  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 80019ac:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 80019ae:	4b05      	ldr	r3, [pc, #20]	; (80019c4 <FOC_CalcCurrRef+0x28>)
 80019b0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80019b4:	f006 fe2c 	bl	8008610 <STC_CalcTorqueReference>
 80019b8:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 80019ba:	8220      	strh	r0, [r4, #16]
}
 80019bc:	bd10      	pop	{r4, pc}
 80019be:	bf00      	nop
 80019c0:	20000a38 	.word	0x20000a38
 80019c4:	20000b00 	.word	0x20000b00

080019c8 <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 80019c8:	4b01      	ldr	r3, [pc, #4]	; (80019d0 <TSK_SetChargeBootCapDelayM1+0x8>)
 80019ca:	8018      	strh	r0, [r3, #0]
}
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	20000ad8 	.word	0x20000ad8

080019d4 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (hBootCapDelayCounterM1 == 0)
 80019d4:	4b03      	ldr	r3, [pc, #12]	; (80019e4 <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 80019d6:	8818      	ldrh	r0, [r3, #0]
 80019d8:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 80019da:	fab0 f080 	clz	r0, r0
 80019de:	0940      	lsrs	r0, r0, #5
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	20000ad8 	.word	0x20000ad8

080019e8 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 80019e8:	4b01      	ldr	r3, [pc, #4]	; (80019f0 <TSK_SetStopPermanencyTimeM1+0x8>)
 80019ea:	8018      	strh	r0, [r3, #0]
}
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	20000adc 	.word	0x20000adc

080019f4 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (hStopPermanencyCounterM1 == 0)
 80019f4:	4b03      	ldr	r3, [pc, #12]	; (8001a04 <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 80019f6:	8818      	ldrh	r0, [r3, #0]
 80019f8:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 80019fa:	fab0 f080 	clz	r0, r0
 80019fe:	0940      	lsrs	r0, r0, #5
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	20000adc 	.word	0x20000adc

08001a08 <TSK_MediumFrequencyTaskM1>:
{
 8001a08:	b530      	push	{r4, r5, lr}
 8001a0a:	b083      	sub	sp, #12
  int16_t wAux = 0;
 8001a0c:	2300      	movs	r3, #0
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit( &HALL_M1, &wAux );
 8001a0e:	f10d 0106 	add.w	r1, sp, #6
 8001a12:	484d      	ldr	r0, [pc, #308]	; (8001b48 <TSK_MediumFrequencyTaskM1+0x140>)
  int16_t wAux = 0;
 8001a14:	f8ad 3006 	strh.w	r3, [sp, #6]
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit( &HALL_M1, &wAux );
 8001a18:	f005 fa1c 	bl	8006e54 <HALL_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower( pMPM[M1] );
 8001a1c:	4d4b      	ldr	r5, [pc, #300]	; (8001b4c <TSK_MediumFrequencyTaskM1+0x144>)
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit( &HALL_M1, &wAux );
 8001a1e:	4604      	mov	r4, r0
  PQD_CalcElMotorPower( pMPM[M1] );
 8001a20:	6828      	ldr	r0, [r5, #0]
 8001a22:	f005 fdad 	bl	8007580 <PQD_CalcElMotorPower>
  StateM1 = STM_GetState( &STM[M1] );
 8001a26:	484a      	ldr	r0, [pc, #296]	; (8001b50 <TSK_MediumFrequencyTaskM1+0x148>)
 8001a28:	f006 feda 	bl	80087e0 <STM_GetState>
  switch ( StateM1 )
 8001a2c:	1ec3      	subs	r3, r0, #3
 8001a2e:	2b0f      	cmp	r3, #15
 8001a30:	d80d      	bhi.n	8001a4e <TSK_MediumFrequencyTaskM1+0x46>
 8001a32:	e8df f003 	tbb	[pc, r3]
 8001a36:	2b1f      	.short	0x2b1f
 8001a38:	65524330 	.word	0x65524330
 8001a3c:	0c0c0c08 	.word	0x0c0c0c08
 8001a40:	6e0c0c0c 	.word	0x6e0c0c0c
 8001a44:	0e7c      	.short	0x0e7c
    STM_NextState( &STM[M1], IDLE );
 8001a46:	4842      	ldr	r0, [pc, #264]	; (8001b50 <TSK_MediumFrequencyTaskM1+0x148>)
 8001a48:	2100      	movs	r1, #0
 8001a4a:	f006 fe55 	bl	80086f8 <STM_NextState>
}
 8001a4e:	b003      	add	sp, #12
 8001a50:	bd30      	pop	{r4, r5, pc}
    HALL_Clear( &HALL_M1 );
 8001a52:	483d      	ldr	r0, [pc, #244]	; (8001b48 <TSK_MediumFrequencyTaskM1+0x140>)
 8001a54:	f005 f936 	bl	8006cc4 <HALL_Clear>
    if ( STM_NextState( &STM[M1], START ) == true )
 8001a58:	483d      	ldr	r0, [pc, #244]	; (8001b50 <TSK_MediumFrequencyTaskM1+0x148>)
 8001a5a:	2104      	movs	r1, #4
 8001a5c:	f006 fe4c 	bl	80086f8 <STM_NextState>
 8001a60:	2800      	cmp	r0, #0
 8001a62:	d0f4      	beq.n	8001a4e <TSK_MediumFrequencyTaskM1+0x46>
      FOC_Clear( M1 );
 8001a64:	2000      	movs	r0, #0
 8001a66:	f7ff fe6d 	bl	8001744 <FOC_Clear>
      R3_1_SwitchOnPWM( pwmcHandle[M1] );
 8001a6a:	4b3a      	ldr	r3, [pc, #232]	; (8001b54 <TSK_MediumFrequencyTaskM1+0x14c>)
 8001a6c:	6818      	ldr	r0, [r3, #0]
 8001a6e:	f006 f8b3 	bl	8007bd8 <R3_1_SwitchOnPWM>
 8001a72:	e7ec      	b.n	8001a4e <TSK_MediumFrequencyTaskM1+0x46>
    R3_1_TurnOnLowSides( pwmcHandle[M1] );
 8001a74:	4b37      	ldr	r3, [pc, #220]	; (8001b54 <TSK_MediumFrequencyTaskM1+0x14c>)
 8001a76:	6818      	ldr	r0, [r3, #0]
 8001a78:	f006 f884 	bl	8007b84 <R3_1_TurnOnLowSides>
    TSK_SetChargeBootCapDelayM1( CHARGE_BOOT_CAP_TICKS );
 8001a7c:	2014      	movs	r0, #20
 8001a7e:	f7ff ffa3 	bl	80019c8 <TSK_SetChargeBootCapDelayM1>
    STM_NextState( &STM[M1], CHARGE_BOOT_CAP );
 8001a82:	2110      	movs	r1, #16
 8001a84:	4832      	ldr	r0, [pc, #200]	; (8001b50 <TSK_MediumFrequencyTaskM1+0x148>)
 8001a86:	f006 fe37 	bl	80086f8 <STM_NextState>
    break;
 8001a8a:	e7e0      	b.n	8001a4e <TSK_MediumFrequencyTaskM1+0x46>
        STM_NextState( &STM[M1], START_RUN ); /* only for sensored*/
 8001a8c:	2105      	movs	r1, #5
 8001a8e:	4830      	ldr	r0, [pc, #192]	; (8001b50 <TSK_MediumFrequencyTaskM1+0x148>)
 8001a90:	f006 fe32 	bl	80086f8 <STM_NextState>
    break;
 8001a94:	e7db      	b.n	8001a4e <TSK_MediumFrequencyTaskM1+0x46>
	  FOC_InitAdditionalMethods(M1);
 8001a96:	2000      	movs	r0, #0
 8001a98:	f7ff ff7e 	bl	8001998 <FOC_InitAdditionalMethods>
      FOC_CalcCurrRef( M1 );
 8001a9c:	2000      	movs	r0, #0
 8001a9e:	f7ff ff7d 	bl	800199c <FOC_CalcCurrRef>
      STM_NextState( &STM[M1], RUN );
 8001aa2:	2106      	movs	r1, #6
 8001aa4:	482a      	ldr	r0, [pc, #168]	; (8001b50 <TSK_MediumFrequencyTaskM1+0x148>)
 8001aa6:	f006 fe27 	bl	80086f8 <STM_NextState>
    STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1] ); /* Init the reference speed to current speed */
 8001aaa:	4b2b      	ldr	r3, [pc, #172]	; (8001b58 <TSK_MediumFrequencyTaskM1+0x150>)
 8001aac:	6818      	ldr	r0, [r3, #0]
 8001aae:	f006 fdf9 	bl	80086a4 <STC_ForceSpeedReferenceToCurrentSpeed>
    MCI_ExecBufferedCommands( oMCInterface[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 8001ab2:	4b2a      	ldr	r3, [pc, #168]	; (8001b5c <TSK_MediumFrequencyTaskM1+0x154>)
 8001ab4:	6818      	ldr	r0, [r3, #0]
 8001ab6:	f7ff fc39 	bl	800132c <MCI_ExecBufferedCommands>
    break;
 8001aba:	e7c8      	b.n	8001a4e <TSK_MediumFrequencyTaskM1+0x46>
    MCI_ExecBufferedCommands( oMCInterface[M1] );
 8001abc:	4b27      	ldr	r3, [pc, #156]	; (8001b5c <TSK_MediumFrequencyTaskM1+0x154>)
 8001abe:	6818      	ldr	r0, [r3, #0]
 8001ac0:	f7ff fc34 	bl	800132c <MCI_ExecBufferedCommands>
    FOC_CalcCurrRef( M1 );
 8001ac4:	2000      	movs	r0, #0
 8001ac6:	f7ff ff69 	bl	800199c <FOC_CalcCurrRef>
    if( !IsSpeedReliable )
 8001aca:	2c00      	cmp	r4, #0
 8001acc:	d1bf      	bne.n	8001a4e <TSK_MediumFrequencyTaskM1+0x46>
      STM_FaultProcessing( &STM[M1], MC_SPEED_FDBK, 0 );
 8001ace:	4622      	mov	r2, r4
 8001ad0:	2120      	movs	r1, #32
 8001ad2:	481f      	ldr	r0, [pc, #124]	; (8001b50 <TSK_MediumFrequencyTaskM1+0x148>)
 8001ad4:	f006 fdf4 	bl	80086c0 <STM_FaultProcessing>
 8001ad8:	e7b9      	b.n	8001a4e <TSK_MediumFrequencyTaskM1+0x46>
    R3_1_SwitchOffPWM( pwmcHandle[M1] );
 8001ada:	4b1e      	ldr	r3, [pc, #120]	; (8001b54 <TSK_MediumFrequencyTaskM1+0x14c>)
 8001adc:	6818      	ldr	r0, [r3, #0]
 8001ade:	f006 f8c5 	bl	8007c6c <R3_1_SwitchOffPWM>
    FOC_Clear( M1 );
 8001ae2:	2000      	movs	r0, #0
 8001ae4:	f7ff fe2e 	bl	8001744 <FOC_Clear>
    MPM_Clear( (MotorPowMeas_Handle_t*) pMPM[M1] );
 8001ae8:	6828      	ldr	r0, [r5, #0]
 8001aea:	f005 fc5d 	bl	80073a8 <MPM_Clear>
    TSK_SetStopPermanencyTimeM1( STOPPERMANENCY_TICKS );
 8001aee:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001af2:	f7ff ff79 	bl	80019e8 <TSK_SetStopPermanencyTimeM1>
    STM_NextState( &STM[M1], STOP );
 8001af6:	2108      	movs	r1, #8
 8001af8:	4815      	ldr	r0, [pc, #84]	; (8001b50 <TSK_MediumFrequencyTaskM1+0x148>)
 8001afa:	f006 fdfd 	bl	80086f8 <STM_NextState>
    break;
 8001afe:	e7a6      	b.n	8001a4e <TSK_MediumFrequencyTaskM1+0x46>
    if ( TSK_StopPermanencyTimeHasElapsedM1() )
 8001b00:	f7ff ff78 	bl	80019f4 <TSK_StopPermanencyTimeHasElapsedM1>
 8001b04:	2800      	cmp	r0, #0
 8001b06:	d0a2      	beq.n	8001a4e <TSK_MediumFrequencyTaskM1+0x46>
      STM_NextState( &STM[M1], STOP_IDLE );
 8001b08:	2109      	movs	r1, #9
 8001b0a:	4811      	ldr	r0, [pc, #68]	; (8001b50 <TSK_MediumFrequencyTaskM1+0x148>)
 8001b0c:	f006 fdf4 	bl	80086f8 <STM_NextState>
 8001b10:	e79d      	b.n	8001a4e <TSK_MediumFrequencyTaskM1+0x46>
    if ( TSK_ChargeBootCapDelayHasElapsedM1() )
 8001b12:	f7ff ff5f 	bl	80019d4 <TSK_ChargeBootCapDelayHasElapsedM1>
 8001b16:	2800      	cmp	r0, #0
 8001b18:	d099      	beq.n	8001a4e <TSK_MediumFrequencyTaskM1+0x46>
      PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 8001b1a:	4b0e      	ldr	r3, [pc, #56]	; (8001b54 <TSK_MediumFrequencyTaskM1+0x14c>)
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	6818      	ldr	r0, [r3, #0]
 8001b20:	f005 fef8 	bl	8007914 <PWMC_CurrentReadingCalibr>
      STM_NextState(&STM[M1],OFFSET_CALIB);
 8001b24:	2111      	movs	r1, #17
 8001b26:	480a      	ldr	r0, [pc, #40]	; (8001b50 <TSK_MediumFrequencyTaskM1+0x148>)
 8001b28:	f006 fde6 	bl	80086f8 <STM_NextState>
 8001b2c:	e78f      	b.n	8001a4e <TSK_MediumFrequencyTaskM1+0x46>
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 8001b2e:	4b09      	ldr	r3, [pc, #36]	; (8001b54 <TSK_MediumFrequencyTaskM1+0x14c>)
 8001b30:	2101      	movs	r1, #1
 8001b32:	6818      	ldr	r0, [r3, #0]
 8001b34:	f005 feee 	bl	8007914 <PWMC_CurrentReadingCalibr>
 8001b38:	2800      	cmp	r0, #0
 8001b3a:	d088      	beq.n	8001a4e <TSK_MediumFrequencyTaskM1+0x46>
      STM_NextState( &STM[M1], CLEAR );
 8001b3c:	2112      	movs	r1, #18
 8001b3e:	4804      	ldr	r0, [pc, #16]	; (8001b50 <TSK_MediumFrequencyTaskM1+0x148>)
 8001b40:	f006 fdda 	bl	80086f8 <STM_NextState>
 8001b44:	e783      	b.n	8001a4e <TSK_MediumFrequencyTaskM1+0x46>
 8001b46:	bf00      	nop
 8001b48:	200000b4 	.word	0x200000b4
 8001b4c:	20000aec 	.word	0x20000aec
 8001b50:	20000ad0 	.word	0x20000ad0
 8001b54:	20000b08 	.word	0x20000b08
 8001b58:	20000b00 	.word	0x20000b00
 8001b5c:	20000ae0 	.word	0x20000ae0

08001b60 <MC_Scheduler>:
{
 8001b60:	b538      	push	{r3, r4, r5, lr}
  if (bMCBootCompleted == 1)
 8001b62:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <MC_Scheduler+0x48>)
 8001b64:	781c      	ldrb	r4, [r3, #0]
 8001b66:	2c01      	cmp	r4, #1
 8001b68:	d000      	beq.n	8001b6c <MC_Scheduler+0xc>
}
 8001b6a:	bd38      	pop	{r3, r4, r5, pc}
    if(hMFTaskCounterM1 > 0u)
 8001b6c:	4d0f      	ldr	r5, [pc, #60]	; (8001bac <MC_Scheduler+0x4c>)
 8001b6e:	882b      	ldrh	r3, [r5, #0]
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	b1ab      	cbz	r3, 8001ba0 <MC_Scheduler+0x40>
      hMFTaskCounterM1--;
 8001b74:	882b      	ldrh	r3, [r5, #0]
 8001b76:	3b01      	subs	r3, #1
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	802b      	strh	r3, [r5, #0]
    if(hBootCapDelayCounterM1 > 0u)
 8001b7c:	4a0c      	ldr	r2, [pc, #48]	; (8001bb0 <MC_Scheduler+0x50>)
 8001b7e:	8813      	ldrh	r3, [r2, #0]
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	b11b      	cbz	r3, 8001b8c <MC_Scheduler+0x2c>
      hBootCapDelayCounterM1--;
 8001b84:	8813      	ldrh	r3, [r2, #0]
 8001b86:	3b01      	subs	r3, #1
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0u)
 8001b8c:	4a09      	ldr	r2, [pc, #36]	; (8001bb4 <MC_Scheduler+0x54>)
 8001b8e:	8813      	ldrh	r3, [r2, #0]
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d0e9      	beq.n	8001b6a <MC_Scheduler+0xa>
      hStopPermanencyCounterM1--;
 8001b96:	8813      	ldrh	r3, [r2, #0]
 8001b98:	3b01      	subs	r3, #1
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	8013      	strh	r3, [r2, #0]
}
 8001b9e:	bd38      	pop	{r3, r4, r5, pc}
      TSK_MediumFrequencyTaskM1();
 8001ba0:	f7ff ff32 	bl	8001a08 <TSK_MediumFrequencyTaskM1>
      hMFTaskCounterM1 = MF_TASK_OCCURENCE_TICKS;
 8001ba4:	802c      	strh	r4, [r5, #0]
 8001ba6:	e7e9      	b.n	8001b7c <MC_Scheduler+0x1c>
 8001ba8:	20000ad6 	.word	0x20000ad6
 8001bac:	20000ada 	.word	0x20000ada
 8001bb0:	20000ad8 	.word	0x20000ad8
 8001bb4:	20000adc 	.word	0x20000adc

08001bb8 <MC_RunMotorControlTasks>:
{
 8001bb8:	b508      	push	{r3, lr}
  if ( bMCBootCompleted ) {
 8001bba:	4b05      	ldr	r3, [pc, #20]	; (8001bd0 <MC_RunMotorControlTasks+0x18>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	b903      	cbnz	r3, 8001bc2 <MC_RunMotorControlTasks+0xa>
}
 8001bc0:	bd08      	pop	{r3, pc}
    MC_Scheduler();
 8001bc2:	f7ff ffcd 	bl	8001b60 <MC_Scheduler>
}
 8001bc6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    UI_Scheduler();
 8001bca:	f001 bad9 	b.w	8003180 <UI_Scheduler>
 8001bce:	bf00      	nop
 8001bd0:	20000ad6 	.word	0x20000ad6

08001bd4 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8001bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* USER CODE END HighFrequencyTask 0 */

  uint8_t bMotorNbr = 0;
  uint16_t hFOCreturn;

  HALL_CalcElAngle (&HALL_M1);
 8001bd8:	4830      	ldr	r0, [pc, #192]	; (8001c9c <TSK_HighFrequencyTask+0xc8>)
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;

  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
  hElAngle = SPD_GetElAngle(speedHandle);
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001bda:	4f31      	ldr	r7, [pc, #196]	; (8001ca0 <TSK_HighFrequencyTask+0xcc>)
  Ialphabeta = MCM_Clarke(Iab);
  Iqd = MCM_Park(Ialphabeta, hElAngle);
  Vqd.q = PI_Controller(pPIDIq[M1],
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001bdc:	4c31      	ldr	r4, [pc, #196]	; (8001ca4 <TSK_HighFrequencyTask+0xd0>)
{
 8001bde:	b086      	sub	sp, #24
  HALL_CalcElAngle (&HALL_M1);
 8001be0:	f005 f91a 	bl	8006e18 <HALL_CalcElAngle>
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8001be4:	4b30      	ldr	r3, [pc, #192]	; (8001ca8 <TSK_HighFrequencyTask+0xd4>)
 8001be6:	6818      	ldr	r0, [r3, #0]
 8001be8:	f006 fca8 	bl	800853c <STC_GetSpeedSensor>
 8001bec:	4605      	mov	r5, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 8001bee:	f006 fc43 	bl	8008478 <SPD_GetElAngle>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001bf2:	a903      	add	r1, sp, #12
  hElAngle = SPD_GetElAngle(speedHandle);
 8001bf4:	4606      	mov	r6, r0
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001bf6:	6838      	ldr	r0, [r7, #0]
 8001bf8:	f005 fd52 	bl	80076a0 <PWMC_GetPhaseCurrents>
  Ialphabeta = MCM_Clarke(Iab);
 8001bfc:	9803      	ldr	r0, [sp, #12]
 8001bfe:	f7ff fc8f 	bl	8001520 <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001c02:	4631      	mov	r1, r6
  Ialphabeta = MCM_Clarke(Iab);
 8001c04:	9004      	str	r0, [sp, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001c06:	f7ff fd01 	bl	800160c <MCM_Park>
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001c0a:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001c0e:	9001      	str	r0, [sp, #4]
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001c10:	b203      	sxth	r3, r0
  Vqd.q = PI_Controller(pPIDIq[M1],
 8001c12:	1ac9      	subs	r1, r1, r3
 8001c14:	4b25      	ldr	r3, [pc, #148]	; (8001cac <TSK_HighFrequencyTask+0xd8>)
 8001c16:	6818      	ldr	r0, [r3, #0]
 8001c18:	f005 fc6c 	bl	80074f4 <PI_Controller>

  Vqd.d = PI_Controller(pPIDId[M1],
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8001c1c:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8001c20:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
  Vqd.d = PI_Controller(pPIDId[M1],
 8001c24:	1ac9      	subs	r1, r1, r3
 8001c26:	4b22      	ldr	r3, [pc, #136]	; (8001cb0 <TSK_HighFrequencyTask+0xdc>)
  Vqd.q = PI_Controller(pPIDIq[M1],
 8001c28:	4680      	mov	r8, r0
  Vqd.d = PI_Controller(pPIDId[M1],
 8001c2a:	6818      	ldr	r0, [r3, #0]
 8001c2c:	f005 fc62 	bl	80074f4 <PI_Controller>

  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 8001c30:	4b20      	ldr	r3, [pc, #128]	; (8001cb4 <TSK_HighFrequencyTask+0xe0>)
 8001c32:	f8ad 8008 	strh.w	r8, [sp, #8]
 8001c36:	f8ad 000a 	strh.w	r0, [sp, #10]
 8001c3a:	9902      	ldr	r1, [sp, #8]
 8001c3c:	6818      	ldr	r0, [r3, #0]
 8001c3e:	f004 ff59 	bl	8006af4 <Circle_Limitation>
 8001c42:	4603      	mov	r3, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8001c44:	4628      	mov	r0, r5
  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 8001c46:	fa0f f883 	sxth.w	r8, r3
 8001c4a:	141d      	asrs	r5, r3, #16
 8001c4c:	9302      	str	r3, [sp, #8]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8001c4e:	f006 fc1b 	bl	8008488 <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8001c52:	4631      	mov	r1, r6
 8001c54:	9802      	ldr	r0, [sp, #8]
 8001c56:	f7ff fd1d 	bl	8001694 <MCM_Rev_Park>
 8001c5a:	4601      	mov	r1, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001c5c:	6838      	ldr	r0, [r7, #0]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8001c5e:	9105      	str	r1, [sp, #20]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001c60:	f005 fd20 	bl	80076a4 <PWMC_SetPhaseVoltage>
  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
 8001c64:	9b03      	ldr	r3, [sp, #12]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8001c66:	9a04      	ldr	r2, [sp, #16]
  FOCVars[M1].Iab = Iab;
 8001c68:	6023      	str	r3, [r4, #0]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001c6a:	4601      	mov	r1, r0
  FOCVars[M1].Iqd = Iqd;
 8001c6c:	9b01      	ldr	r3, [sp, #4]
  FOCVars[M1].Valphabeta = Valphabeta;
 8001c6e:	9805      	ldr	r0, [sp, #20]
  FOCVars[M1].Vqd = Vqd;
 8001c70:	f8a4 8016 	strh.w	r8, [r4, #22]
  if(hFOCreturn == MC_FOC_DURATION)
 8001c74:	2901      	cmp	r1, #1
  FOCVars[M1].Vqd = Vqd;
 8001c76:	8325      	strh	r5, [r4, #24]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8001c78:	6062      	str	r2, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 8001c7a:	60e3      	str	r3, [r4, #12]
  FOCVars[M1].Valphabeta = Valphabeta;
 8001c7c:	f8c4 001a 	str.w	r0, [r4, #26]
  FOCVars[M1].hElAngle = hElAngle;
 8001c80:	8426      	strh	r6, [r4, #32]
  if(hFOCreturn == MC_FOC_DURATION)
 8001c82:	d003      	beq.n	8001c8c <TSK_HighFrequencyTask+0xb8>
}
 8001c84:	2000      	movs	r0, #0
 8001c86:	b006      	add	sp, #24
 8001c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    STM_FaultProcessing(&STM[M1], MC_FOC_DURATION, 0);
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	480a      	ldr	r0, [pc, #40]	; (8001cb8 <TSK_HighFrequencyTask+0xe4>)
 8001c90:	f006 fd16 	bl	80086c0 <STM_FaultProcessing>
}
 8001c94:	2000      	movs	r0, #0
 8001c96:	b006      	add	sp, #24
 8001c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c9c:	200000b4 	.word	0x200000b4
 8001ca0:	20000b08 	.word	0x20000b08
 8001ca4:	20000a38 	.word	0x20000a38
 8001ca8:	20000b00 	.word	0x20000b00
 8001cac:	20000af4 	.word	0x20000af4
 8001cb0:	20000af0 	.word	0x20000af0
 8001cb4:	20000ae8 	.word	0x20000ae8
 8001cb8:	20000ad0 	.word	0x20000ad0

08001cbc <TSK_SafetyTask_PWMOFF>:
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink
  * @retval None
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 8001cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */

  uint16_t CodeReturn = MC_NO_ERROR;
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001cbe:	4b20      	ldr	r3, [pc, #128]	; (8001d40 <TSK_SafetyTask_PWMOFF+0x84>)
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8001cc0:	4e20      	ldr	r6, [pc, #128]	; (8001d44 <TSK_SafetyTask_PWMOFF+0x88>)
{
 8001cc2:	4604      	mov	r4, r0
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001cc4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001cc8:	f005 fbc2 	bl	8007450 <NTC_CalcAvTemp>
 8001ccc:	4605      	mov	r5, r0
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8001cce:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8001cd2:	f005 fe49 	bl	8007968 <PWMC_CheckOverCurrent>
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001cd6:	f025 0508 	bic.w	r5, r5, #8
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8001cda:	4328      	orrs	r0, r5
 8001cdc:	b285      	uxth	r5, r0
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if(bMotor == M1)
 8001cde:	b334      	cbz	r4, 8001d2e <TSK_SafetyTask_PWMOFF+0x72>
  {
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(pBusSensorM1);
  }

  STM_FaultProcessing(&STM[bMotor], CodeReturn, ~CodeReturn); /* Update the STM according error code */
 8001ce0:	4f19      	ldr	r7, [pc, #100]	; (8001d48 <TSK_SafetyTask_PWMOFF+0x8c>)
 8001ce2:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8001ce6:	eb07 0743 	add.w	r7, r7, r3, lsl #1
 8001cea:	43ea      	mvns	r2, r5
 8001cec:	b292      	uxth	r2, r2
 8001cee:	4629      	mov	r1, r5
 8001cf0:	4638      	mov	r0, r7
 8001cf2:	f006 fce5 	bl	80086c0 <STM_FaultProcessing>
  switch (STM_GetState(&STM[bMotor])) /* Acts on PWM outputs in case of faults */
 8001cf6:	4638      	mov	r0, r7
 8001cf8:	f006 fd72 	bl	80087e0 <STM_GetState>
 8001cfc:	280a      	cmp	r0, #10
 8001cfe:	d002      	beq.n	8001d06 <TSK_SafetyTask_PWMOFF+0x4a>
 8001d00:	280b      	cmp	r0, #11
 8001d02:	d00e      	beq.n	8001d22 <TSK_SafetyTask_PWMOFF+0x66>
    break;
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 8001d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001d06:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8001d0a:	f005 fe01 	bl	8007910 <PWMC_SwitchOffPWM>
    FOC_Clear(bMotor);
 8001d0e:	4620      	mov	r0, r4
 8001d10:	f7ff fd18 	bl	8001744 <FOC_Clear>
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 8001d14:	4b0d      	ldr	r3, [pc, #52]	; (8001d4c <TSK_SafetyTask_PWMOFF+0x90>)
 8001d16:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
 8001d1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 8001d1e:	f005 bb43 	b.w	80073a8 <MPM_Clear>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001d22:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
}
 8001d26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001d2a:	f005 bdf1 	b.w	8007910 <PWMC_SwitchOffPWM>
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(pBusSensorM1);
 8001d2e:	4b08      	ldr	r3, [pc, #32]	; (8001d50 <TSK_SafetyTask_PWMOFF+0x94>)
 8001d30:	6818      	ldr	r0, [r3, #0]
 8001d32:	f006 fb37 	bl	80083a4 <RVBS_CalcAvVbus>
 8001d36:	f020 0008 	bic.w	r0, r0, #8
 8001d3a:	4305      	orrs	r5, r0
 8001d3c:	b2ad      	uxth	r5, r5
 8001d3e:	e7cf      	b.n	8001ce0 <TSK_SafetyTask_PWMOFF+0x24>
 8001d40:	20000b04 	.word	0x20000b04
 8001d44:	20000b08 	.word	0x20000b08
 8001d48:	20000ad0 	.word	0x20000ad0
 8001d4c:	20000aec 	.word	0x20000aec
 8001d50:	20000ae4 	.word	0x20000ae4

08001d54 <TSK_SafetyTask>:
{
 8001d54:	b508      	push	{r3, lr}
  if (bMCBootCompleted == 1)
 8001d56:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <TSK_SafetyTask+0x1c>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d000      	beq.n	8001d60 <TSK_SafetyTask+0xc>
}
 8001d5e:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 8001d60:	2000      	movs	r0, #0
 8001d62:	f7ff ffab 	bl	8001cbc <TSK_SafetyTask_PWMOFF>
}
 8001d66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv ();
 8001d6a:	f000 bef1 	b.w	8002b50 <RCM_ExecUserConv>
 8001d6e:	bf00      	nop
 8001d70:	20000ad6 	.word	0x20000ad6

08001d74 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 8001d74:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */

  R3_1_SwitchOffPWM(pwmcHandle[M1]);
 8001d76:	4b05      	ldr	r3, [pc, #20]	; (8001d8c <TSK_HardwareFaultTask+0x18>)
 8001d78:	6818      	ldr	r0, [r3, #0]
 8001d7a:	f005 ff77 	bl	8007c6c <R3_1_SwitchOffPWM>
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 8001d7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
 8001d82:	4803      	ldr	r0, [pc, #12]	; (8001d90 <TSK_HardwareFaultTask+0x1c>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	2180      	movs	r1, #128	; 0x80
 8001d88:	f006 bc9a 	b.w	80086c0 <STM_FaultProcessing>
 8001d8c:	20000b08 	.word	0x20000b08
 8001d90:	20000ad0 	.word	0x20000ad0

08001d94 <startMediumFrequencyTask>:

/* startMediumFrequencyTask function */
void startMediumFrequencyTask(void const * argument)
{
 8001d94:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MF task 1 */
  /* Infinite loop */
  for(;;)
  {
    /* delay of 500us */
    vTaskDelay(1);
 8001d96:	2001      	movs	r0, #1
 8001d98:	f004 fcf4 	bl	8006784 <vTaskDelay>
    MC_RunMotorControlTasks();
 8001d9c:	f7ff ff0c 	bl	8001bb8 <MC_RunMotorControlTasks>
  for(;;)
 8001da0:	e7f9      	b.n	8001d96 <startMediumFrequencyTask+0x2>
 8001da2:	bf00      	nop

08001da4 <StartSafetyTask>:
  /* USER CODE END MF task 1 */
}

/* startSafetyTask function */
void StartSafetyTask(void const * argument)
{
 8001da4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SF task 1 */
  /* Infinite loop */
  for(;;)
  {
    /* delay of 500us */
    vTaskDelay(1);
 8001da6:	2001      	movs	r0, #1
 8001da8:	f004 fcec 	bl	8006784 <vTaskDelay>
    TSK_SafetyTask();
 8001dac:	f7ff ffd2 	bl	8001d54 <TSK_SafetyTask>
  for(;;)
 8001db0:	e7f9      	b.n	8001da6 <StartSafetyTask+0x2>
 8001db2:	bf00      	nop

08001db4 <mc_lock_pins>:

 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
  */
__weak void mc_lock_pins (void)
{
 8001db4:	b470      	push	{r4, r5, r6}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001db6:	4a36      	ldr	r2, [pc, #216]	; (8001e90 <mc_lock_pins+0xdc>)
 8001db8:	4b36      	ldr	r3, [pc, #216]	; (8001e94 <mc_lock_pins+0xe0>)
 8001dba:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001dbc:	2108      	movs	r1, #8
 8001dbe:	61d1      	str	r1, [r2, #28]
 8001dc0:	b08f      	sub	sp, #60	; 0x3c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001dc2:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001dc4:	69d3      	ldr	r3, [r2, #28]
 8001dc6:	930d      	str	r3, [sp, #52]	; 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001dc8:	f44f 3082 	mov.w	r0, #66560	; 0x10400
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001dcc:	f44f 6580 	mov.w	r5, #1024	; 0x400
  (void) temp;
 8001dd0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001dd2:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001dd4:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001dd6:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001dd8:	69d1      	ldr	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001dda:	4b2f      	ldr	r3, [pc, #188]	; (8001e98 <mc_lock_pins+0xe4>)
  temp = READ_REG(GPIOx->LCKR);
 8001ddc:	910c      	str	r1, [sp, #48]	; 0x30
  (void) temp;
 8001dde:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001de0:	f44f 31c0 	mov.w	r1, #98304	; 0x18000
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001de4:	f44f 4400 	mov.w	r4, #32768	; 0x8000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001de8:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001dea:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001dec:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001dee:	69d9      	ldr	r1, [r3, #28]
 8001df0:	910b      	str	r1, [sp, #44]	; 0x2c
  (void) temp;
 8001df2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001df4:	4929      	ldr	r1, [pc, #164]	; (8001e9c <mc_lock_pins+0xe8>)
 8001df6:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001df8:	f44f 7480 	mov.w	r4, #256	; 0x100
 8001dfc:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001dfe:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001e00:	69d9      	ldr	r1, [r3, #28]
 8001e02:	910a      	str	r1, [sp, #40]	; 0x28
  (void) temp;
 8001e04:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e06:	f44f 3181 	mov.w	r1, #66048	; 0x10200
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e0a:	f44f 7400 	mov.w	r4, #512	; 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e0e:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e10:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e12:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001e14:	69d9      	ldr	r1, [r3, #28]
 8001e16:	9109      	str	r1, [sp, #36]	; 0x24
  (void) temp;
 8001e18:	9c09      	ldr	r4, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e1a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e1e:	2401      	movs	r4, #1
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e20:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e22:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e24:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001e26:	69d6      	ldr	r6, [r2, #28]
 8001e28:	9608      	str	r6, [sp, #32]
  (void) temp;
 8001e2a:	9e08      	ldr	r6, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e2c:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e2e:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e30:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001e32:	69d8      	ldr	r0, [r3, #28]
 8001e34:	9007      	str	r0, [sp, #28]
  (void) temp;
 8001e36:	9d07      	ldr	r5, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e38:	4819      	ldr	r0, [pc, #100]	; (8001ea0 <mc_lock_pins+0xec>)
 8001e3a:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e3c:	2502      	movs	r5, #2
 8001e3e:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e40:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001e42:	69d2      	ldr	r2, [r2, #28]
 8001e44:	9206      	str	r2, [sp, #24]
  (void) temp;
 8001e46:	9a06      	ldr	r2, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e48:	4a16      	ldr	r2, [pc, #88]	; (8001ea4 <mc_lock_pins+0xf0>)
 8001e4a:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e4c:	2680      	movs	r6, #128	; 0x80
 8001e4e:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e50:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001e52:	69da      	ldr	r2, [r3, #28]
 8001e54:	9205      	str	r2, [sp, #20]
  (void) temp;
 8001e56:	9a05      	ldr	r2, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e58:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e5a:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e5c:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001e5e:	69da      	ldr	r2, [r3, #28]
 8001e60:	9204      	str	r2, [sp, #16]
  (void) temp;
 8001e62:	9a04      	ldr	r2, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e64:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e66:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e68:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001e6a:	69db      	ldr	r3, [r3, #28]
 8001e6c:	9303      	str	r3, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ea8 <mc_lock_pins+0xf4>)
  (void) temp;
 8001e70:	9a03      	ldr	r2, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e72:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e74:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e76:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001e78:	69da      	ldr	r2, [r3, #28]
 8001e7a:	9202      	str	r2, [sp, #8]
  (void) temp;
 8001e7c:	9a02      	ldr	r2, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e7e:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e80:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e82:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	9301      	str	r3, [sp, #4]
  (void) temp;
 8001e88:	9b01      	ldr	r3, [sp, #4]
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_U_GPIO_Port, M1_CURR_AMPL_U_Pin);
LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_V_GPIO_Port, M1_CURR_AMPL_V_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_W_GPIO_Port, M1_CURR_AMPL_W_Pin);
}
 8001e8a:	b00f      	add	sp, #60	; 0x3c
 8001e8c:	bc70      	pop	{r4, r5, r6}
 8001e8e:	4770      	bx	lr
 8001e90:	40020400 	.word	0x40020400
 8001e94:	00010008 	.word	0x00010008
 8001e98:	40020000 	.word	0x40020000
 8001e9c:	00010100 	.word	0x00010100
 8001ea0:	00010002 	.word	0x00010002
 8001ea4:	00010080 	.word	0x00010080
 8001ea8:	40020800 	.word	0x40020800

08001eac <MCP_ReceivedFrame>:
* @param  Code code value of frame to send.
* @param  buffer frame data buffer.
* @param  Size size of data frame.
*/
__weak void MCP_ReceivedFrame(MCP_Handle_t *pHandle, uint8_t Code, uint8_t *buffer, uint8_t Size)
{
 8001eac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eae:	460c      	mov	r4, r1
 8001eb0:	b08d      	sub	sp, #52	; 0x34
 8001eb2:	4616      	mov	r6, r2
  bool RequireAck = true;
  bool bNoError = false; // Default is error
 8001eb4:	2100      	movs	r1, #0
  uint8_t bErrorCode;

  /* Protocol version >3.3 motor selection inside Frame ID */
  uint8_t bMotorSelection = (Code & 0xE0) >> 5; /* Mask: 1110|0000 */
  if (bMotorSelection != 0)
 8001eb6:	0962      	lsrs	r2, r4, #5
{
 8001eb8:	4605      	mov	r5, r0
 8001eba:	461f      	mov	r7, r3
  bool bNoError = false; // Default is error
 8001ebc:	f88d 1009 	strb.w	r1, [sp, #9]
  if (bMotorSelection != 0)
 8001ec0:	d122      	bne.n	8001f08 <MCP_ReceivedFrame+0x5c>
      Code = MC_PROTOCOL_CODE_NONE; /* Error */
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
    }
  }

  switch (Code)
 8001ec2:	2c1e      	cmp	r4, #30
 8001ec4:	d871      	bhi.n	8001faa <MCP_ReceivedFrame+0xfe>
 8001ec6:	e8df f014 	tbh	[pc, r4, lsl #1]
 8001eca:	0064      	.short	0x0064
 8001ecc:	019f02bb 	.word	0x019f02bb
 8001ed0:	0070018b 	.word	0x0070018b
 8001ed4:	01610070 	.word	0x01610070
 8001ed8:	0036014c 	.word	0x0036014c
 8001edc:	0119012a 	.word	0x0119012a
 8001ee0:	00e10102 	.word	0x00e10102
 8001ee4:	00bc00d1 	.word	0x00bc00d1
 8001ee8:	00700070 	.word	0x00700070
 8001eec:	00640070 	.word	0x00640070
 8001ef0:	007f009c 	.word	0x007f009c
 8001ef4:	00700070 	.word	0x00700070
 8001ef8:	00700070 	.word	0x00700070
 8001efc:	00700070 	.word	0x00700070
 8001f00:	00700070 	.word	0x00700070
 8001f04:	00760070 	.word	0x00760070
    if (UI_SetReg(&pHandle->_Super, MC_PROTOCOL_REG_TARGET_MOTOR, bMotorSelection - 1))
 8001f08:	3a01      	subs	r2, #1
 8001f0a:	f001 f979 	bl	8003200 <UI_SetReg>
 8001f0e:	b110      	cbz	r0, 8001f16 <MCP_ReceivedFrame+0x6a>
      Code &= 0x1F; /* Mask: 0001|1111 */
 8001f10:	f004 041f 	and.w	r4, r4, #31
 8001f14:	e7d5      	b.n	8001ec2 <MCP_ReceivedFrame+0x16>
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
 8001f16:	230b      	movs	r3, #11
    break;
  }

  if (RequireAck)
  {
    if (bNoError)
 8001f18:	f89d 0009 	ldrb.w	r0, [sp, #9]
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
 8001f1c:	f88d 300e 	strb.w	r3, [sp, #14]
    if (bNoError)
 8001f20:	2800      	cmp	r0, #0
 8001f22:	d13a      	bne.n	8001f9a <MCP_ReceivedFrame+0xee>
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
    }
    else
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_ERROR, &bErrorCode, 1);
 8001f24:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8001f28:	2301      	movs	r3, #1
 8001f2a:	f10d 020e 	add.w	r2, sp, #14
 8001f2e:	21ff      	movs	r1, #255	; 0xff
 8001f30:	47a0      	blx	r4
    }
  }
}
 8001f32:	b00d      	add	sp, #52	; 0x34
 8001f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
      UI_GetRevupData(&pHandle->_Super, buffer[0], &Durationms, &FinalMecSpeedUnit, &FinalTorque);
 8001f36:	f10d 000e 	add.w	r0, sp, #14
 8001f3a:	7831      	ldrb	r1, [r6, #0]
 8001f3c:	9000      	str	r0, [sp, #0]
 8001f3e:	ab03      	add	r3, sp, #12
 8001f40:	f10d 020a 	add.w	r2, sp, #10
 8001f44:	4628      	mov	r0, r5
 8001f46:	f001 fc77 	bl	8003838 <UI_GetRevupData>
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 8001f4a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
      outBuff[4] = (uint8_t)(FinalTorque);
 8001f4e:	f9bd 100e 	ldrsh.w	r1, [sp, #14]
      outBuff[6] = (uint8_t)(Durationms);
 8001f52:	f8bd 200a 	ldrh.w	r2, [sp, #10]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 8 );
 8001f56:	69ec      	ldr	r4, [r5, #28]
      outBuff[4] = (uint8_t)(FinalTorque);
 8001f58:	f88d 1014 	strb.w	r1, [sp, #20]
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 8001f5c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001f60:	005b      	lsls	r3, r3, #1
      outBuff[1] = (uint8_t)(rpm >> 8);
 8001f62:	1218      	asrs	r0, r3, #8
      outBuff[0] = (uint8_t)(rpm);
 8001f64:	f88d 3010 	strb.w	r3, [sp, #16]
      outBuff[1] = (uint8_t)(rpm >> 8);
 8001f68:	f88d 0011 	strb.w	r0, [sp, #17]
      outBuff[2] = (uint8_t)(rpm >> 16);
 8001f6c:	1418      	asrs	r0, r3, #16
      outBuff[3] = (uint8_t)(rpm >> 24);
 8001f6e:	161b      	asrs	r3, r3, #24
      outBuff[2] = (uint8_t)(rpm >> 16);
 8001f70:	f88d 0012 	strb.w	r0, [sp, #18]
      outBuff[3] = (uint8_t)(rpm >> 24);
 8001f74:	f88d 3013 	strb.w	r3, [sp, #19]
      outBuff[5] = (uint8_t)(FinalTorque >> 8);
 8001f78:	1208      	asrs	r0, r1, #8
      outBuff[7] = (uint8_t)(Durationms >> 8);
 8001f7a:	0a13      	lsrs	r3, r2, #8
 8001f7c:	f88d 3017 	strb.w	r3, [sp, #23]
      outBuff[5] = (uint8_t)(FinalTorque >> 8);
 8001f80:	f88d 0015 	strb.w	r0, [sp, #21]
      outBuff[6] = (uint8_t)(Durationms);
 8001f84:	f88d 2016 	strb.w	r2, [sp, #22]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 8 );
 8001f88:	2308      	movs	r3, #8
 8001f8a:	69a8      	ldr	r0, [r5, #24]
 8001f8c:	aa04      	add	r2, sp, #16
 8001f8e:	21f0      	movs	r1, #240	; 0xf0
 8001f90:	47a0      	blx	r4
    if (bNoError)
 8001f92:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8001f96:	2800      	cmp	r0, #0
 8001f98:	d0c4      	beq.n	8001f24 <MCP_ReceivedFrame+0x78>
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	21f0      	movs	r1, #240	; 0xf0
 8001fa4:	47a0      	blx	r4
}
 8001fa6:	b00d      	add	sp, #52	; 0x34
 8001fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      bErrorCode = ERROR_BAD_FRAME_ID;
 8001faa:	2301      	movs	r3, #1
    if (bNoError)
 8001fac:	f89d 0009 	ldrb.w	r0, [sp, #9]
      bErrorCode = ERROR_BAD_FRAME_ID;
 8001fb0:	f88d 300e 	strb.w	r3, [sp, #14]
  if (RequireAck)
 8001fb4:	e7b4      	b.n	8001f20 <MCP_ReceivedFrame+0x74>
    	switch(bSysID)
 8001fb6:	7833      	ldrb	r3, [r6, #0]
 8001fb8:	2b03      	cmp	r3, #3
 8001fba:	d8ea      	bhi.n	8001f92 <MCP_ReceivedFrame+0xe6>
 8001fbc:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001fc0:	039c03ac 	.word	0x039c03ac
 8001fc4:	03820393 	.word	0x03820393
      	bNoError = true;
 8001fc8:	2401      	movs	r4, #1
 8001fca:	f88d 4009 	strb.w	r4, [sp, #9]
      	FrameSentACK();
 8001fce:	f006 fda3 	bl	8008b18 <FrameSentACK>
      	POWER_PACKET_ACK();
 8001fd2:	f006 fd97 	bl	8008b04 <POWER_PACKET_ACK>
      	Stop_TxWaitTimer();
 8001fd6:	f006 fd73 	bl	8008ac0 <Stop_TxWaitTimer>
      	Stop_RetransmissionTimer();
 8001fda:	f006 fd5f 	bl	8008a9c <Stop_RetransmissionTimer>
      	int16_t throttle_IQ = buffer[4] + (buffer[5] << 8) + (buffer[6] << 16) + (buffer[7] << 24);
 8001fde:	7973      	ldrb	r3, [r6, #5]
 8001fe0:	7930      	ldrb	r0, [r6, #4]
 8001fe2:	eb00 2003 	add.w	r0, r0, r3, lsl #8
      	ESCOOTER_InputThrottleSignal(throttle_IQ);
 8001fe6:	b200      	sxth	r0, r0
 8001fe8:	f003 fbba 	bl	8005760 <ESCOOTER_InputThrottleSignal>
      	pHandle -> fFcpSend(pHandle->pFCP,ACK_NOERROR, &THROTTLE_SIGNAL_RECEIVED,1);
 8001fec:	4a81      	ldr	r2, [pc, #516]	; (80021f4 <MCP_ReceivedFrame+0x348>)
 8001fee:	4623      	mov	r3, r4
 8001ff0:	21f0      	movs	r1, #240	; 0xf0
 8001ff2:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8001ff6:	47a0      	blx	r4
      	TxWaitTimerStart();
 8001ff8:	f006 fd6e 	bl	8008ad8 <TxWaitTimerStart>
      	retransmissionTimerStart();
 8001ffc:	f006 fd5a 	bl	8008ab4 <retransmissionTimerStart>
  if (RequireAck)
 8002000:	e797      	b.n	8001f32 <MCP_ReceivedFrame+0x86>
      	uint16_t time_Ramp = buffer[8] + (buffer[9] << 8);
 8002002:	7a71      	ldrb	r1, [r6, #9]
 8002004:	7a32      	ldrb	r2, [r6, #8]
      	int16_t  max_Speed = buffer[4] + (buffer[5] << 8) + (buffer[6] << 16) + (buffer[7] << 24);
 8002006:	7973      	ldrb	r3, [r6, #5]
      	int16_t  max_IQ    = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8002008:	7830      	ldrb	r0, [r6, #0]
      	uint16_t time_Ramp = buffer[8] + (buffer[9] << 8);
 800200a:	eb02 2201 	add.w	r2, r2, r1, lsl #8
      	int16_t  max_Speed = buffer[4] + (buffer[5] << 8) + (buffer[6] << 16) + (buffer[7] << 24);
 800200e:	7931      	ldrb	r1, [r6, #4]
 8002010:	eb01 2103 	add.w	r1, r1, r3, lsl #8
      	int16_t  max_IQ    = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8002014:	7873      	ldrb	r3, [r6, #1]
 8002016:	eb00 2003 	add.w	r0, r0, r3, lsl #8
      	bNoError = true;
 800201a:	2401      	movs	r4, #1
      	ESCOOTER_DriveModeConfig(max_IQ,max_Speed,time_Ramp);
 800201c:	b292      	uxth	r2, r2
 800201e:	b209      	sxth	r1, r1
 8002020:	b200      	sxth	r0, r0
      	bNoError = true;
 8002022:	f88d 4009 	strb.w	r4, [sp, #9]
      	ESCOOTER_DriveModeConfig(max_IQ,max_Speed,time_Ramp);
 8002026:	f003 fb91 	bl	800574c <ESCOOTER_DriveModeConfig>
      	pHandle -> fFcpSend(pHandle->pFCP, ACK_NOERROR, &DRIVE_MODE_CONFIG_SUCCESS,1);
 800202a:	69ee      	ldr	r6, [r5, #28]
 800202c:	4a72      	ldr	r2, [pc, #456]	; (80021f8 <MCP_ReceivedFrame+0x34c>)
 800202e:	69a8      	ldr	r0, [r5, #24]
 8002030:	4623      	mov	r3, r4
 8002032:	21f0      	movs	r1, #240	; 0xf0
 8002034:	47b0      	blx	r6
      	HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_13);
 8002036:	4871      	ldr	r0, [pc, #452]	; (80021fc <MCP_ReceivedFrame+0x350>)
 8002038:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800203c:	f002 f8e2 	bl	8004204 <HAL_GPIO_TogglePin>
  if (RequireAck)
 8002040:	e777      	b.n	8001f32 <MCP_ReceivedFrame+0x86>
    	switch(bSysID)
 8002042:	7833      	ldrb	r3, [r6, #0]
 8002044:	2b06      	cmp	r3, #6
 8002046:	d8a4      	bhi.n	8001f92 <MCP_ReceivedFrame+0xe6>
 8002048:	a201      	add	r2, pc, #4	; (adr r2, 8002050 <MCP_ReceivedFrame+0x1a4>)
 800204a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800204e:	bf00      	nop
 8002050:	080027a3 	.word	0x080027a3
 8002054:	08002795 	.word	0x08002795
 8002058:	08002761 	.word	0x08002761
 800205c:	08001f33 	.word	0x08001f33
 8002060:	08001f33 	.word	0x08001f33
 8002064:	08001f33 	.word	0x08001f33
 8002068:	08001f33 	.word	0x08001f33
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 800206c:	7870      	ldrb	r0, [r6, #1]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 800206e:	7973      	ldrb	r3, [r6, #5]
 8002070:	7932      	ldrb	r2, [r6, #4]
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8002072:	7831      	ldrb	r1, [r6, #0]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8002074:	eb02 2203 	add.w	r2, r2, r3, lsl #8
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8002078:	eb01 2100 	add.w	r1, r1, r0, lsl #8
      bNoError = UI_ExecTorqueRamp(&pHandle->_Super, torque,duration);
 800207c:	b292      	uxth	r2, r2
 800207e:	b209      	sxth	r1, r1
 8002080:	4628      	mov	r0, r5
 8002082:	f001 fbcf 	bl	8003824 <UI_ExecTorqueRamp>
 8002086:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 800208a:	e749      	b.n	8001f20 <MCP_ReceivedFrame+0x74>
 800208c:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
 8002090:	ac04      	add	r4, sp, #16
 8002092:	3b01      	subs	r3, #1
 8002094:	4622      	mov	r2, r4
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 8002096:	2000      	movs	r0, #0
 8002098:	e004      	b.n	80020a4 <MCP_ReceivedFrame+0x1f8>
 800209a:	3001      	adds	r0, #1
 800209c:	2820      	cmp	r0, #32
        outBuff[i] = pHandle->s_fwVer[i];
 800209e:	f802 1b01 	strb.w	r1, [r2], #1
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 80020a2:	d00a      	beq.n	80020ba <MCP_ReceivedFrame+0x20e>
 80020a4:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80020a8:	b2c6      	uxtb	r6, r0
 80020aa:	2900      	cmp	r1, #0
 80020ac:	d1f5      	bne.n	800209a <MCP_ReceivedFrame+0x1ee>
        outBuff[i] = 0;
 80020ae:	f1c6 0220 	rsb	r2, r6, #32
 80020b2:	b2d2      	uxtb	r2, r2
 80020b4:	4420      	add	r0, r4
 80020b6:	f006 fec5 	bl	8008e44 <memset>
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 80020ba:	69ee      	ldr	r6, [r5, #28]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 80020bc:	69a8      	ldr	r0, [r5, #24]
 80020be:	2320      	movs	r3, #32
 80020c0:	4622      	mov	r2, r4
 80020c2:	21f0      	movs	r1, #240	; 0xf0
 80020c4:	47b0      	blx	r6
      bNoError = true;
 80020c6:	2301      	movs	r3, #1
 80020c8:	f88d 3009 	strb.w	r3, [sp, #9]
  if (RequireAck)
 80020cc:	e765      	b.n	8001f9a <MCP_ReceivedFrame+0xee>
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 80020ce:	4c4c      	ldr	r4, [pc, #304]	; (8002200 <MCP_ReceivedFrame+0x354>)
      stepList.data = buffer;
 80020d0:	9604      	str	r6, [sp, #16]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 80020d2:	230c      	movs	r3, #12
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 80020d4:	4621      	mov	r1, r4
 80020d6:	a804      	add	r0, sp, #16
      stepList.len = Size;
 80020d8:	f88d 7014 	strb.w	r7, [sp, #20]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 80020dc:	f88d 300e 	strb.w	r3, [sp, #14]
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 80020e0:	f001 fbf2 	bl	80038c8 <UI_GetMPInfo>
 80020e4:	f88d 0009 	strb.w	r0, [sp, #9]
      if (bNoError)
 80020e8:	2800      	cmp	r0, #0
 80020ea:	f43f af1b 	beq.w	8001f24 <MCP_ReceivedFrame+0x78>
        pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MPInfo.data, MPInfo.len);
 80020ee:	69ee      	ldr	r6, [r5, #28]
 80020f0:	7923      	ldrb	r3, [r4, #4]
 80020f2:	6822      	ldr	r2, [r4, #0]
 80020f4:	69a8      	ldr	r0, [r5, #24]
 80020f6:	21f0      	movs	r1, #240	; 0xf0
 80020f8:	47b0      	blx	r6
  if (RequireAck)
 80020fa:	e71a      	b.n	8001f32 <MCP_ReceivedFrame+0x86>
      hIdRef = buffer[2] + (buffer[3] << 8);
 80020fc:	78f3      	ldrb	r3, [r6, #3]
      hIqRef = buffer[0] + (buffer[1] << 8);
 80020fe:	7870      	ldrb	r0, [r6, #1]
      hIdRef = buffer[2] + (buffer[3] << 8);
 8002100:	78b2      	ldrb	r2, [r6, #2]
      hIqRef = buffer[0] + (buffer[1] << 8);
 8002102:	7831      	ldrb	r1, [r6, #0]
      hIdRef = buffer[2] + (buffer[3] << 8);
 8002104:	eb02 2203 	add.w	r2, r2, r3, lsl #8
      hIqRef = buffer[0] + (buffer[1] << 8);
 8002108:	eb01 2100 	add.w	r1, r1, r0, lsl #8
      UI_SetCurrentReferences(&pHandle->_Super, hIqRef, hIdRef);
 800210c:	b212      	sxth	r2, r2
 800210e:	b209      	sxth	r1, r1
 8002110:	4628      	mov	r0, r5
 8002112:	f001 fbcb 	bl	80038ac <UI_SetCurrentReferences>
      bNoError = true;
 8002116:	2301      	movs	r3, #1
 8002118:	f88d 3009 	strb.w	r3, [sp, #9]
  if (RequireAck)
 800211c:	e73d      	b.n	8001f9a <MCP_ReceivedFrame+0xee>
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 800211e:	78b1      	ldrb	r1, [r6, #2]
 8002120:	7873      	ldrb	r3, [r6, #1]
 8002122:	78f2      	ldrb	r2, [r6, #3]
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 8002124:	7970      	ldrb	r0, [r6, #5]
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8002126:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800212a:	7931      	ldrb	r1, [r6, #4]
 800212c:	eb03 4302 	add.w	r3, r3, r2, lsl #16
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 8002130:	4a34      	ldr	r2, [pc, #208]	; (8002204 <MCP_ReceivedFrame+0x358>)
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8002132:	eb03 6301 	add.w	r3, r3, r1, lsl #24
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 8002136:	fb82 1203 	smull	r1, r2, r2, r3
 800213a:	eba2 73e3 	sub.w	r3, r2, r3, asr #31
      hDurationms = buffer[7] + (buffer[8] << 8);
 800213e:	7a31      	ldrb	r1, [r6, #8]
 8002140:	79f2      	ldrb	r2, [r6, #7]
 8002142:	eb02 2201 	add.w	r2, r2, r1, lsl #8
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 8002146:	79b1      	ldrb	r1, [r6, #6]
 8002148:	eb00 2001 	add.w	r0, r0, r1, lsl #8
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 800214c:	b200      	sxth	r0, r0
 800214e:	7831      	ldrb	r1, [r6, #0]
 8002150:	9000      	str	r0, [sp, #0]
 8002152:	b21b      	sxth	r3, r3
 8002154:	b292      	uxth	r2, r2
 8002156:	4628      	mov	r0, r5
 8002158:	f001 fb8c 	bl	8003874 <UI_SetRevupData>
 800215c:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 8002160:	e6de      	b.n	8001f20 <MCP_ReceivedFrame+0x74>
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8002162:	7871      	ldrb	r1, [r6, #1]
 8002164:	7833      	ldrb	r3, [r6, #0]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8002166:	7970      	ldrb	r0, [r6, #5]
 8002168:	7932      	ldrb	r2, [r6, #4]
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 800216a:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800216e:	78b1      	ldrb	r1, [r6, #2]
 8002170:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 8002174:	78f1      	ldrb	r1, [r6, #3]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8002176:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      bNoError = UI_ExecSpeedRamp(&pHandle->_Super, rpm,duration);
 800217a:	eb03 6101 	add.w	r1, r3, r1, lsl #24
 800217e:	b292      	uxth	r2, r2
 8002180:	4628      	mov	r0, r5
 8002182:	f001 fb3d 	bl	8003800 <UI_ExecSpeedRamp>
 8002186:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 800218a:	e6c9      	b.n	8001f20 <MCP_ReceivedFrame+0x74>
        outBuff[i] = 0;
 800218c:	ac04      	add	r4, sp, #16
 800218e:	2100      	movs	r1, #0
 8002190:	2220      	movs	r2, #32
 8002192:	4620      	mov	r0, r4
 8002194:	f006 fe56 	bl	8008e44 <memset>
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 8002198:	f8d5 70a8 	ldr.w	r7, [r5, #168]	; 0xa8
 800219c:	f10d 0012 	add.w	r0, sp, #18
 80021a0:	1e79      	subs	r1, r7, #1
 80021a2:	2300      	movs	r3, #0
 80021a4:	e004      	b.n	80021b0 <MCP_ReceivedFrame+0x304>
 80021a6:	2b1d      	cmp	r3, #29
        outBuff[3+i] = pHandle->s_fwVer[i];
 80021a8:	f800 2f01 	strb.w	r2, [r0, #1]!
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 80021ac:	f000 8349 	beq.w	8002842 <MCP_ReceivedFrame+0x996>
 80021b0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80021b4:	2a09      	cmp	r2, #9
 80021b6:	b2de      	uxtb	r6, r3
 80021b8:	f103 0301 	add.w	r3, r3, #1
 80021bc:	d1f3      	bne.n	80021a6 <MCP_ReceivedFrame+0x2fa>
      outBuff[0] = pHandle->s_fwVer[i+5];
 80021be:	1d72      	adds	r2, r6, #5
      outBuff[1] = pHandle->s_fwVer[i+7];
 80021c0:	1df3      	adds	r3, r6, #7
      outBuff[2] = pHandle->s_fwVer[i+9];
 80021c2:	3609      	adds	r6, #9
      outBuff[0] = pHandle->s_fwVer[i+5];
 80021c4:	b2d2      	uxtb	r2, r2
      outBuff[1] = pHandle->s_fwVer[i+7];
 80021c6:	b2db      	uxtb	r3, r3
      outBuff[2] = pHandle->s_fwVer[i+9];
 80021c8:	b2f6      	uxtb	r6, r6
      outBuff[0] = pHandle->s_fwVer[i+5];
 80021ca:	5cba      	ldrb	r2, [r7, r2]
 80021cc:	f88d 2010 	strb.w	r2, [sp, #16]
      outBuff[1] = pHandle->s_fwVer[i+7];
 80021d0:	5cfb      	ldrb	r3, [r7, r3]
 80021d2:	f88d 3011 	strb.w	r3, [sp, #17]
      outBuff[2] = pHandle->s_fwVer[i+9];
 80021d6:	5dbb      	ldrb	r3, [r7, r6]
 80021d8:	f88d 3012 	strb.w	r3, [sp, #18]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 80021dc:	69ee      	ldr	r6, [r5, #28]
 80021de:	e76d      	b.n	80020bc <MCP_ReceivedFrame+0x210>
      bErrorCode = ERROR_CODE_WRONG_CMD;
 80021e0:	2307      	movs	r3, #7
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 80021e2:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_CMD;
 80021e4:	f88d 300e 	strb.w	r3, [sp, #14]
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 80021e8:	4628      	mov	r0, r5
 80021ea:	f001 facd 	bl	8003788 <UI_ExecCmd>
 80021ee:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 80021f2:	e695      	b.n	8001f20 <MCP_ReceivedFrame+0x74>
 80021f4:	2000056a 	.word	0x2000056a
 80021f8:	20000569 	.word	0x20000569
 80021fc:	40020400 	.word	0x40020400
 8002200:	20000b0c 	.word	0x20000b0c
 8002204:	2aaaaaab 	.word	0x2aaaaaab
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 8002208:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_GET_WRITE_ONLY;
 800220a:	2303      	movs	r3, #3
 800220c:	f88d 300e 	strb.w	r3, [sp, #14]
      switch (bRegID)
 8002210:	2988      	cmp	r1, #136	; 0x88
 8002212:	f63f aebe 	bhi.w	8001f92 <MCP_ReceivedFrame+0xe6>
 8002216:	a301      	add	r3, pc, #4	; (adr r3, 800221c <MCP_ReceivedFrame+0x370>)
 8002218:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 800221c:	080027d5 	.word	0x080027d5
 8002220:	08002735 	.word	0x08002735
 8002224:	080027d5 	.word	0x080027d5
 8002228:	080027d5 	.word	0x080027d5
 800222c:	08002735 	.word	0x08002735
 8002230:	08002679 	.word	0x08002679
 8002234:	08002679 	.word	0x08002679
 8002238:	08002679 	.word	0x08002679
 800223c:	08002679 	.word	0x08002679
 8002240:	08002679 	.word	0x08002679
 8002244:	08002679 	.word	0x08002679
 8002248:	08002679 	.word	0x08002679
 800224c:	08002679 	.word	0x08002679
 8002250:	08002679 	.word	0x08002679
 8002254:	08002679 	.word	0x08002679
 8002258:	08002679 	.word	0x08002679
 800225c:	08002679 	.word	0x08002679
 8002260:	08002679 	.word	0x08002679
 8002264:	08002679 	.word	0x08002679
 8002268:	08002679 	.word	0x08002679
 800226c:	08002679 	.word	0x08002679
 8002270:	08002679 	.word	0x08002679
 8002274:	08002679 	.word	0x08002679
 8002278:	08002679 	.word	0x08002679
 800227c:	08002679 	.word	0x08002679
 8002280:	08002679 	.word	0x08002679
 8002284:	08002679 	.word	0x08002679
 8002288:	08002679 	.word	0x08002679
 800228c:	08001f93 	.word	0x08001f93
 8002290:	08001f93 	.word	0x08001f93
 8002294:	08002735 	.word	0x08002735
 8002298:	08002679 	.word	0x08002679
 800229c:	08002679 	.word	0x08002679
 80022a0:	08002679 	.word	0x08002679
 80022a4:	080027d5 	.word	0x080027d5
 80022a8:	08001f93 	.word	0x08001f93
 80022ac:	08001f93 	.word	0x08001f93
 80022b0:	08001f93 	.word	0x08001f93
 80022b4:	08001f93 	.word	0x08001f93
 80022b8:	08001f93 	.word	0x08001f93
 80022bc:	08001f93 	.word	0x08001f93
 80022c0:	08001f93 	.word	0x08001f93
 80022c4:	08001f93 	.word	0x08001f93
 80022c8:	08001f93 	.word	0x08001f93
 80022cc:	08001f93 	.word	0x08001f93
 80022d0:	08001f93 	.word	0x08001f93
 80022d4:	08001f93 	.word	0x08001f93
 80022d8:	08001f93 	.word	0x08001f93
 80022dc:	08001f93 	.word	0x08001f93
 80022e0:	08001f93 	.word	0x08001f93
 80022e4:	08001f93 	.word	0x08001f93
 80022e8:	08001f93 	.word	0x08001f93
 80022ec:	08001f93 	.word	0x08001f93
 80022f0:	08001f93 	.word	0x08001f93
 80022f4:	08001f93 	.word	0x08001f93
 80022f8:	08001f93 	.word	0x08001f93
 80022fc:	08001f93 	.word	0x08001f93
 8002300:	08001f93 	.word	0x08001f93
 8002304:	08001f93 	.word	0x08001f93
 8002308:	08001f93 	.word	0x08001f93
 800230c:	08001f93 	.word	0x08001f93
 8002310:	08001f93 	.word	0x08001f93
 8002314:	08001f93 	.word	0x08001f93
 8002318:	08001f93 	.word	0x08001f93
 800231c:	08001f93 	.word	0x08001f93
 8002320:	08002679 	.word	0x08002679
 8002324:	08001f93 	.word	0x08001f93
 8002328:	08001f93 	.word	0x08001f93
 800232c:	08001f93 	.word	0x08001f93
 8002330:	08001f93 	.word	0x08001f93
 8002334:	08002735 	.word	0x08002735
 8002338:	08002735 	.word	0x08002735
 800233c:	08002735 	.word	0x08002735
 8002340:	08002679 	.word	0x08002679
 8002344:	08002679 	.word	0x08002679
 8002348:	08002679 	.word	0x08002679
 800234c:	08002679 	.word	0x08002679
 8002350:	080027d5 	.word	0x080027d5
 8002354:	08002735 	.word	0x08002735
 8002358:	08002679 	.word	0x08002679
 800235c:	08002679 	.word	0x08002679
 8002360:	08002679 	.word	0x08002679
 8002364:	08002679 	.word	0x08002679
 8002368:	08002679 	.word	0x08002679
 800236c:	08002679 	.word	0x08002679
 8002370:	08002679 	.word	0x08002679
 8002374:	08002679 	.word	0x08002679
 8002378:	08002679 	.word	0x08002679
 800237c:	08002679 	.word	0x08002679
 8002380:	08002679 	.word	0x08002679
 8002384:	080027d5 	.word	0x080027d5
 8002388:	08002735 	.word	0x08002735
 800238c:	08001f93 	.word	0x08001f93
 8002390:	08002679 	.word	0x08002679
 8002394:	08002679 	.word	0x08002679
 8002398:	08002679 	.word	0x08002679
 800239c:	08002679 	.word	0x08002679
 80023a0:	08002679 	.word	0x08002679
 80023a4:	08001f93 	.word	0x08001f93
 80023a8:	08001f93 	.word	0x08001f93
 80023ac:	08002679 	.word	0x08002679
 80023b0:	08002679 	.word	0x08002679
 80023b4:	080027d5 	.word	0x080027d5
 80023b8:	080027d5 	.word	0x080027d5
 80023bc:	08002735 	.word	0x08002735
 80023c0:	08002735 	.word	0x08002735
 80023c4:	08002735 	.word	0x08002735
 80023c8:	08002735 	.word	0x08002735
 80023cc:	08002735 	.word	0x08002735
 80023d0:	080027d5 	.word	0x080027d5
 80023d4:	08002679 	.word	0x08002679
 80023d8:	08002679 	.word	0x08002679
 80023dc:	08002735 	.word	0x08002735
 80023e0:	08001f93 	.word	0x08001f93
 80023e4:	08002679 	.word	0x08002679
 80023e8:	08002679 	.word	0x08002679
 80023ec:	080027d5 	.word	0x080027d5
 80023f0:	08002735 	.word	0x08002735
 80023f4:	08002735 	.word	0x08002735
 80023f8:	08002735 	.word	0x08002735
 80023fc:	08002735 	.word	0x08002735
 8002400:	08002735 	.word	0x08002735
 8002404:	08002735 	.word	0x08002735
 8002408:	08002735 	.word	0x08002735
 800240c:	08002735 	.word	0x08002735
 8002410:	08002735 	.word	0x08002735
 8002414:	08002735 	.word	0x08002735
 8002418:	08002735 	.word	0x08002735
 800241c:	080027d5 	.word	0x080027d5
 8002420:	08001f93 	.word	0x08001f93
 8002424:	080027d5 	.word	0x080027d5
 8002428:	080027fb 	.word	0x080027fb
 800242c:	080027fb 	.word	0x080027fb
 8002430:	080027fb 	.word	0x080027fb
 8002434:	08002679 	.word	0x08002679
 8002438:	08002679 	.word	0x08002679
 800243c:	08002679 	.word	0x08002679
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 8002440:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_SET;
 8002442:	2305      	movs	r3, #5
 8002444:	f88d 300e 	strb.w	r3, [sp, #14]
      switch (bRegID)
 8002448:	2988      	cmp	r1, #136	; 0x88
 800244a:	f200 812b 	bhi.w	80026a4 <MCP_ReceivedFrame+0x7f8>
 800244e:	a301      	add	r3, pc, #4	; (adr r3, 8002454 <MCP_ReceivedFrame+0x5a8>)
 8002450:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8002454:	08002831 	.word	0x08002831
 8002458:	080026a5 	.word	0x080026a5
 800245c:	080026a5 	.word	0x080026a5
 8002460:	08002821 	.word	0x08002821
 8002464:	080026a5 	.word	0x080026a5
 8002468:	080026b1 	.word	0x080026b1
 800246c:	080026b1 	.word	0x080026b1
 8002470:	080026b1 	.word	0x080026b1
 8002474:	080026b1 	.word	0x080026b1
 8002478:	080026b1 	.word	0x080026b1
 800247c:	080026b1 	.word	0x080026b1
 8002480:	080026b1 	.word	0x080026b1
 8002484:	080026b1 	.word	0x080026b1
 8002488:	080026b1 	.word	0x080026b1
 800248c:	080026b1 	.word	0x080026b1
 8002490:	080026b1 	.word	0x080026b1
 8002494:	080027b3 	.word	0x080027b3
 8002498:	080027b3 	.word	0x080027b3
 800249c:	080026a5 	.word	0x080026a5
 80024a0:	080026a5 	.word	0x080026a5
 80024a4:	080026b1 	.word	0x080026b1
 80024a8:	080026b1 	.word	0x080026b1
 80024ac:	080026b1 	.word	0x080026b1
 80024b0:	080026b1 	.word	0x080026b1
 80024b4:	080026b1 	.word	0x080026b1
 80024b8:	080026a5 	.word	0x080026a5
 80024bc:	080026a5 	.word	0x080026a5
 80024c0:	080026a5 	.word	0x080026a5
 80024c4:	080020c7 	.word	0x080020c7
 80024c8:	080020c7 	.word	0x080020c7
 80024cc:	080026a5 	.word	0x080026a5
 80024d0:	080026a5 	.word	0x080026a5
 80024d4:	080026a5 	.word	0x080026a5
 80024d8:	080026a5 	.word	0x080026a5
 80024dc:	080026a5 	.word	0x080026a5
 80024e0:	080026a5 	.word	0x080026a5
 80024e4:	080026a5 	.word	0x080026a5
 80024e8:	080026a5 	.word	0x080026a5
 80024ec:	080026a5 	.word	0x080026a5
 80024f0:	080026a5 	.word	0x080026a5
 80024f4:	080026a5 	.word	0x080026a5
 80024f8:	080026a5 	.word	0x080026a5
 80024fc:	080026a5 	.word	0x080026a5
 8002500:	080026a5 	.word	0x080026a5
 8002504:	080026a5 	.word	0x080026a5
 8002508:	080026a5 	.word	0x080026a5
 800250c:	080026a5 	.word	0x080026a5
 8002510:	080026a5 	.word	0x080026a5
 8002514:	080026a5 	.word	0x080026a5
 8002518:	080026a5 	.word	0x080026a5
 800251c:	080026a5 	.word	0x080026a5
 8002520:	080026a5 	.word	0x080026a5
 8002524:	080026a5 	.word	0x080026a5
 8002528:	080026a5 	.word	0x080026a5
 800252c:	080026a5 	.word	0x080026a5
 8002530:	080026a5 	.word	0x080026a5
 8002534:	080026a5 	.word	0x080026a5
 8002538:	080026a5 	.word	0x080026a5
 800253c:	080026a5 	.word	0x080026a5
 8002540:	080026a5 	.word	0x080026a5
 8002544:	080026a5 	.word	0x080026a5
 8002548:	080026a5 	.word	0x080026a5
 800254c:	080026a5 	.word	0x080026a5
 8002550:	080026a5 	.word	0x080026a5
 8002554:	080026a5 	.word	0x080026a5
 8002558:	080026b1 	.word	0x080026b1
 800255c:	080026a5 	.word	0x080026a5
 8002560:	080026a5 	.word	0x080026a5
 8002564:	080026a5 	.word	0x080026a5
 8002568:	080026a5 	.word	0x080026a5
 800256c:	080027b3 	.word	0x080027b3
 8002570:	080027b3 	.word	0x080027b3
 8002574:	080027b3 	.word	0x080027b3
 8002578:	080026a5 	.word	0x080026a5
 800257c:	080026a5 	.word	0x080026a5
 8002580:	080026a5 	.word	0x080026a5
 8002584:	080026a5 	.word	0x080026a5
 8002588:	080026a5 	.word	0x080026a5
 800258c:	080026a5 	.word	0x080026a5
 8002590:	080026b1 	.word	0x080026b1
 8002594:	080026a5 	.word	0x080026a5
 8002598:	080026a5 	.word	0x080026a5
 800259c:	080026a5 	.word	0x080026a5
 80025a0:	080026b1 	.word	0x080026b1
 80025a4:	080026b1 	.word	0x080026b1
 80025a8:	080026b1 	.word	0x080026b1
 80025ac:	080026b1 	.word	0x080026b1
 80025b0:	080026b1 	.word	0x080026b1
 80025b4:	080026b1 	.word	0x080026b1
 80025b8:	080026b1 	.word	0x080026b1
 80025bc:	080026a5 	.word	0x080026a5
 80025c0:	080027b3 	.word	0x080027b3
 80025c4:	080026a5 	.word	0x080026a5
 80025c8:	080026a5 	.word	0x080026a5
 80025cc:	080026a5 	.word	0x080026a5
 80025d0:	080026a5 	.word	0x080026a5
 80025d4:	080026a5 	.word	0x080026a5
 80025d8:	080026b1 	.word	0x080026b1
 80025dc:	080026a5 	.word	0x080026a5
 80025e0:	080026a5 	.word	0x080026a5
 80025e4:	080026b1 	.word	0x080026b1
 80025e8:	080026b1 	.word	0x080026b1
 80025ec:	080026a5 	.word	0x080026a5
 80025f0:	080026a5 	.word	0x080026a5
 80025f4:	080026a5 	.word	0x080026a5
 80025f8:	080026a5 	.word	0x080026a5
 80025fc:	080026a5 	.word	0x080026a5
 8002600:	080026a5 	.word	0x080026a5
 8002604:	080026a5 	.word	0x080026a5
 8002608:	080026a5 	.word	0x080026a5
 800260c:	080026a5 	.word	0x080026a5
 8002610:	080026a5 	.word	0x080026a5
 8002614:	080026a5 	.word	0x080026a5
 8002618:	080026a5 	.word	0x080026a5
 800261c:	080026a5 	.word	0x080026a5
 8002620:	080026a5 	.word	0x080026a5
 8002624:	08002821 	.word	0x08002821
 8002628:	080027b3 	.word	0x080027b3
 800262c:	080027b3 	.word	0x080027b3
 8002630:	080027b3 	.word	0x080027b3
 8002634:	080027b3 	.word	0x080027b3
 8002638:	080027b3 	.word	0x080027b3
 800263c:	080026a5 	.word	0x080026a5
 8002640:	080026a5 	.word	0x080026a5
 8002644:	080026a5 	.word	0x080026a5
 8002648:	080027b3 	.word	0x080027b3
 800264c:	080027b3 	.word	0x080027b3
 8002650:	080026a5 	.word	0x080026a5
 8002654:	080026a5 	.word	0x080026a5
 8002658:	080026a5 	.word	0x080026a5
 800265c:	080026a5 	.word	0x080026a5
 8002660:	080026a5 	.word	0x080026a5
 8002664:	080026a5 	.word	0x080026a5
 8002668:	080026a5 	.word	0x080026a5
 800266c:	080026b1 	.word	0x080026b1
 8002670:	080026b1 	.word	0x080026b1
 8002674:	080026b1 	.word	0x080026b1
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8002678:	f10d 0209 	add.w	r2, sp, #9
 800267c:	4628      	mov	r0, r5
 800267e:	f000 fe7f 	bl	8003380 <UI_GetReg>
          if ( bNoError == true )
 8002682:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8002686:	9004      	str	r0, [sp, #16]
          if ( bNoError == true )
 8002688:	2b00      	cmp	r3, #0
 800268a:	f43f ac4b 	beq.w	8001f24 <MCP_ReceivedFrame+0x78>
        	FrameSentACK();
 800268e:	f006 fa43 	bl	8008b18 <FrameSentACK>
        	POWER_PACKET_ACK();
 8002692:	f006 fa37 	bl	8008b04 <POWER_PACKET_ACK>
        	Stop_TxWaitTimer();
 8002696:	f006 fa13 	bl	8008ac0 <Stop_TxWaitTimer>
        	Stop_RetransmissionTimer();
 800269a:	f006 f9ff 	bl	8008a9c <Stop_RetransmissionTimer>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 2);
 800269e:	2302      	movs	r3, #2
 80026a0:	aa04      	add	r2, sp, #16
 80026a2:	e4a5      	b.n	8001ff0 <MCP_ReceivedFrame+0x144>
          bErrorCode = ERROR_CODE_SET_READ_ONLY;
 80026a4:	2302      	movs	r3, #2
    if (bNoError)
 80026a6:	f89d 0009 	ldrb.w	r0, [sp, #9]
          bErrorCode = ERROR_CODE_SET_READ_ONLY;
 80026aa:	f88d 300e 	strb.w	r3, [sp, #14]
  if (RequireAck)
 80026ae:	e437      	b.n	8001f20 <MCP_ReceivedFrame+0x74>
          int32_t wValue = buffer[1] + (buffer[2] << 8);
 80026b0:	78b2      	ldrb	r2, [r6, #2]
 80026b2:	7873      	ldrb	r3, [r6, #1]
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 80026b4:	4628      	mov	r0, r5
 80026b6:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 80026ba:	f000 fda1 	bl	8003200 <UI_SetReg>
 80026be:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 80026c2:	e42d      	b.n	8001f20 <MCP_ReceivedFrame+0x74>
               bNoError = true;
 80026c4:	2301      	movs	r3, #1
               pHandle -> fFcpSend(pHandle->pFCP, ACK_NOERROR, &debug_torque_output,1);
 80026c6:	69ec      	ldr	r4, [r5, #28]
 80026c8:	4a60      	ldr	r2, [pc, #384]	; (800284c <MCP_ReceivedFrame+0x9a0>)
 80026ca:	69a8      	ldr	r0, [r5, #24]
               bNoError = true;
 80026cc:	f88d 3009 	strb.w	r3, [sp, #9]
               pHandle -> fFcpSend(pHandle->pFCP, ACK_NOERROR, &debug_torque_output,1);
 80026d0:	21f0      	movs	r1, #240	; 0xf0
 80026d2:	47a0      	blx	r4
               ESCOOTER_DriveModeConfig(11450,480,3000);
 80026d4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80026d8:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80026dc:	f642 40ba 	movw	r0, #11450	; 0x2cba
 80026e0:	f003 f834 	bl	800574c <ESCOOTER_DriveModeConfig>
  if (RequireAck)
 80026e4:	e425      	b.n	8001f32 <MCP_ReceivedFrame+0x86>
    		   bNoError = true;
 80026e6:	2301      	movs	r3, #1
    		   pHandle -> fFcpSend(pHandle->pFCP, ACK_NOERROR,&release_Brake,1);
 80026e8:	69ec      	ldr	r4, [r5, #28]
 80026ea:	4a59      	ldr	r2, [pc, #356]	; (8002850 <MCP_ReceivedFrame+0x9a4>)
 80026ec:	69a8      	ldr	r0, [r5, #24]
    		   bNoError = true;
 80026ee:	f88d 3009 	strb.w	r3, [sp, #9]
    		   pHandle -> fFcpSend(pHandle->pFCP, ACK_NOERROR,&release_Brake,1);
 80026f2:	21f0      	movs	r1, #240	; 0xf0
 80026f4:	47a0      	blx	r4
  if (RequireAck)
 80026f6:	e41c      	b.n	8001f32 <MCP_ReceivedFrame+0x86>
              bNoError = true;
 80026f8:	2401      	movs	r4, #1
              pHandle -> fFcpSend(pHandle->pFCP, ACK_NOERROR,&BRAKE_SIGNAL_RECEIVED,1);
 80026fa:	e9d5 0606 	ldrd	r0, r6, [r5, #24]
 80026fe:	4a55      	ldr	r2, [pc, #340]	; (8002854 <MCP_ReceivedFrame+0x9a8>)
              bNoError = true;
 8002700:	f88d 4009 	strb.w	r4, [sp, #9]
              pHandle -> fFcpSend(pHandle->pFCP, ACK_NOERROR,&BRAKE_SIGNAL_RECEIVED,1);
 8002704:	4623      	mov	r3, r4
 8002706:	21f0      	movs	r1, #240	; 0xf0
 8002708:	47b0      	blx	r6
              HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,GPIO_PIN_SET);
 800270a:	4853      	ldr	r0, [pc, #332]	; (8002858 <MCP_ReceivedFrame+0x9ac>)
 800270c:	4622      	mov	r2, r4
 800270e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002712:	f001 fd73 	bl	80041fc <HAL_GPIO_WritePin>
  if (RequireAck)
 8002716:	e40c      	b.n	8001f32 <MCP_ReceivedFrame+0x86>
               bNoError = true;
 8002718:	2301      	movs	r3, #1
               pHandle -> fFcpSend(pHandle->pFCP, ACK_NOERROR,&THROTTLE_SIGNAL_RECEIVED,1);
 800271a:	69ec      	ldr	r4, [r5, #28]
 800271c:	4a4f      	ldr	r2, [pc, #316]	; (800285c <MCP_ReceivedFrame+0x9b0>)
 800271e:	69a8      	ldr	r0, [r5, #24]
               bNoError = true;
 8002720:	f88d 3009 	strb.w	r3, [sp, #9]
               pHandle -> fFcpSend(pHandle->pFCP, ACK_NOERROR,&THROTTLE_SIGNAL_RECEIVED,1);
 8002724:	21f0      	movs	r1, #240	; 0xf0
 8002726:	47a0      	blx	r4
               ESCOOTER_InputThrottleSignal(7600);
 8002728:	f641 50b0 	movw	r0, #7600	; 0x1db0
 800272c:	f003 f818 	bl	8005760 <ESCOOTER_InputThrottleSignal>
  if (RequireAck)
 8002730:	f7ff bbff 	b.w	8001f32 <MCP_ReceivedFrame+0x86>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8002734:	f10d 0209 	add.w	r2, sp, #9
 8002738:	4628      	mov	r0, r5
 800273a:	f000 fe21 	bl	8003380 <UI_GetReg>
          if ( bNoError == true )
 800273e:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8002742:	9004      	str	r0, [sp, #16]
          if ( bNoError == true )
 8002744:	2b00      	cmp	r3, #0
 8002746:	f43f abed 	beq.w	8001f24 <MCP_ReceivedFrame+0x78>
          	FrameSentACK();
 800274a:	f006 f9e5 	bl	8008b18 <FrameSentACK>
          	POWER_PACKET_ACK();
 800274e:	f006 f9d9 	bl	8008b04 <POWER_PACKET_ACK>
          	Stop_TxWaitTimer();
 8002752:	f006 f9b5 	bl	8008ac0 <Stop_TxWaitTimer>
          	Stop_RetransmissionTimer();
 8002756:	f006 f9a1 	bl	8008a9c <Stop_RetransmissionTimer>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 4);
 800275a:	2304      	movs	r3, #4
 800275c:	aa04      	add	r2, sp, #16
 800275e:	e447      	b.n	8001ff0 <MCP_ReceivedFrame+0x144>
                bNoError = true;
 8002760:	2401      	movs	r4, #1
                uint8_t heartbeat = 0x20;
 8002762:	2620      	movs	r6, #32
                bNoError = true;
 8002764:	f88d 4009 	strb.w	r4, [sp, #9]
                FrameSentACK();
 8002768:	f006 f9d6 	bl	8008b18 <FrameSentACK>
                POWER_PACKET_ACK();
 800276c:	f006 f9ca 	bl	8008b04 <POWER_PACKET_ACK>
                Stop_RetransmissionTimer();
 8002770:	f006 f994 	bl	8008a9c <Stop_RetransmissionTimer>
              	Stop_TxWaitTimer();
 8002774:	f006 f9a4 	bl	8008ac0 <Stop_TxWaitTimer>
                pHandle -> fFcpSend(pHandle->pFCP, ACK_NOERROR,&heartbeat,1);
 8002778:	4623      	mov	r3, r4
 800277a:	aa04      	add	r2, sp, #16
 800277c:	21f0      	movs	r1, #240	; 0xf0
 800277e:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
                uint8_t heartbeat = 0x20;
 8002782:	f88d 6010 	strb.w	r6, [sp, #16]
                pHandle -> fFcpSend(pHandle->pFCP, ACK_NOERROR,&heartbeat,1);
 8002786:	47a0      	blx	r4
                retransmissionTimerStart();
 8002788:	f006 f994 	bl	8008ab4 <retransmissionTimerStart>
              	TxWaitTimerStart();
 800278c:	f006 f9a4 	bl	8008ad8 <TxWaitTimerStart>
  if (RequireAck)
 8002790:	f7ff bbcf 	b.w	8001f32 <MCP_ReceivedFrame+0x86>
    	    	uint8_t BRAKE_SIGNAL_RECEIVED = 0x06;
 8002794:	2306      	movs	r3, #6
 8002796:	f88d 3010 	strb.w	r3, [sp, #16]
    	    	pHandle -> fFcpSend(pHandle->pFCP, ACK_NOERROR,&BRAKE_SIGNAL_RECEIVED,1);
 800279a:	69ec      	ldr	r4, [r5, #28]
 800279c:	2301      	movs	r3, #1
 800279e:	f7ff bbf4 	b.w	8001f8a <MCP_ReceivedFrame+0xde>
                 bNoError = true;
 80027a2:	2301      	movs	r3, #1
                 POWER_CHANGE_STATE(POWER_OFF);
 80027a4:	2000      	movs	r0, #0
                 bNoError = true;
 80027a6:	f88d 3009 	strb.w	r3, [sp, #9]
                 POWER_CHANGE_STATE(POWER_OFF);
 80027aa:	f006 f971 	bl	8008a90 <POWER_CHANGE_STATE>
  if (RequireAck)
 80027ae:	f7ff bbc0 	b.w	8001f32 <MCP_ReceivedFrame+0x86>
          int32_t wValue = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 80027b2:	78b2      	ldrb	r2, [r6, #2]
 80027b4:	7873      	ldrb	r3, [r6, #1]
 80027b6:	78f0      	ldrb	r0, [r6, #3]
 80027b8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80027bc:	7932      	ldrb	r2, [r6, #4]
 80027be:	eb03 4300 	add.w	r3, r3, r0, lsl #16
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 80027c2:	eb03 6202 	add.w	r2, r3, r2, lsl #24
 80027c6:	4628      	mov	r0, r5
 80027c8:	f000 fd1a 	bl	8003200 <UI_SetReg>
 80027cc:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 80027d0:	f7ff bba6 	b.w	8001f20 <MCP_ReceivedFrame+0x74>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 80027d4:	f10d 0209 	add.w	r2, sp, #9
 80027d8:	4628      	mov	r0, r5
 80027da:	f000 fdd1 	bl	8003380 <UI_GetReg>
           if ( bNoError == true )
 80027de:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 80027e2:	9004      	str	r0, [sp, #16]
           if ( bNoError == true )
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f43f ab9d 	beq.w	8001f24 <MCP_ReceivedFrame+0x78>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 80027ea:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 80027ee:	2301      	movs	r3, #1
 80027f0:	aa04      	add	r2, sp, #16
 80027f2:	21f0      	movs	r1, #240	; 0xf0
 80027f4:	47a0      	blx	r4
  if (RequireAck)
 80027f6:	f7ff bb9c 	b.w	8001f32 <MCP_ReceivedFrame+0x86>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 80027fa:	f10d 0209 	add.w	r2, sp, #9
 80027fe:	4628      	mov	r0, r5
 8002800:	f000 fdbe 	bl	8003380 <UI_GetReg>
          if ( bNoError == true )
 8002804:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8002808:	9004      	str	r0, [sp, #16]
          if ( bNoError == true )
 800280a:	2b00      	cmp	r3, #0
 800280c:	f43f ab8a 	beq.w	8001f24 <MCP_ReceivedFrame+0x78>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 4);
 8002810:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8002814:	2304      	movs	r3, #4
 8002816:	aa04      	add	r2, sp, #16
 8002818:	21f0      	movs	r1, #240	; 0xf0
 800281a:	47a0      	blx	r4
  if (RequireAck)
 800281c:	f7ff bb89 	b.w	8001f32 <MCP_ReceivedFrame+0x86>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, (int32_t)(buffer[1]));
 8002820:	7872      	ldrb	r2, [r6, #1]
 8002822:	4628      	mov	r0, r5
 8002824:	f000 fcec 	bl	8003200 <UI_SetReg>
 8002828:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 800282c:	f7ff bb78 	b.w	8001f20 <MCP_ReceivedFrame+0x74>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8002830:	7872      	ldrb	r2, [r6, #1]
 8002832:	2100      	movs	r1, #0
 8002834:	4628      	mov	r0, r5
 8002836:	f000 fce3 	bl	8003200 <UI_SetReg>
 800283a:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 800283e:	f7ff bb6f 	b.w	8001f20 <MCP_ReceivedFrame+0x74>
 8002842:	2626      	movs	r6, #38	; 0x26
 8002844:	2324      	movs	r3, #36	; 0x24
 8002846:	2222      	movs	r2, #34	; 0x22
 8002848:	e4bf      	b.n	80021ca <MCP_ReceivedFrame+0x31e>
 800284a:	bf00      	nop
 800284c:	2000056b 	.word	0x2000056b
 8002850:	2000056c 	.word	0x2000056c
 8002854:	20000568 	.word	0x20000568
 8002858:	40020400 	.word	0x40020400
 800285c:	2000056a 	.word	0x2000056a

08002860 <MCP_WaitNextFrame>:
{
 8002860:	b510      	push	{r4, lr}
 8002862:	4604      	mov	r4, r0
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 8002864:	6980      	ldr	r0, [r0, #24]
 8002866:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002868:	4798      	blx	r3
  pHandle->BufferSize = FCP_MAX_PAYLOAD_SIZE;
 800286a:	2280      	movs	r2, #128	; 0x80
 800286c:	f884 20ac 	strb.w	r2, [r4, #172]	; 0xac
  pHandle->fFcpReceive(pHandle->pFCP);
 8002870:	6a23      	ldr	r3, [r4, #32]
 8002872:	69a0      	ldr	r0, [r4, #24]
}
 8002874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pHandle->fFcpReceive(pHandle->pFCP);
 8002878:	4718      	bx	r3
 800287a:	bf00      	nop

0800287c <MCP_Init>:
{
 800287c:	b570      	push	{r4, r5, r6, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	4604      	mov	r4, r0
 8002882:	461d      	mov	r5, r3
 8002884:	9b07      	ldr	r3, [sp, #28]
  pHandle->s_fwVer = s_fwVer;
 8002886:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
  FCP_SetClient( pFCP, pHandle,
 800288a:	4b09      	ldr	r3, [pc, #36]	; (80028b0 <MCP_Init+0x34>)
  pHandle->pFCP = pFCP;
 800288c:	61a1      	str	r1, [r4, #24]
{
 800288e:	4608      	mov	r0, r1
 8002890:	4616      	mov	r6, r2
  FCP_SetClient( pFCP, pHandle,
 8002892:	9300      	str	r3, [sp, #0]
 8002894:	4a07      	ldr	r2, [pc, #28]	; (80028b4 <MCP_Init+0x38>)
 8002896:	4b08      	ldr	r3, [pc, #32]	; (80028b8 <MCP_Init+0x3c>)
 8002898:	4621      	mov	r1, r4
 800289a:	f004 f967 	bl	8006b6c <FCP_SetClient>
  pHandle->fFcpAbortReceive = fFcpAbortReceive;
 800289e:	9b06      	ldr	r3, [sp, #24]
 80028a0:	6263      	str	r3, [r4, #36]	; 0x24
  pHandle->fFcpReceive = fFcpReceive;
 80028a2:	e9c4 6507 	strd	r6, r5, [r4, #28]
  MCP_WaitNextFrame(pHandle);
 80028a6:	4620      	mov	r0, r4
 80028a8:	f7ff ffda 	bl	8002860 <MCP_WaitNextFrame>
}
 80028ac:	b002      	add	sp, #8
 80028ae:	bd70      	pop	{r4, r5, r6, pc}
 80028b0:	080028bd 	.word	0x080028bd
 80028b4:	080028c5 	.word	0x080028c5
 80028b8:	08001ead 	.word	0x08001ead

080028bc <MCP_OnTimeOut>:
{
 80028bc:	b508      	push	{r3, lr}
     MCP_WaitNextFrame(pHandle);
 80028be:	f7ff ffcf 	bl	8002860 <MCP_WaitNextFrame>
}
 80028c2:	bd08      	pop	{r3, pc}

080028c4 <MCP_SentFrame>:
{
 80028c4:	b508      	push	{r3, lr}
    MCP_WaitNextFrame(pHandle);
 80028c6:	f7ff ffcb 	bl	8002860 <MCP_WaitNextFrame>
}
 80028ca:	bd08      	pop	{r3, pc}

080028cc <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 80028cc:	b500      	push	{lr}
  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI,pMCT);
 80028ce:	4b0a      	ldr	r3, [pc, #40]	; (80028f8 <MX_MotorControl_Init+0x2c>)
 80028d0:	4a0a      	ldr	r2, [pc, #40]	; (80028fc <MX_MotorControl_Init+0x30>)
{
 80028d2:	b083      	sub	sp, #12
  MCboot(pMCI,pMCT);
 80028d4:	4619      	mov	r1, r3
 80028d6:	4610      	mov	r0, r2
 80028d8:	f7fe ff6e 	bl	80017b8 <MCboot>
  mc_lock_pins();
 80028dc:	f7ff fa6a 	bl	8001db4 <mc_lock_pins>

  /* Initialize the MC User Interface */
  UI_TaskInit(wConfig,NBR_OF_MOTORS,pMCI,pMCT,s_fwVer);
 80028e0:	4907      	ldr	r1, [pc, #28]	; (8002900 <MX_MotorControl_Init+0x34>)
 80028e2:	9100      	str	r1, [sp, #0]
 80028e4:	4807      	ldr	r0, [pc, #28]	; (8002904 <MX_MotorControl_Init+0x38>)
 80028e6:	4b04      	ldr	r3, [pc, #16]	; (80028f8 <MX_MotorControl_Init+0x2c>)
 80028e8:	4a04      	ldr	r2, [pc, #16]	; (80028fc <MX_MotorControl_Init+0x30>)
 80028ea:	2101      	movs	r1, #1
 80028ec:	f000 fc06 	bl	80030fc <UI_TaskInit>
}
 80028f0:	b003      	add	sp, #12
 80028f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80028f6:	bf00      	nop
 80028f8:	20000b18 	.word	0x20000b18
 80028fc:	20000b14 	.word	0x20000b14
 8002900:	08009304 	.word	0x08009304
 8002904:	20000570 	.word	0x20000570

08002908 <vPortSetupTimerInterrupt>:

void vPortSetupTimerInterrupt( void )
{
 8002908:	b508      	push	{r3, lr}
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 800290a:	f001 ff53 	bl	80047b4 <HAL_RCC_GetHCLKFreq>
 800290e:	4b04      	ldr	r3, [pc, #16]	; (8002920 <vPortSetupTimerInterrupt+0x18>)
 8002910:	fba3 3000 	umull	r3, r0, r3, r0
 8002914:	09c0      	lsrs	r0, r0, #7
}
 8002916:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 800291a:	f001 bad7 	b.w	8003ecc <HAL_SYSTICK_Config>
 800291e:	bf00      	nop
 8002920:	10624dd3 	.word	0x10624dd3

08002924 <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002924:	4b6b      	ldr	r3, [pc, #428]	; (8002ad4 <RCM_RegisterRegConv+0x1b0>)
 8002926:	681a      	ldr	r2, [r3, #0]
{
 8002928:	b570      	push	{r4, r5, r6, lr}
 800292a:	4601      	mov	r1, r0
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800292c:	2a00      	cmp	r2, #0
 800292e:	d02f      	beq.n	8002990 <RCM_RegisterRegConv+0x6c>
        handle = i; /* First location available, but still looping to check that this config does not already exist*/
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (  RCM_handle_array [i] != 0 )
      {
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002930:	f890 c004 	ldrb.w	ip, [r0, #4]
 8002934:	7910      	ldrb	r0, [r2, #4]
 8002936:	4584      	cmp	ip, r0
 8002938:	d01d      	beq.n	8002976 <RCM_RegisterRegConv+0x52>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800293a:	685c      	ldr	r4, [r3, #4]
 800293c:	2c00      	cmp	r4, #0
 800293e:	f000 80ac 	beq.w	8002a9a <RCM_RegisterRegConv+0x176>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002942:	7922      	ldrb	r2, [r4, #4]
 8002944:	4562      	cmp	r2, ip
  uint8_t handle=255;
 8002946:	f04f 00ff 	mov.w	r0, #255	; 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 800294a:	d02b      	beq.n	80029a4 <RCM_RegisterRegConv+0x80>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800294c:	689c      	ldr	r4, [r3, #8]
 800294e:	2c00      	cmp	r4, #0
 8002950:	f000 808f 	beq.w	8002a72 <RCM_RegisterRegConv+0x14e>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002954:	7922      	ldrb	r2, [r4, #4]
 8002956:	4562      	cmp	r2, ip
 8002958:	d02a      	beq.n	80029b0 <RCM_RegisterRegConv+0x8c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800295a:	68dc      	ldr	r4, [r3, #12]
 800295c:	2c00      	cmp	r4, #0
 800295e:	f000 8091 	beq.w	8002a84 <RCM_RegisterRegConv+0x160>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002962:	7922      	ldrb	r2, [r4, #4]
 8002964:	4562      	cmp	r2, ip
 8002966:	f000 8092 	beq.w	8002a8e <RCM_RegisterRegConv+0x16a>
           i = RCM_MAX_CONV; /* we can skip the rest of the loop*/
          }
      }
      i++;
    }
    if (handle < RCM_MAX_CONV )
 800296a:	2803      	cmp	r0, #3
 800296c:	bf88      	it	hi
 800296e:	20ff      	movhi	r0, #255	; 0xff
 8002970:	f240 80a1 	bls.w	8002ab6 <RCM_RegisterRegConv+0x192>
    else
    {
      /* Nothing to do handle is already set to error value : 255 */
    }
  return handle;
}
 8002974:	bd70      	pop	{r4, r5, r6, pc}
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002976:	6810      	ldr	r0, [r2, #0]
 8002978:	680a      	ldr	r2, [r1, #0]
 800297a:	4290      	cmp	r0, r2
 800297c:	d01e      	beq.n	80029bc <RCM_RegisterRegConv+0x98>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800297e:	685c      	ldr	r4, [r3, #4]
 8002980:	2c00      	cmp	r4, #0
 8002982:	d1de      	bne.n	8002942 <RCM_RegisterRegConv+0x1e>
 8002984:	689c      	ldr	r4, [r3, #8]
 8002986:	2c00      	cmp	r4, #0
 8002988:	f000 809a 	beq.w	8002ac0 <RCM_RegisterRegConv+0x19c>
      i++;
 800298c:	2001      	movs	r0, #1
 800298e:	e7e1      	b.n	8002954 <RCM_RegisterRegConv+0x30>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002990:	685c      	ldr	r4, [r3, #4]
 8002992:	2c00      	cmp	r4, #0
 8002994:	f000 808d 	beq.w	8002ab2 <RCM_RegisterRegConv+0x18e>
 8002998:	f890 c004 	ldrb.w	ip, [r0, #4]
  uint8_t i=0;
 800299c:	4610      	mov	r0, r2
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 800299e:	7922      	ldrb	r2, [r4, #4]
 80029a0:	4562      	cmp	r2, ip
 80029a2:	d1d3      	bne.n	800294c <RCM_RegisterRegConv+0x28>
 80029a4:	6824      	ldr	r4, [r4, #0]
 80029a6:	680a      	ldr	r2, [r1, #0]
 80029a8:	4294      	cmp	r4, r2
 80029aa:	d1cf      	bne.n	800294c <RCM_RegisterRegConv+0x28>
      i++;
 80029ac:	2001      	movs	r0, #1
    if (handle < RCM_MAX_CONV )
 80029ae:	e006      	b.n	80029be <RCM_RegisterRegConv+0x9a>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80029b0:	6824      	ldr	r4, [r4, #0]
 80029b2:	680a      	ldr	r2, [r1, #0]
 80029b4:	4294      	cmp	r4, r2
 80029b6:	d1d0      	bne.n	800295a <RCM_RegisterRegConv+0x36>
      i++;
 80029b8:	2002      	movs	r0, #2
 80029ba:	e000      	b.n	80029be <RCM_RegisterRegConv+0x9a>
  uint8_t i=0;
 80029bc:	2000      	movs	r0, #0
      RCM_handle_array [handle] = regConv;
 80029be:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 80029c2:	6893      	ldr	r3, [r2, #8]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 80029c4:	4c44      	ldr	r4, [pc, #272]	; (8002ad8 <RCM_RegisterRegConv+0x1b4>)
 80029c6:	2500      	movs	r5, #0
      if (LL_ADC_IsEnabled(regConv->regADC) == 0 )
 80029c8:	07db      	lsls	r3, r3, #31
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 80029ca:	f844 5030 	str.w	r5, [r4, r0, lsl #3]
      if (LL_ADC_IsEnabled(regConv->regADC) == 0 )
 80029ce:	d411      	bmi.n	80029f4 <RCM_RegisterRegConv+0xd0>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOCS(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 80029d0:	6853      	ldr	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 80029d2:	f06f 0402 	mvn.w	r4, #2
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 80029d6:	f023 0320 	bic.w	r3, r3, #32
 80029da:	6053      	str	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 80029dc:	6014      	str	r4, [r2, #0]
{
  /* Note: on this STM32 series, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 80029de:	6853      	ldr	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 80029e0:	f06f 0404 	mvn.w	r4, #4
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 80029e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029e8:	6053      	str	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 80029ea:	6014      	str	r4, [r2, #0]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 80029ec:	6893      	ldr	r3, [r2, #8]
 80029ee:	f043 0301 	orr.w	r3, r3, #1
 80029f2:	6093      	str	r3, [r2, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80029f4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80029f6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80029fa:	62d3      	str	r3, [r2, #44]	; 0x2c
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 80029fc:	790b      	ldrb	r3, [r1, #4]
 80029fe:	2b09      	cmp	r3, #9
 8002a00:	d82d      	bhi.n	8002a5e <RCM_RegisterRegConv+0x13a>
 8002a02:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 8002a06:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 8002a0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a0e:	f04f 7e00 	mov.w	lr, #33554432	; 0x2000000
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a12:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8002a16:	fa94 f4a4 	rbit	r4, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8002a1a:	fab4 f484 	clz	r4, r4
 8002a1e:	fa2e fe04 	lsr.w	lr, lr, r4
 8002a22:	320c      	adds	r2, #12
  MODIFY_REG(*preg,
 8002a24:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8002a28:	f852 402e 	ldr.w	r4, [r2, lr, lsl #2]
 8002a2c:	f04f 7cf8 	mov.w	ip, #32505856	; 0x1f00000
 8002a30:	fa9c f5ac 	rbit	r5, ip
 8002a34:	fab5 f585 	clz	r5, r5
 8002a38:	fa9c fcac 	rbit	ip, ip
 8002a3c:	688e      	ldr	r6, [r1, #8]
 8002a3e:	fabc fc8c 	clz	ip, ip
 8002a42:	fa23 f105 	lsr.w	r1, r3, r5
 8002a46:	fa23 f30c 	lsr.w	r3, r3, ip
 8002a4a:	fa06 f503 	lsl.w	r5, r6, r3
 8002a4e:	2307      	movs	r3, #7
 8002a50:	408b      	lsls	r3, r1
 8002a52:	ea24 0303 	bic.w	r3, r4, r3
 8002a56:	432b      	orrs	r3, r5
 8002a58:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
}
 8002a5c:	bd70      	pop	{r4, r5, r6, pc}
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 8002a5e:	2403      	movs	r4, #3
 8002a60:	f06f 051d 	mvn.w	r5, #29
 8002a64:	fb14 5403 	smlabb	r4, r4, r3, r5
 8002a68:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8002a6c:	f003 7e00 	and.w	lr, r3, #33554432	; 0x2000000
 8002a70:	e7cf      	b.n	8002a12 <RCM_RegisterRegConv+0xee>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002a72:	2804      	cmp	r0, #4
 8002a74:	d917      	bls.n	8002aa6 <RCM_RegisterRegConv+0x182>
 8002a76:	68dc      	ldr	r4, [r3, #12]
 8002a78:	b114      	cbz	r4, 8002a80 <RCM_RegisterRegConv+0x15c>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002a7a:	7922      	ldrb	r2, [r4, #4]
 8002a7c:	4562      	cmp	r2, ip
 8002a7e:	d01c      	beq.n	8002aba <RCM_RegisterRegConv+0x196>
 8002a80:	680a      	ldr	r2, [r1, #0]
 8002a82:	e799      	b.n	80029b8 <RCM_RegisterRegConv+0x94>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002a84:	2804      	cmp	r0, #4
 8002a86:	680a      	ldr	r2, [r1, #0]
 8002a88:	d999      	bls.n	80029be <RCM_RegisterRegConv+0x9a>
      i++;
 8002a8a:	2003      	movs	r0, #3
 8002a8c:	e797      	b.n	80029be <RCM_RegisterRegConv+0x9a>
 8002a8e:	680a      	ldr	r2, [r1, #0]
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002a90:	6824      	ldr	r4, [r4, #0]
 8002a92:	4294      	cmp	r4, r2
 8002a94:	f47f af69 	bne.w	800296a <RCM_RegisterRegConv+0x46>
 8002a98:	e7f7      	b.n	8002a8a <RCM_RegisterRegConv+0x166>
      i++;
 8002a9a:	2001      	movs	r0, #1
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002a9c:	689c      	ldr	r4, [r3, #8]
 8002a9e:	b11c      	cbz	r4, 8002aa8 <RCM_RegisterRegConv+0x184>
 8002aa0:	f891 c004 	ldrb.w	ip, [r1, #4]
 8002aa4:	e756      	b.n	8002954 <RCM_RegisterRegConv+0x30>
 8002aa6:	4620      	mov	r0, r4
 8002aa8:	68dc      	ldr	r4, [r3, #12]
 8002aaa:	b124      	cbz	r4, 8002ab6 <RCM_RegisterRegConv+0x192>
 8002aac:	f891 c004 	ldrb.w	ip, [r1, #4]
 8002ab0:	e757      	b.n	8002962 <RCM_RegisterRegConv+0x3e>
  uint8_t i=0;
 8002ab2:	4620      	mov	r0, r4
 8002ab4:	e7f2      	b.n	8002a9c <RCM_RegisterRegConv+0x178>
 8002ab6:	680a      	ldr	r2, [r1, #0]
 8002ab8:	e781      	b.n	80029be <RCM_RegisterRegConv+0x9a>
 8002aba:	680a      	ldr	r2, [r1, #0]
      i++;
 8002abc:	2002      	movs	r0, #2
 8002abe:	e7e7      	b.n	8002a90 <RCM_RegisterRegConv+0x16c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002ac0:	68dc      	ldr	r4, [r3, #12]
 8002ac2:	2c00      	cmp	r4, #0
 8002ac4:	f43f af72 	beq.w	80029ac <RCM_RegisterRegConv+0x88>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002ac8:	7920      	ldrb	r0, [r4, #4]
 8002aca:	4560      	cmp	r0, ip
 8002acc:	f47f af6e 	bne.w	80029ac <RCM_RegisterRegConv+0x88>
      i++;
 8002ad0:	2001      	movs	r0, #1
 8002ad2:	e7dd      	b.n	8002a90 <RCM_RegisterRegConv+0x16c>
 8002ad4:	20000b40 	.word	0x20000b40
 8002ad8:	20000b1c 	.word	0x20000b1c

08002adc <RCM_ExecRegularConv>:
 */
uint16_t RCM_ExecRegularConv (uint8_t handle)
{
  uint16_t retVal;

  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8002adc:	4b1b      	ldr	r3, [pc, #108]	; (8002b4c <RCM_ExecRegularConv+0x70>)
 8002ade:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8002ae2:	7913      	ldrb	r3, [r2, #4]
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8002ae4:	6812      	ldr	r2, [r2, #0]
 8002ae6:	2b09      	cmp	r3, #9
 8002ae8:	d827      	bhi.n	8002b3a <RCM_ExecRegularConv+0x5e>
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8002aea:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8002aee:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8002af2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002af6:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002afa:	fa91 f1a1 	rbit	r1, r1
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8002afe:	f44f 7c00 	mov.w	ip, #512	; 0x200
 8002b02:	fab1 f181 	clz	r1, r1
 8002b06:	f102 002c 	add.w	r0, r2, #44	; 0x2c
 8002b0a:	fa2c fc01 	lsr.w	ip, ip, r1
  MODIFY_REG(*preg,
 8002b0e:	f003 031f 	and.w	r3, r3, #31
 8002b12:	f850 102c 	ldr.w	r1, [r0, ip, lsl #2]
 8002b16:	f021 011f 	bic.w	r1, r1, #31
 8002b1a:	430b      	orrs	r3, r1

  LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );

  /* Bit banding access equivalent to LL_ADC_REG_StartConversionSWStart */
  BB_REG_BIT_SET ( &RCM_handle_array[handle]->regADC->CR2, ADC_CR2_SWSTART_Pos );
 8002b1c:	0151      	lsls	r1, r2, #5
 8002b1e:	f840 302c 	str.w	r3, [r0, ip, lsl #2]
 8002b22:	f101 4184 	add.w	r1, r1, #1107296256	; 0x42000000
 8002b26:	2301      	movs	r3, #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8002b28:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 8002b2a:	f8c1 3178 	str.w	r3, [r1, #376]	; 0x178
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOCS) == (LL_ADC_FLAG_EOCS));
 8002b2e:	6813      	ldr	r3, [r2, #0]
  /* Wait until end of regular conversion */
  while ( LL_ADC_IsActiveFlag_EOCS( RCM_handle_array[handle]->regADC ) == 0u ) {}
 8002b30:	079b      	lsls	r3, r3, #30
 8002b32:	d5fc      	bpl.n	8002b2e <RCM_ExecRegularConv+0x52>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8002b34:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
  retVal = LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );
return retVal;
}
 8002b36:	b280      	uxth	r0, r0
 8002b38:	4770      	bx	lr
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8002b3a:	2103      	movs	r1, #3
 8002b3c:	f06f 001d 	mvn.w	r0, #29
 8002b40:	fb11 0103 	smlabb	r1, r1, r3, r0
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8002b44:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 8002b48:	e7d5      	b.n	8002af6 <RCM_ExecRegularConv+0x1a>
 8002b4a:	bf00      	nop
 8002b4c:	20000b40 	.word	0x20000b40

08002b50 <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv ()
{
 8002b50:	b570      	push	{r4, r5, r6, lr}
  if (RCM_UserConvState == RCM_USERCONV_REQUESTED)
 8002b52:	4c0f      	ldr	r4, [pc, #60]	; (8002b90 <RCM_ExecUserConv+0x40>)
 8002b54:	7823      	ldrb	r3, [r4, #0]
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d000      	beq.n	8002b5c <RCM_ExecUserConv+0xc>
    {
      RCM_UserConvState = RCM_USERCONV_IDLE;
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
    }
  }
}
 8002b5a:	bd70      	pop	{r4, r5, r6, pc}
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8002b5c:	4d0d      	ldr	r5, [pc, #52]	; (8002b94 <RCM_ExecUserConv+0x44>)
 8002b5e:	7828      	ldrb	r0, [r5, #0]
 8002b60:	f7ff ffbc 	bl	8002adc <RCM_ExecRegularConv>
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8002b64:	f895 c000 	ldrb.w	ip, [r5]
 8002b68:	4b0b      	ldr	r3, [pc, #44]	; (8002b98 <RCM_ExecUserConv+0x48>)
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8002b6a:	4a0c      	ldr	r2, [pc, #48]	; (8002b9c <RCM_ExecUserConv+0x4c>)
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8002b6c:	f853 503c 	ldr.w	r5, [r3, ip, lsl #3]
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8002b70:	8010      	strh	r0, [r2, #0]
    RCM_UserConvState = RCM_USERCONV_EOC;
 8002b72:	2202      	movs	r2, #2
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8002b74:	4601      	mov	r1, r0
    RCM_UserConvState = RCM_USERCONV_EOC;
 8002b76:	7022      	strb	r2, [r4, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8002b78:	2d00      	cmp	r5, #0
 8002b7a:	d0ee      	beq.n	8002b5a <RCM_ExecUserConv+0xa>
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8002b7c:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8002b80:	4660      	mov	r0, ip
 8002b82:	685a      	ldr	r2, [r3, #4]
      RCM_UserConvState = RCM_USERCONV_IDLE;
 8002b84:	2300      	movs	r3, #0
 8002b86:	7023      	strb	r3, [r4, #0]
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8002b88:	462b      	mov	r3, r5
}
 8002b8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8002b8e:	4718      	bx	r3
 8002b90:	20000b3d 	.word	0x20000b3d
 8002b94:	20000b3c 	.word	0x20000b3c
 8002b98:	20000b1c 	.word	0x20000b1c
 8002b9c:	20000b3e 	.word	0x20000b3e

08002ba0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ba0:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ba2:	4b0e      	ldr	r3, [pc, #56]	; (8002bdc <HAL_MspInit+0x3c>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	9200      	str	r2, [sp, #0]
 8002ba8:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002baa:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8002bae:	6459      	str	r1, [r3, #68]	; 0x44
 8002bb0:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8002bb2:	f400 4080 	and.w	r0, r0, #16384	; 0x4000
 8002bb6:	9000      	str	r0, [sp, #0]
 8002bb8:	9800      	ldr	r0, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bba:	9201      	str	r2, [sp, #4]
 8002bbc:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8002bbe:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8002bc2:	6418      	str	r0, [r3, #64]	; 0x40
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bca:	9301      	str	r3, [sp, #4]
 8002bcc:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002bce:	210f      	movs	r1, #15
 8002bd0:	f06f 0001 	mvn.w	r0, #1

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bd4:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002bd6:	f001 b907 	b.w	8003de8 <HAL_NVIC_SetPriority>
 8002bda:	bf00      	nop
 8002bdc:	40023800 	.word	0x40023800

08002be0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002be0:	b5d0      	push	{r4, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8002be2:	4b1f      	ldr	r3, [pc, #124]	; (8002c60 <HAL_ADC_MspInit+0x80>)
 8002be4:	6802      	ldr	r2, [r0, #0]
{
 8002be6:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be8:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 8002bea:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bec:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8002bf0:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8002bf4:	9408      	str	r4, [sp, #32]
  if(hadc->Instance==ADC1)
 8002bf6:	d001      	beq.n	8002bfc <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002bf8:	b00a      	add	sp, #40	; 0x28
 8002bfa:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002bfc:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8002c00:	9401      	str	r4, [sp, #4]
 8002c02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c04:	4817      	ldr	r0, [pc, #92]	; (8002c64 <HAL_ADC_MspInit+0x84>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002c06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c0a:	645a      	str	r2, [r3, #68]	; 0x44
 8002c0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c0e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8002c12:	9201      	str	r2, [sp, #4]
 8002c14:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c16:	9402      	str	r4, [sp, #8]
 8002c18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c1a:	f042 0204 	orr.w	r2, r2, #4
 8002c1e:	631a      	str	r2, [r3, #48]	; 0x30
 8002c20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c22:	f002 0204 	and.w	r2, r2, #4
 8002c26:	9202      	str	r2, [sp, #8]
 8002c28:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c2a:	9403      	str	r4, [sp, #12]
 8002c2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c2e:	f042 0201 	orr.w	r2, r2, #1
 8002c32:	631a      	str	r2, [r3, #48]	; 0x30
 8002c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin;
 8002c3c:	2603      	movs	r6, #3
 8002c3e:	2703      	movs	r7, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c40:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c42:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin;
 8002c44:	e9cd 6704 	strd	r6, r7, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c48:	f001 f95a 	bl	8003f00 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c4c:	4806      	ldr	r0, [pc, #24]	; (8002c68 <HAL_ADC_MspInit+0x88>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4e:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c50:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin|M1_BUS_VOLTAGE_Pin;
 8002c52:	e9cd 6704 	strd	r6, r7, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c56:	f001 f953 	bl	8003f00 <HAL_GPIO_Init>
}
 8002c5a:	b00a      	add	sp, #40	; 0x28
 8002c5c:	bdd0      	pop	{r4, r6, r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	40012000 	.word	0x40012000
 8002c64:	40020800 	.word	0x40020800
 8002c68:	40020000 	.word	0x40020000

08002c6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c6c:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
 8002c6e:	6802      	ldr	r2, [r0, #0]
 8002c70:	492b      	ldr	r1, [pc, #172]	; (8002d20 <HAL_TIM_Base_MspInit+0xb4>)
{
 8002c72:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c74:	2300      	movs	r3, #0
  if(htim_base->Instance==TIM1)
 8002c76:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c78:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8002c7c:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8002c80:	9308      	str	r3, [sp, #32]
  if(htim_base->Instance==TIM1)
 8002c82:	d004      	beq.n	8002c8e <HAL_TIM_Base_MspInit+0x22>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8002c84:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8002c88:	d00e      	beq.n	8002ca8 <HAL_TIM_Base_MspInit+0x3c>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002c8a:	b00a      	add	sp, #40	; 0x28
 8002c8c:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c8e:	4a25      	ldr	r2, [pc, #148]	; (8002d24 <HAL_TIM_Base_MspInit+0xb8>)
 8002c90:	9300      	str	r3, [sp, #0]
 8002c92:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8002c94:	f043 0301 	orr.w	r3, r3, #1
 8002c98:	6453      	str	r3, [r2, #68]	; 0x44
 8002c9a:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8002c9c:	f003 0301 	and.w	r3, r3, #1
 8002ca0:	9300      	str	r3, [sp, #0]
 8002ca2:	9b00      	ldr	r3, [sp, #0]
}
 8002ca4:	b00a      	add	sp, #40	; 0x28
 8002ca6:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ca8:	f502 320e 	add.w	r2, r2, #145408	; 0x23800
 8002cac:	9301      	str	r3, [sp, #4]
 8002cae:	6c11      	ldr	r1, [r2, #64]	; 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cb0:	481d      	ldr	r0, [pc, #116]	; (8002d28 <HAL_TIM_Base_MspInit+0xbc>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002cb2:	f041 0101 	orr.w	r1, r1, #1
 8002cb6:	6411      	str	r1, [r2, #64]	; 0x40
 8002cb8:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8002cba:	f001 0101 	and.w	r1, r1, #1
 8002cbe:	9101      	str	r1, [sp, #4]
 8002cc0:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cc2:	9302      	str	r3, [sp, #8]
 8002cc4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002cc6:	f041 0102 	orr.w	r1, r1, #2
 8002cca:	6311      	str	r1, [r2, #48]	; 0x30
 8002ccc:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002cce:	f001 0102 	and.w	r1, r1, #2
 8002cd2:	9102      	str	r1, [sp, #8]
 8002cd4:	9902      	ldr	r1, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cd6:	9303      	str	r3, [sp, #12]
 8002cd8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002cda:	f043 0301 	orr.w	r3, r3, #1
 8002cde:	6313      	str	r3, [r2, #48]	; 0x30
 8002ce0:	6b13      	ldr	r3, [r2, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002ce2:	2401      	movs	r4, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ce4:	4023      	ands	r3, r4
 8002ce6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = M1_HALL_H3_Pin|M1_HALL_H2_Pin;
 8002ce8:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8002cec:	2302      	movs	r3, #2
 8002cee:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cf2:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cf4:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002cf6:	e9cd 3407 	strd	r3, r4, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cfa:	9a03      	ldr	r2, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cfc:	f001 f900 	bl	8003f00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_HALL_H1_Pin;
 8002d00:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002d04:	2302      	movs	r3, #2
 8002d06:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(M1_HALL_H1_GPIO_Port, &GPIO_InitStruct);
 8002d0a:	4808      	ldr	r0, [pc, #32]	; (8002d2c <HAL_TIM_Base_MspInit+0xc0>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d0c:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = M1_HALL_H1_Pin;
 8002d0e:	2200      	movs	r2, #0
 8002d10:	2302      	movs	r3, #2
    HAL_GPIO_Init(M1_HALL_H1_GPIO_Port, &GPIO_InitStruct);
 8002d12:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_HALL_H1_Pin;
 8002d14:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(M1_HALL_H1_GPIO_Port, &GPIO_InitStruct);
 8002d18:	f001 f8f2 	bl	8003f00 <HAL_GPIO_Init>
}
 8002d1c:	b00a      	add	sp, #40	; 0x28
 8002d1e:	bd10      	pop	{r4, pc}
 8002d20:	40010000 	.word	0x40010000
 8002d24:	40023800 	.word	0x40023800
 8002d28:	40020400 	.word	0x40020400
 8002d2c:	40020000 	.word	0x40020000

08002d30 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d30:	b5d0      	push	{r4, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 8002d32:	4a1f      	ldr	r2, [pc, #124]	; (8002db0 <HAL_TIM_MspPostInit+0x80>)
 8002d34:	6801      	ldr	r1, [r0, #0]
{
 8002d36:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d38:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 8002d3a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d3c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002d40:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8002d44:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM1)
 8002d46:	d001      	beq.n	8002d4c <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002d48:	b008      	add	sp, #32
 8002d4a:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d4c:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 8002d50:	9300      	str	r3, [sp, #0]
 8002d52:	6b11      	ldr	r1, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d54:	4817      	ldr	r0, [pc, #92]	; (8002db4 <HAL_TIM_MspPostInit+0x84>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d56:	f041 0101 	orr.w	r1, r1, #1
 8002d5a:	6311      	str	r1, [r2, #48]	; 0x30
 8002d5c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002d5e:	f001 0101 	and.w	r1, r1, #1
 8002d62:	9100      	str	r1, [sp, #0]
 8002d64:	9900      	ldr	r1, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d66:	9301      	str	r3, [sp, #4]
 8002d68:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002d6a:	f043 0302 	orr.w	r3, r3, #2
 8002d6e:	6313      	str	r3, [r2, #48]	; 0x30
 8002d70:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	9301      	str	r3, [sp, #4]
 8002d78:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002d7a:	2401      	movs	r4, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d7c:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8002d7e:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 8002d82:	2302      	movs	r3, #2
 8002d84:	2602      	movs	r6, #2
 8002d86:	2702      	movs	r7, #2
 8002d88:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002d8c:	e9cd 6704 	strd	r6, r7, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002d90:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d92:	f001 f8b5 	bl	8003f00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8002d96:	2203      	movs	r2, #3
 8002d98:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d9a:	4807      	ldr	r0, [pc, #28]	; (8002db8 <HAL_TIM_MspPostInit+0x88>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002d9c:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d9e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8002da0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8002da4:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002da8:	f001 f8aa 	bl	8003f00 <HAL_GPIO_Init>
}
 8002dac:	b008      	add	sp, #32
 8002dae:	bdd0      	pop	{r4, r6, r7, pc}
 8002db0:	40010000 	.word	0x40010000
 8002db4:	40020000 	.word	0x40020000
 8002db8:	40020400 	.word	0x40020400
 8002dbc:	00000000 	.word	0x00000000

08002dc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002dc0:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART2)
 8002dc2:	4a1b      	ldr	r2, [pc, #108]	; (8002e30 <HAL_UART_MspInit+0x70>)
 8002dc4:	6801      	ldr	r1, [r0, #0]
{
 8002dc6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dc8:	2300      	movs	r3, #0
  if(huart->Instance==USART2)
 8002dca:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dcc:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002dd0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8002dd4:	9306      	str	r3, [sp, #24]
  if(huart->Instance==USART2)
 8002dd6:	d002      	beq.n	8002dde <HAL_UART_MspInit+0x1e>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002dd8:	b009      	add	sp, #36	; 0x24
 8002dda:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART2_CLK_ENABLE();
 8002dde:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 8002de2:	9300      	str	r3, [sp, #0]
 8002de4:	6c10      	ldr	r0, [r2, #64]	; 0x40
 8002de6:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8002dea:	6410      	str	r0, [r2, #64]	; 0x40
 8002dec:	6c10      	ldr	r0, [r2, #64]	; 0x40
 8002dee:	f400 3000 	and.w	r0, r0, #131072	; 0x20000
 8002df2:	9000      	str	r0, [sp, #0]
 8002df4:	9800      	ldr	r0, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002df6:	9301      	str	r3, [sp, #4]
 8002df8:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dfa:	480e      	ldr	r0, [pc, #56]	; (8002e34 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dfc:	f043 0301 	orr.w	r3, r3, #1
 8002e00:	6313      	str	r3, [r2, #48]	; 0x30
 8002e02:	6b13      	ldr	r3, [r2, #48]	; 0x30
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8002e04:	ed9f 7b08 	vldr	d7, [pc, #32]	; 8002e28 <HAL_UART_MspInit+0x68>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e0e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e10:	2307      	movs	r3, #7
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8002e12:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e16:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e18:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e1a:	f001 f871 	bl	8003f00 <HAL_GPIO_Init>
}
 8002e1e:	b009      	add	sp, #36	; 0x24
 8002e20:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e24:	f3af 8000 	nop.w
 8002e28:	0000000c 	.word	0x0000000c
 8002e2c:	00000002 	.word	0x00000002
 8002e30:	40004400 	.word	0x40004400
 8002e34:	40020000 	.word	0x40020000

08002e38 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8002e38:	b508      	push	{r3, lr}
  if(huart->Instance==USART2)
 8002e3a:	6802      	ldr	r2, [r0, #0]
 8002e3c:	4b08      	ldr	r3, [pc, #32]	; (8002e60 <HAL_UART_MspDeInit+0x28>)
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d000      	beq.n	8002e44 <HAL_UART_MspDeInit+0xc>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8002e42:	bd08      	pop	{r3, pc}
    __HAL_RCC_USART2_CLK_DISABLE();
 8002e44:	4a07      	ldr	r2, [pc, #28]	; (8002e64 <HAL_UART_MspDeInit+0x2c>)
    HAL_GPIO_DeInit(GPIOA, UART_TX_Pin|UART_RX_Pin);
 8002e46:	4808      	ldr	r0, [pc, #32]	; (8002e68 <HAL_UART_MspDeInit+0x30>)
    __HAL_RCC_USART2_CLK_DISABLE();
 8002e48:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002e4a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002e4e:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, UART_TX_Pin|UART_RX_Pin);
 8002e50:	210c      	movs	r1, #12
 8002e52:	f001 f947 	bl	80040e4 <HAL_GPIO_DeInit>
}
 8002e56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8002e5a:	2026      	movs	r0, #38	; 0x26
 8002e5c:	f001 b810 	b.w	8003e80 <HAL_NVIC_DisableIRQ>
 8002e60:	40004400 	.word	0x40004400
 8002e64:	40023800 	.word	0x40023800
 8002e68:	40020000 	.word	0x40020000

08002e6c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e6c:	b570      	push	{r4, r5, r6, lr}
 8002e6e:	b088      	sub	sp, #32
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8002e70:	4b23      	ldr	r3, [pc, #140]	; (8002f00 <HAL_InitTick+0x94>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	9202      	str	r2, [sp, #8]
 8002e76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e78:	f042 0208 	orr.w	r2, r2, #8
 8002e7c:	641a      	str	r2, [r3, #64]	; 0x40
 8002e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e80:	f003 0308 	and.w	r3, r3, #8
 8002e84:	9302      	str	r3, [sp, #8]
{
 8002e86:	4605      	mov	r5, r0

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002e88:	a901      	add	r1, sp, #4
 8002e8a:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM5_CLK_ENABLE();
 8002e8c:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002e8e:	f001 fcb7 	bl	8004800 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002e92:	9b06      	ldr	r3, [sp, #24]
 8002e94:	b9d3      	cbnz	r3, 8002ecc <HAL_InitTick+0x60>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002e96:	f001 fc93 	bl	80047c0 <HAL_RCC_GetPCLK1Freq>
 8002e9a:	4603      	mov	r3, r0
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002e9c:	4819      	ldr	r0, [pc, #100]	; (8002f04 <HAL_InitTick+0x98>)

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8002e9e:	4c1a      	ldr	r4, [pc, #104]	; (8002f08 <HAL_InitTick+0x9c>)
 8002ea0:	491a      	ldr	r1, [pc, #104]	; (8002f0c <HAL_InitTick+0xa0>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002ea2:	fba0 2303 	umull	r2, r3, r0, r3
 8002ea6:	0c9b      	lsrs	r3, r3, #18
 8002ea8:	3b01      	subs	r3, #1
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
  htim5.Init.Prescaler = uwPrescalerValue;
  htim5.Init.ClockDivision = 0;
 8002eaa:	2200      	movs	r2, #0
  htim5.Init.Prescaler = uwPrescalerValue;
 8002eac:	e9c4 1300 	strd	r1, r3, [r4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim5);
 8002eb0:	4620      	mov	r0, r4
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8002eb2:	f240 33e7 	movw	r3, #999	; 0x3e7
  htim5.Init.ClockDivision = 0;
 8002eb6:	6122      	str	r2, [r4, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002eb8:	60a2      	str	r2, [r4, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002eba:	61a2      	str	r2, [r4, #24]
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8002ebc:	60e3      	str	r3, [r4, #12]
  status = HAL_TIM_Base_Init(&htim5);
 8002ebe:	f001 fcc1 	bl	8004844 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8002ec2:	4606      	mov	r6, r0
 8002ec4:	b130      	cbz	r0, 8002ed4 <HAL_InitTick+0x68>
    }
  }

 /* Return function status */
  return status;
}
 8002ec6:	4630      	mov	r0, r6
 8002ec8:	b008      	add	sp, #32
 8002eca:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002ecc:	f001 fc78 	bl	80047c0 <HAL_RCC_GetPCLK1Freq>
 8002ed0:	0043      	lsls	r3, r0, #1
 8002ed2:	e7e3      	b.n	8002e9c <HAL_InitTick+0x30>
    status = HAL_TIM_Base_Start_IT(&htim5);
 8002ed4:	4620      	mov	r0, r4
 8002ed6:	f001 fd33 	bl	8004940 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8002eda:	4606      	mov	r6, r0
 8002edc:	2800      	cmp	r0, #0
 8002ede:	d1f2      	bne.n	8002ec6 <HAL_InitTick+0x5a>
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002ee0:	2032      	movs	r0, #50	; 0x32
 8002ee2:	f000 ffbf 	bl	8003e64 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ee6:	2d0f      	cmp	r5, #15
 8002ee8:	d901      	bls.n	8002eee <HAL_InitTick+0x82>
        status = HAL_ERROR;
 8002eea:	2601      	movs	r6, #1
 8002eec:	e7eb      	b.n	8002ec6 <HAL_InitTick+0x5a>
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8002eee:	4632      	mov	r2, r6
 8002ef0:	4629      	mov	r1, r5
 8002ef2:	2032      	movs	r0, #50	; 0x32
 8002ef4:	f000 ff78 	bl	8003de8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002ef8:	4b05      	ldr	r3, [pc, #20]	; (8002f10 <HAL_InitTick+0xa4>)
 8002efa:	601d      	str	r5, [r3, #0]
 8002efc:	e7e3      	b.n	8002ec6 <HAL_InitTick+0x5a>
 8002efe:	bf00      	nop
 8002f00:	40023800 	.word	0x40023800
 8002f04:	431bde83 	.word	0x431bde83
 8002f08:	20000b50 	.word	0x20000b50
 8002f0c:	40000c00 	.word	0x40000c00
 8002f10:	20000580 	.word	0x20000580

08002f14 <HAL_SuspendTick>:
  * @retval None
  */
void HAL_SuspendTick(void)
{
  /* Disable TIM5 update Interrupt */
  __HAL_TIM_DISABLE_IT(&htim5, TIM_IT_UPDATE);
 8002f14:	4b03      	ldr	r3, [pc, #12]	; (8002f24 <HAL_SuspendTick+0x10>)
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	68d3      	ldr	r3, [r2, #12]
 8002f1a:	f023 0301 	bic.w	r3, r3, #1
 8002f1e:	60d3      	str	r3, [r2, #12]
}
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	20000b50 	.word	0x20000b50

08002f28 <HAL_ResumeTick>:
  * @retval None
  */
void HAL_ResumeTick(void)
{
  /* Enable TIM5 Update interrupt */
  __HAL_TIM_ENABLE_IT(&htim5, TIM_IT_UPDATE);
 8002f28:	4b03      	ldr	r3, [pc, #12]	; (8002f38 <HAL_ResumeTick+0x10>)
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	68d3      	ldr	r3, [r2, #12]
 8002f2e:	f043 0301 	orr.w	r3, r3, #1
 8002f32:	60d3      	str	r3, [r2, #12]
}
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	20000b50 	.word	0x20000b50

08002f3c <TIM5_IRQHandler>:
void TIM5_IRQHandler(void)
{
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002f3c:	4801      	ldr	r0, [pc, #4]	; (8002f44 <TIM5_IRQHandler+0x8>)
 8002f3e:	f001 bffd 	b.w	8004f3c <HAL_TIM_IRQHandler>
 8002f42:	bf00      	nop
 8002f44:	20000b50 	.word	0x20000b50

08002f48 <ADC_IRQHandler>:
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_JEOS) == (LL_ADC_FLAG_JEOS));
 8002f48:	4b05      	ldr	r3, [pc, #20]	; (8002f60 <ADC_IRQHandler+0x18>)
 8002f4a:	681a      	ldr	r2, [r3, #0]
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  if(LL_ADC_IsActiveFlag_JEOS(ADC1))
 8002f4c:	0752      	lsls	r2, r2, #29
 8002f4e:	d400      	bmi.n	8002f52 <ADC_IRQHandler+0xa>
  }
#endif
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002f50:	4770      	bx	lr
    ADC1->SR &= ~(uint32_t)(LL_ADC_FLAG_JEOS | LL_ADC_FLAG_JSTRT);
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	f022 020c 	bic.w	r2, r2, #12
 8002f58:	601a      	str	r2, [r3, #0]
    TSK_HighFrequencyTask();          /*GUI, this section is present only if DAC is disabled*/
 8002f5a:	f7fe be3b 	b.w	8001bd4 <TSK_HighFrequencyTask>
 8002f5e:	bf00      	nop
 8002f60:	40012000 	.word	0x40012000

08002f64 <TIM1_UP_TIM10_IRQHandler>:
{
  /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

  /* USER CODE END TIMx_UP_M1_IRQn 0 */

  LL_TIM_ClearFlag_UPDATE(PWM_Handle_M1.pParams_str->TIMx);
 8002f64:	4803      	ldr	r0, [pc, #12]	; (8002f74 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002f66:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8002f68:	685b      	ldr	r3, [r3, #4]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002f6a:	f06f 0201 	mvn.w	r2, #1
 8002f6e:	611a      	str	r2, [r3, #16]
  R3_1_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 8002f70:	f005 b880 	b.w	8008074 <R3_1_TIMx_UP_IRQHandler>
 8002f74:	20000314 	.word	0x20000314

08002f78 <TIM1_BRK_TIM9_IRQHandler>:
void TIMx_BRK_M1_IRQHandler(void)
{
  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 0 */

  /* USER CODE END TIMx_BRK_M1_IRQn 0 */
  if (LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx))
 8002f78:	4807      	ldr	r0, [pc, #28]	; (8002f98 <TIM1_BRK_TIM9_IRQHandler+0x20>)
{
 8002f7a:	b508      	push	{r3, lr}
  if (LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx))
 8002f7c:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8002f7e:	685b      	ldr	r3, [r3, #4]
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 8002f80:	691a      	ldr	r2, [r3, #16]
 8002f82:	0612      	lsls	r2, r2, #24
 8002f84:	d504      	bpl.n	8002f90 <TIM1_BRK_TIM9_IRQHandler+0x18>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8002f86:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f8a:	611a      	str	r2, [r3, #16]
  {
    LL_TIM_ClearFlag_BRK(PWM_Handle_M1.pParams_str->TIMx);
    R3_1_BRK_IRQHandler(&PWM_Handle_M1);
 8002f8c:	f005 f890 	bl	80080b0 <R3_1_BRK_IRQHandler>
  MC_Scheduler();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 8002f90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 8002f94:	f7fe bde4 	b.w	8001b60 <MC_Scheduler>
 8002f98:	20000314 	.word	0x20000314

08002f9c <TIM2_IRQHandler>:
  * @brief  This function handles TIMx global interrupt request for M1 Speed Sensor.
  * @param  None
  * @retval None
  */
void SPD_TIM_M1_IRQHandler(void)
{
 8002f9c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 0 */

  /* USER CODE END SPD_TIM_M1_IRQn 0 */

  /* HALL Timer Update IT always enabled, no need to check enable UPDATE state */
  if (LL_TIM_IsActiveFlag_UPDATE(HALL_M1.TIMx))
 8002f9e:	4c0c      	ldr	r4, [pc, #48]	; (8002fd0 <TIM2_IRQHandler+0x34>)
 8002fa0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8002fa2:	691a      	ldr	r2, [r3, #16]
 8002fa4:	07d1      	lsls	r1, r2, #31
 8002fa6:	d40b      	bmi.n	8002fc0 <TIM2_IRQHandler+0x24>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8002fa8:	691a      	ldr	r2, [r3, #16]
 8002faa:	0792      	lsls	r2, r2, #30
 8002fac:	d507      	bpl.n	8002fbe <TIM2_IRQHandler+0x22>
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8002fae:	f06f 0202 	mvn.w	r2, #2
  /* Nothing to do */
  }
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 1 */

  /* USER CODE END SPD_TIM_M1_IRQn 1 */
}
 8002fb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HALL_TIMx_CC_IRQHandler(&HALL_M1);
 8002fb6:	4806      	ldr	r0, [pc, #24]	; (8002fd0 <TIM2_IRQHandler+0x34>)
 8002fb8:	611a      	str	r2, [r3, #16]
 8002fba:	f003 bf95 	b.w	8006ee8 <HALL_TIMx_CC_IRQHandler>
}
 8002fbe:	bd10      	pop	{r4, pc}
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002fc0:	f06f 0201 	mvn.w	r2, #1
 8002fc4:	611a      	str	r2, [r3, #16]
    HALL_TIMx_UP_IRQHandler(&HALL_M1);
 8002fc6:	4620      	mov	r0, r4
 8002fc8:	f004 f934 	bl	8007234 <HALL_TIMx_UP_IRQHandler>
  if (LL_TIM_IsActiveFlag_CC1 (HALL_M1.TIMx))
 8002fcc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002fce:	e7eb      	b.n	8002fa8 <TIM2_IRQHandler+0xc>
 8002fd0:	200000b4 	.word	0x200000b4

08002fd4 <USART2_IRQHandler>:
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USART_IRQHandler(void)
{
 8002fd4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART_IRQn 0 */

  /* USER CODE END USART_IRQn 0 */
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8002fd6:	4c1f      	ldr	r4, [pc, #124]	; (8003054 <USART2_IRQHandler+0x80>)
 8002fd8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	0691      	lsls	r1, r2, #26
{
 8002fe0:	b082      	sub	sp, #8
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8002fe2:	d407      	bmi.n	8002ff4 <USART2_IRQHandler+0x20>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8002fe4:	681a      	ldr	r2, [r3, #0]
  /* USER CODE BEGIN USART_RXNE */

  /* USER CODE END USART_RXNE  */
  }

  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8002fe6:	0612      	lsls	r2, r2, #24
 8002fe8:	d413      	bmi.n	8003012 <USART2_IRQHandler+0x3e>
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8002fea:	681b      	ldr	r3, [r3, #0]
    UFCP_TX_IRQ_Handler(&pUSART);
    /* USER CODE BEGIN USART_TXE */
    /* USER CODE END USART_TXE   */
  }

  if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 8002fec:	071b      	lsls	r3, r3, #28
 8002fee:	d418      	bmi.n	8003022 <USART2_IRQHandler+0x4e>
    /* USER CODE END USART_ORE   */
  }
  /* USER CODE BEGIN USART_IRQn 1 */

  /* USER CODE END USART_IRQn 1 */
}
 8002ff0:	b002      	add	sp, #8
 8002ff2:	bd10      	pop	{r4, pc}
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8002ff4:	6859      	ldr	r1, [r3, #4]
    retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx))); /* Flag 0 = RX */
 8002ff6:	4620      	mov	r0, r4
 8002ff8:	b2c9      	uxtb	r1, r1
 8002ffa:	f005 fcaf 	bl	800895c <UFCP_RX_IRQ_Handler>
 8002ffe:	8803      	ldrh	r3, [r0, #0]
    if (retVal == 1)
 8003000:	2b01      	cmp	r3, #1
 8003002:	d021      	beq.n	8003048 <USART2_IRQHandler+0x74>
    if (retVal == 2)
 8003004:	2b02      	cmp	r3, #2
 8003006:	d01c      	beq.n	8003042 <USART2_IRQHandler+0x6e>
  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8003008:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	0612      	lsls	r2, r2, #24
 8003010:	d5eb      	bpl.n	8002fea <USART2_IRQHandler+0x16>
    UFCP_TX_IRQ_Handler(&pUSART);
 8003012:	4810      	ldr	r0, [pc, #64]	; (8003054 <USART2_IRQHandler+0x80>)
 8003014:	f005 fbfa 	bl	800880c <UFCP_TX_IRQ_Handler>
  if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 8003018:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	071b      	lsls	r3, r3, #28
 8003020:	d5e6      	bpl.n	8002ff0 <USART2_IRQHandler+0x1c>
    UFCP_OVR_IRQ_Handler(&pUSART);
 8003022:	480c      	ldr	r0, [pc, #48]	; (8003054 <USART2_IRQHandler+0x80>)
 8003024:	f005 fd06 	bl	8008a34 <UFCP_OVR_IRQ_Handler>
    LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 8003028:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  tmpreg = USARTx->SR;
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 8003030:	9a01      	ldr	r2, [sp, #4]
  tmpreg = USARTx->DR;
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8003036:	9b01      	ldr	r3, [sp, #4]
}
 8003038:	b002      	add	sp, #8
 800303a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    UI_SerialCommunicationTimeOutStop();
 800303e:	f000 b8c1 	b.w	80031c4 <UI_SerialCommunicationTimeOutStop>
      UI_SerialCommunicationTimeOutStop();
 8003042:	f000 f8bf 	bl	80031c4 <UI_SerialCommunicationTimeOutStop>
 8003046:	e7df      	b.n	8003008 <USART2_IRQHandler+0x34>
      UI_SerialCommunicationTimeOutStart();
 8003048:	f000 f8c2 	bl	80031d0 <UI_SerialCommunicationTimeOutStart>
  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 800304c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003050:	e7c8      	b.n	8002fe4 <USART2_IRQHandler+0x10>
 8003052:	bf00      	nop
 8003054:	2000042c 	.word	0x2000042c

08003058 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8003058:	b510      	push	{r4, lr}
 800305a:	b082      	sub	sp, #8
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 800305c:	f7fe fe8a 	bl	8001d74 <TSK_HardwareFaultTask>
 8003060:	4c1b      	ldr	r4, [pc, #108]	; (80030d0 <HardFault_Handler+0x78>)

  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
    {
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 8003062:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	0712      	lsls	r2, r2, #28
 800306a:	d41d      	bmi.n	80030a8 <HardFault_Handler+0x50>
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800306c:	681a      	ldr	r2, [r3, #0]
        UFCP_OVR_IRQ_Handler(&pUSART);
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
        UI_SerialCommunicationTimeOutStop();
      }

      if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 800306e:	0610      	lsls	r0, r2, #24
 8003070:	d40f      	bmi.n	8003092 <HardFault_Handler+0x3a>
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8003072:	681a      	ldr	r2, [r3, #0]
      {
        UFCP_TX_IRQ_Handler(&pUSART);
      }

      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8003074:	0692      	lsls	r2, r2, #26
 8003076:	d5f6      	bpl.n	8003066 <HardFault_Handler+0xe>
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8003078:	6859      	ldr	r1, [r3, #4]
      {
        uint16_t retVal;
        retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx)));
 800307a:	4620      	mov	r0, r4
 800307c:	b2c9      	uxtb	r1, r1
 800307e:	f005 fc6d 	bl	800895c <UFCP_RX_IRQ_Handler>
 8003082:	8803      	ldrh	r3, [r0, #0]
        if (retVal == 1)
 8003084:	2b01      	cmp	r3, #1
 8003086:	d01f      	beq.n	80030c8 <HardFault_Handler+0x70>
        {
          UI_SerialCommunicationTimeOutStart();
        }
        if (retVal == 2)
 8003088:	2b02      	cmp	r3, #2
 800308a:	d1ea      	bne.n	8003062 <HardFault_Handler+0xa>
        {
          UI_SerialCommunicationTimeOutStop();
 800308c:	f000 f89a 	bl	80031c4 <UI_SerialCommunicationTimeOutStop>
 8003090:	e7e7      	b.n	8003062 <HardFault_Handler+0xa>
        UFCP_TX_IRQ_Handler(&pUSART);
 8003092:	4620      	mov	r0, r4
 8003094:	f005 fbba 	bl	800880c <UFCP_TX_IRQ_Handler>
      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8003098:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	0691      	lsls	r1, r2, #26
 80030a0:	d4ea      	bmi.n	8003078 <HardFault_Handler+0x20>
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 80030a2:	681a      	ldr	r2, [r3, #0]
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 80030a4:	0712      	lsls	r2, r2, #28
 80030a6:	d5e1      	bpl.n	800306c <HardFault_Handler+0x14>
        UFCP_OVR_IRQ_Handler(&pUSART);
 80030a8:	4620      	mov	r0, r4
 80030aa:	f005 fcc3 	bl	8008a34 <UFCP_OVR_IRQ_Handler>
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 80030ae:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  tmpreg = USARTx->SR;
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 80030b6:	9a01      	ldr	r2, [sp, #4]
  tmpreg = USARTx->DR;
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 80030bc:	9b01      	ldr	r3, [sp, #4]
        UI_SerialCommunicationTimeOutStop();
 80030be:	f000 f881 	bl	80031c4 <UI_SerialCommunicationTimeOutStop>
      if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 80030c2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80030c6:	e7d1      	b.n	800306c <HardFault_Handler+0x14>
          UI_SerialCommunicationTimeOutStart();
 80030c8:	f000 f882 	bl	80031d0 <UI_SerialCommunicationTimeOutStart>
        if (retVal == 2)
 80030cc:	e7c9      	b.n	8003062 <HardFault_Handler+0xa>
 80030ce:	bf00      	nop
 80030d0:	2000042c 	.word	0x2000042c

080030d4 <EXTI3_IRQHandler>:

/* USER CODE BEGIN 1 */
/*Dashboard wakes up the motor controller by EXTI Line Interrupt*/
uint8_t triggered = 0;
void EXTI3_IRQHandler(void)
{
 80030d4:	b508      	push	{r3, lr}
   if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_3) != RESET)
 80030d6:	4b07      	ldr	r3, [pc, #28]	; (80030f4 <EXTI3_IRQHandler+0x20>)
 80030d8:	695a      	ldr	r2, [r3, #20]
 80030da:	0712      	lsls	r2, r2, #28
 80030dc:	d400      	bmi.n	80030e0 <EXTI3_IRQHandler+0xc>
	   __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_3);
       /*Wake Up the Motor Controller*/
	   POWER_CHANGE_STATE(WAKEUP);
	   triggered ++;
   }
}
 80030de:	bd08      	pop	{r3, pc}
	   __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_3);
 80030e0:	2208      	movs	r2, #8
 80030e2:	615a      	str	r2, [r3, #20]
	   POWER_CHANGE_STATE(WAKEUP);
 80030e4:	2002      	movs	r0, #2
 80030e6:	f005 fcd3 	bl	8008a90 <POWER_CHANGE_STATE>
	   triggered ++;
 80030ea:	4a03      	ldr	r2, [pc, #12]	; (80030f8 <EXTI3_IRQHandler+0x24>)
 80030ec:	7813      	ldrb	r3, [r2, #0]
 80030ee:	3301      	adds	r3, #1
 80030f0:	7013      	strb	r3, [r2, #0]
}
 80030f2:	bd08      	pop	{r3, pc}
 80030f4:	40013c00 	.word	0x40013c00
 80030f8:	20000b98 	.word	0x20000b98

080030fc <UI_TaskInit>:
static volatile uint16_t  bCOMTimeoutCounter;
static volatile uint16_t  bCOMATRTimeCounter = SERIALCOM_ATR_TIME_TICKS;

void UI_TaskInit( uint32_t* pUICfg, uint8_t bMCNum, MCI_Handle_t* pMCIList[],
                  MCT_Handle_t* pMCTList[],const char* s_fwVer )
{
 80030fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    pMCP = &MCP_UI_Params;
 8003100:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8003174 <UI_TaskInit+0x78>
    pMCP->_Super = UI_Params;
 8003104:	f8df e070 	ldr.w	lr, [pc, #112]	; 8003178 <UI_TaskInit+0x7c>

    UFCP_Init( & pUSART );
 8003108:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800317c <UI_TaskInit+0x80>
{
 800310c:	461e      	mov	r6, r3
    pMCP = &MCP_UI_Params;
 800310e:	4b15      	ldr	r3, [pc, #84]	; (8003164 <UI_TaskInit+0x68>)
 8003110:	f8c8 3000 	str.w	r3, [r8]
{
 8003114:	4607      	mov	r7, r0
 8003116:	460c      	mov	r4, r1
 8003118:	4615      	mov	r5, r2
    pMCP->_Super = UI_Params;
 800311a:	469c      	mov	ip, r3
 800311c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8003120:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003124:	e89e 0003 	ldmia.w	lr, {r0, r1}
{
 8003128:	b082      	sub	sp, #8
    pMCP->_Super = UI_Params;
 800312a:	e88c 0003 	stmia.w	ip, {r0, r1}
    UFCP_Init( & pUSART );
 800312e:	4648      	mov	r0, r9
{
 8003130:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    UFCP_Init( & pUSART );
 8003134:	f005 fb68 	bl	8008808 <UFCP_Init>
    MCP_Init(pMCP, (FCP_Handle_t *) & pUSART, & UFCP_Send, & UFCP_Receive, & UFCP_AbortReceive, s_fwVer);
 8003138:	4b0b      	ldr	r3, [pc, #44]	; (8003168 <UI_TaskInit+0x6c>)
 800313a:	f8d8 0000 	ldr.w	r0, [r8]
 800313e:	9300      	str	r3, [sp, #0]
 8003140:	4649      	mov	r1, r9
 8003142:	4b0a      	ldr	r3, [pc, #40]	; (800316c <UI_TaskInit+0x70>)
 8003144:	4a0a      	ldr	r2, [pc, #40]	; (8003170 <UI_TaskInit+0x74>)
 8003146:	f8cd a004 	str.w	sl, [sp, #4]
 800314a:	f7ff fb97 	bl	800287c <MCP_Init>
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 800314e:	f8d8 0000 	ldr.w	r0, [r8]
 8003152:	970a      	str	r7, [sp, #40]	; 0x28
 8003154:	4633      	mov	r3, r6
 8003156:	462a      	mov	r2, r5
 8003158:	4621      	mov	r1, r4

}
 800315a:	b002      	add	sp, #8
 800315c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 8003160:	f000 b83c 	b.w	80031dc <UI_Init>
 8003164:	20000b9c 	.word	0x20000b9c
 8003168:	08008a55 	.word	0x08008a55
 800316c:	08008875 	.word	0x08008875
 8003170:	080088a1 	.word	0x080088a1
 8003174:	20000c50 	.word	0x20000c50
 8003178:	20000a20 	.word	0x20000a20
 800317c:	2000042c 	.word	0x2000042c

08003180 <UI_Scheduler>:

__weak void UI_Scheduler(void)
{
  if(bUITaskCounter > 0u)
 8003180:	4a0d      	ldr	r2, [pc, #52]	; (80031b8 <UI_Scheduler+0x38>)
 8003182:	8813      	ldrh	r3, [r2, #0]
 8003184:	b29b      	uxth	r3, r3
 8003186:	b11b      	cbz	r3, 8003190 <UI_Scheduler+0x10>
  {
    bUITaskCounter--;
 8003188:	8813      	ldrh	r3, [r2, #0]
 800318a:	3b01      	subs	r3, #1
 800318c:	b29b      	uxth	r3, r3
 800318e:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMTimeoutCounter > 1u)
 8003190:	4a0a      	ldr	r2, [pc, #40]	; (80031bc <UI_Scheduler+0x3c>)
 8003192:	8813      	ldrh	r3, [r2, #0]
 8003194:	b29b      	uxth	r3, r3
 8003196:	2b01      	cmp	r3, #1
 8003198:	d903      	bls.n	80031a2 <UI_Scheduler+0x22>
  {
    bCOMTimeoutCounter--;
 800319a:	8813      	ldrh	r3, [r2, #0]
 800319c:	3b01      	subs	r3, #1
 800319e:	b29b      	uxth	r3, r3
 80031a0:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMATRTimeCounter > 1u)
 80031a2:	4a07      	ldr	r2, [pc, #28]	; (80031c0 <UI_Scheduler+0x40>)
 80031a4:	8813      	ldrh	r3, [r2, #0]
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d903      	bls.n	80031b4 <UI_Scheduler+0x34>
  {
    bCOMATRTimeCounter--;
 80031ac:	8813      	ldrh	r3, [r2, #0]
 80031ae:	3b01      	subs	r3, #1
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	8013      	strh	r3, [r2, #0]
  }
}
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	20000c4e 	.word	0x20000c4e
 80031bc:	20000c4c 	.word	0x20000c4c
 80031c0:	20000574 	.word	0x20000574

080031c4 <UI_SerialCommunicationTimeOutStop>:
  return (retVal);
}

__weak void UI_SerialCommunicationTimeOutStop(void)
{
  bCOMTimeoutCounter = 0u;
 80031c4:	4b01      	ldr	r3, [pc, #4]	; (80031cc <UI_SerialCommunicationTimeOutStop+0x8>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	801a      	strh	r2, [r3, #0]
}
 80031ca:	4770      	bx	lr
 80031cc:	20000c4c 	.word	0x20000c4c

080031d0 <UI_SerialCommunicationTimeOutStart>:

__weak void UI_SerialCommunicationTimeOutStart(void)
{
  bCOMTimeoutCounter = SERIALCOM_TIMEOUT_OCCURENCE_TICKS;
 80031d0:	4b01      	ldr	r3, [pc, #4]	; (80031d8 <UI_SerialCommunicationTimeOutStart+0x8>)
 80031d2:	224f      	movs	r2, #79	; 0x4f
 80031d4:	801a      	strh	r2, [r3, #0]
}
 80031d6:	4770      	bx	lr
 80031d8:	20000c4c 	.word	0x20000c4c

080031dc <UI_Init>:
  */
__weak void UI_Init(UI_Handle_t *pHandle, uint8_t bMCNum, MCI_Handle_t ** pMCI, MCT_Handle_t** pMCT, uint32_t* pUICfg)
{
  pHandle->bDriveNum = bMCNum;
  pHandle->pMCI = pMCI;
  pHandle->pMCT = pMCT;
 80031dc:	e9c0 2302 	strd	r2, r3, [r0, #8]
  pHandle->bDriveNum = bMCNum;
 80031e0:	7101      	strb	r1, [r0, #4]
  pHandle->bSelectedDrive = 0u;
  pHandle->pUICfg = pUICfg;
 80031e2:	9b00      	ldr	r3, [sp, #0]
 80031e4:	6103      	str	r3, [r0, #16]
  pHandle->bSelectedDrive = 0u;
 80031e6:	2100      	movs	r1, #0
 80031e8:	7501      	strb	r1, [r0, #20]
}
 80031ea:	4770      	bx	lr

080031ec <UI_SelectMC>:
  * @retval Boolean set to true if the bSelectMC is valid oterwise return false.
  */
__weak bool UI_SelectMC(UI_Handle_t *pHandle,uint8_t bSelectMC)
{
  bool retVal = true;
  if (bSelectMC  >= pHandle->bDriveNum)
 80031ec:	7903      	ldrb	r3, [r0, #4]
 80031ee:	428b      	cmp	r3, r1
  {
    retVal = false;
  }
  else
  {
    pHandle->bSelectedDrive = bSelectMC;
 80031f0:	bf86      	itte	hi
 80031f2:	7501      	strbhi	r1, [r0, #20]
  bool retVal = true;
 80031f4:	2001      	movhi	r0, #1
    retVal = false;
 80031f6:	2000      	movls	r0, #0
  }
  return retVal;
}
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop

080031fc <UI_GetSelectedMC>:
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak uint8_t UI_GetSelectedMC(UI_Handle_t *pHandle)
{
  return (pHandle->bSelectedDrive);
}
 80031fc:	7d00      	ldrb	r0, [r0, #20]
 80031fe:	4770      	bx	lr

08003200 <UI_SetReg>:
  *         See MC_PROTOCOL_REG_xxx for code definition.
  * @param  wValue: New value to set.
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak bool UI_SetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, int32_t wValue)
{
 8003200:	b530      	push	{r4, r5, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8003202:	6884      	ldr	r4, [r0, #8]
 8003204:	7d03      	ldrb	r3, [r0, #20]
 8003206:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
{
 800320a:	4614      	mov	r4, r2
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 800320c:	68c2      	ldr	r2, [r0, #12]
{
 800320e:	b083      	sub	sp, #12
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8003210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]

  bool retVal = true;
  switch (bRegID)
 8003214:	295b      	cmp	r1, #91	; 0x5b
 8003216:	d82f      	bhi.n	8003278 <UI_SetReg+0x78>
 8003218:	e8df f001 	tbb	[pc, r1]
 800321c:	412e2e3d 	.word	0x412e2e3d
 8003220:	544e482e 	.word	0x544e482e
 8003224:	726c665a 	.word	0x726c665a
 8003228:	908a8478 	.word	0x908a8478
 800322c:	2e2e2e2e 	.word	0x2e2e2e2e
 8003230:	2e2e2e2e 	.word	0x2e2e2e2e
 8003234:	2e2e2e2e 	.word	0x2e2e2e2e
 8003238:	2e2e2e2e 	.word	0x2e2e2e2e
 800323c:	2e2e2e2e 	.word	0x2e2e2e2e
 8003240:	2e2e2e2e 	.word	0x2e2e2e2e
 8003244:	2e2e2e2e 	.word	0x2e2e2e2e
 8003248:	2e2e2e2e 	.word	0x2e2e2e2e
 800324c:	2e2e2e2e 	.word	0x2e2e2e2e
 8003250:	2e2e2e2e 	.word	0x2e2e2e2e
 8003254:	2e2e2e2e 	.word	0x2e2e2e2e
 8003258:	2e2e2e2e 	.word	0x2e2e2e2e
 800325c:	2e2e962e 	.word	0x2e2e962e
 8003260:	2e2e2e2e 	.word	0x2e2e2e2e
 8003264:	2e2e2e2e 	.word	0x2e2e2e2e
 8003268:	2e2e2e2e 	.word	0x2e2e2e2e
 800326c:	2e2e2e2e 	.word	0x2e2e2e2e
 8003270:	2e2e2e2e 	.word	0x2e2e2e2e
 8003274:	312e2e2e 	.word	0x312e2e2e
 8003278:	2000      	movs	r0, #0
    retVal = false;
    break;
  }

  return retVal;
}
 800327a:	b003      	add	sp, #12
 800327c:	bd30      	pop	{r4, r5, pc}
      MCI_ExecSpeedRamp(pMCI,(int16_t)((wValue*SPEED_UNIT)/_RPM),0);
 800327e:	493f      	ldr	r1, [pc, #252]	; (800337c <UI_SetReg+0x17c>)
 8003280:	fb81 3104 	smull	r3, r1, r1, r4
 8003284:	eba1 71e4 	sub.w	r1, r1, r4, asr #31
 8003288:	4628      	mov	r0, r5
 800328a:	2200      	movs	r2, #0
 800328c:	b209      	sxth	r1, r1
 800328e:	f7fe f819 	bl	80012c4 <MCI_ExecSpeedRamp>
  bool retVal = true;
 8003292:	2001      	movs	r0, #1
    break;
 8003294:	e7f1      	b.n	800327a <UI_SetReg+0x7a>
      retVal = UI_SelectMC(pHandle,(uint8_t)wValue);
 8003296:	b2e1      	uxtb	r1, r4
 8003298:	f7ff ffa8 	bl	80031ec <UI_SelectMC>
    break;
 800329c:	e7ed      	b.n	800327a <UI_SetReg+0x7a>
      if ((STC_Modality_t)wValue == STC_TORQUE_MODE)
 800329e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80032a2:	d057      	beq.n	8003354 <UI_SetReg+0x154>
      if ((STC_Modality_t)wValue == STC_SPEED_MODE)
 80032a4:	2c01      	cmp	r4, #1
 80032a6:	d05f      	beq.n	8003368 <UI_SetReg+0x168>
  bool retVal = true;
 80032a8:	2001      	movs	r0, #1
 80032aa:	e7e6      	b.n	800327a <UI_SetReg+0x7a>
      PID_SetKP(pMCT->pPIDSpeed,(int16_t)wValue);
 80032ac:	6818      	ldr	r0, [r3, #0]
 80032ae:	b221      	sxth	r1, r4
 80032b0:	f004 f908 	bl	80074c4 <PID_SetKP>
  bool retVal = true;
 80032b4:	2001      	movs	r0, #1
    break;
 80032b6:	e7e0      	b.n	800327a <UI_SetReg+0x7a>
      PID_SetKI(pMCT->pPIDSpeed,(int16_t)wValue);
 80032b8:	6818      	ldr	r0, [r3, #0]
 80032ba:	b221      	sxth	r1, r4
 80032bc:	f004 f904 	bl	80074c8 <PID_SetKI>
  bool retVal = true;
 80032c0:	2001      	movs	r0, #1
    break;
 80032c2:	e7da      	b.n	800327a <UI_SetReg+0x7a>
      PID_SetKD(pMCT->pPIDSpeed,(int16_t)wValue);
 80032c4:	6818      	ldr	r0, [r3, #0]
 80032c6:	b221      	sxth	r1, r4
 80032c8:	f004 f90e 	bl	80074e8 <PID_SetKD>
  bool retVal = true;
 80032cc:	2001      	movs	r0, #1
    break;
 80032ce:	e7d4      	b.n	800327a <UI_SetReg+0x7a>
      currComp = MCI_GetIqdref(pMCI);
 80032d0:	4628      	mov	r0, r5
 80032d2:	f7fe f8bb 	bl	800144c <MCI_GetIqdref>
 80032d6:	9001      	str	r0, [sp, #4]
      currComp.q = (int16_t)wValue;
 80032d8:	f8ad 4004 	strh.w	r4, [sp, #4]
      MCI_SetCurrentReferences(pMCI,currComp);
 80032dc:	4628      	mov	r0, r5
 80032de:	9901      	ldr	r1, [sp, #4]
 80032e0:	f7fe f804 	bl	80012ec <MCI_SetCurrentReferences>
  bool retVal = true;
 80032e4:	2001      	movs	r0, #1
    break;
 80032e6:	e7c8      	b.n	800327a <UI_SetReg+0x7a>
      PID_SetKP(pMCT->pPIDIq,(int16_t)wValue);
 80032e8:	6858      	ldr	r0, [r3, #4]
 80032ea:	b221      	sxth	r1, r4
 80032ec:	f004 f8ea 	bl	80074c4 <PID_SetKP>
  bool retVal = true;
 80032f0:	2001      	movs	r0, #1
    break;
 80032f2:	e7c2      	b.n	800327a <UI_SetReg+0x7a>
      PID_SetKI(pMCT->pPIDIq,(int16_t)wValue);
 80032f4:	6858      	ldr	r0, [r3, #4]
 80032f6:	b221      	sxth	r1, r4
 80032f8:	f004 f8e6 	bl	80074c8 <PID_SetKI>
  bool retVal = true;
 80032fc:	2001      	movs	r0, #1
    break;
 80032fe:	e7bc      	b.n	800327a <UI_SetReg+0x7a>
      PID_SetKD(pMCT->pPIDIq,(int16_t)wValue);
 8003300:	6858      	ldr	r0, [r3, #4]
 8003302:	b221      	sxth	r1, r4
 8003304:	f004 f8f0 	bl	80074e8 <PID_SetKD>
  bool retVal = true;
 8003308:	2001      	movs	r0, #1
    break;
 800330a:	e7b6      	b.n	800327a <UI_SetReg+0x7a>
      currComp = MCI_GetIqdref(pMCI);
 800330c:	4628      	mov	r0, r5
 800330e:	f7fe f89d 	bl	800144c <MCI_GetIqdref>
 8003312:	9001      	str	r0, [sp, #4]
      currComp.d = (int16_t)wValue;
 8003314:	f8ad 4006 	strh.w	r4, [sp, #6]
      MCI_SetCurrentReferences(pMCI,currComp);
 8003318:	4628      	mov	r0, r5
 800331a:	9901      	ldr	r1, [sp, #4]
 800331c:	f7fd ffe6 	bl	80012ec <MCI_SetCurrentReferences>
  bool retVal = true;
 8003320:	2001      	movs	r0, #1
    break;
 8003322:	e7aa      	b.n	800327a <UI_SetReg+0x7a>
      PID_SetKP(pMCT->pPIDId,(int16_t)wValue);
 8003324:	6898      	ldr	r0, [r3, #8]
 8003326:	b221      	sxth	r1, r4
 8003328:	f004 f8cc 	bl	80074c4 <PID_SetKP>
  bool retVal = true;
 800332c:	2001      	movs	r0, #1
    break;
 800332e:	e7a4      	b.n	800327a <UI_SetReg+0x7a>
      PID_SetKI(pMCT->pPIDId,(int16_t)wValue);
 8003330:	6898      	ldr	r0, [r3, #8]
 8003332:	b221      	sxth	r1, r4
 8003334:	f004 f8c8 	bl	80074c8 <PID_SetKI>
  bool retVal = true;
 8003338:	2001      	movs	r0, #1
    break;
 800333a:	e79e      	b.n	800327a <UI_SetReg+0x7a>
      PID_SetKD(pMCT->pPIDId,(int16_t)wValue);
 800333c:	6898      	ldr	r0, [r3, #8]
 800333e:	b221      	sxth	r1, r4
 8003340:	f004 f8d2 	bl	80074e8 <PID_SetKD>
  bool retVal = true;
 8003344:	2001      	movs	r0, #1
    break;
 8003346:	e798      	b.n	800327a <UI_SetReg+0x7a>
      MCI_SetIdref(pMCI,(int16_t)wValue);
 8003348:	4628      	mov	r0, r5
 800334a:	b221      	sxth	r1, r4
 800334c:	f7fe f8d4 	bl	80014f8 <MCI_SetIdref>
  bool retVal = true;
 8003350:	2001      	movs	r0, #1
    break;
 8003352:	e792      	b.n	800327a <UI_SetReg+0x7a>
        MCI_ExecTorqueRamp(pMCI, MCI_GetTeref(pMCI),0);
 8003354:	4628      	mov	r0, r5
 8003356:	f7fe f8a3 	bl	80014a0 <MCI_GetTeref>
 800335a:	4622      	mov	r2, r4
 800335c:	4601      	mov	r1, r0
 800335e:	4628      	mov	r0, r5
 8003360:	f7fd ffba 	bl	80012d8 <MCI_ExecTorqueRamp>
  bool retVal = true;
 8003364:	2001      	movs	r0, #1
 8003366:	e788      	b.n	800327a <UI_SetReg+0x7a>
        MCI_ExecSpeedRamp(pMCI, MCI_GetMecSpeedRefUnit(pMCI),0);
 8003368:	4628      	mov	r0, r5
 800336a:	f7fe f841 	bl	80013f0 <MCI_GetMecSpeedRefUnit>
 800336e:	2200      	movs	r2, #0
 8003370:	4601      	mov	r1, r0
 8003372:	4628      	mov	r0, r5
 8003374:	f7fd ffa6 	bl	80012c4 <MCI_ExecSpeedRamp>
  bool retVal = true;
 8003378:	4620      	mov	r0, r4
 800337a:	e77e      	b.n	800327a <UI_SetReg+0x7a>
 800337c:	2aaaaaab 	.word	0x2aaaaaab

08003380 <UI_GetReg>:

/* Used to execute a GetReg command coming from the user. */
__weak int32_t UI_GetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, bool * success)
{
 8003380:	b530      	push	{r4, r5, lr}
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8003382:	68c4      	ldr	r4, [r0, #12]
 8003384:	7d03      	ldrb	r3, [r0, #20]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8003386:	6885      	ldr	r5, [r0, #8]
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8003388:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 800338c:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
{
 8003390:	b08d      	sub	sp, #52	; 0x34

  int32_t bRetVal = 0;

  if ( success != (bool *) 0 )
 8003392:	2a00      	cmp	r2, #0
 8003394:	f000 808b 	beq.w	80034ae <UI_GetReg+0x12e>
  {
    *success = true;
 8003398:	f04f 0c01 	mov.w	ip, #1
 800339c:	f882 c000 	strb.w	ip, [r2]
  }

  switch (bRegID)
 80033a0:	2981      	cmp	r1, #129	; 0x81
 80033a2:	f200 8101 	bhi.w	80035a8 <UI_GetReg+0x228>
 80033a6:	e8df f011 	tbh	[pc, r1, lsl #1]
 80033aa:	0143      	.short	0x0143
 80033ac:	016f013d 	.word	0x016f013d
 80033b0:	0164016b 	.word	0x0164016b
 80033b4:	015c0160 	.word	0x015c0160
 80033b8:	01020158 	.word	0x01020158
 80033bc:	01aa01a2 	.word	0x01aa01a2
 80033c0:	00fa01a6 	.word	0x00fa01a6
 80033c4:	01b201b6 	.word	0x01b201b6
 80033c8:	00ff01ae 	.word	0x00ff01ae
 80033cc:	00ff00ff 	.word	0x00ff00ff
 80033d0:	00ff00ff 	.word	0x00ff00ff
 80033d4:	00ff00ff 	.word	0x00ff00ff
 80033d8:	00ff00ff 	.word	0x00ff00ff
 80033dc:	01540116 	.word	0x01540116
 80033e0:	00ff0150 	.word	0x00ff0150
 80033e4:	01d700ff 	.word	0x01d700ff
 80033e8:	0107010c 	.word	0x0107010c
 80033ec:	01d000ff 	.word	0x01d000ff
 80033f0:	01bc01cb 	.word	0x01bc01cb
 80033f4:	0146014b 	.word	0x0146014b
 80033f8:	0107010c 	.word	0x0107010c
 80033fc:	00fa0102 	.word	0x00fa0102
 8003400:	01c60111 	.word	0x01c60111
 8003404:	019d01c1 	.word	0x019d01c1
 8003408:	01730188 	.word	0x01730188
 800340c:	00ff00ff 	.word	0x00ff00ff
 8003410:	00ff00ff 	.word	0x00ff00ff
 8003414:	00ff00ff 	.word	0x00ff00ff
 8003418:	00ff00ff 	.word	0x00ff00ff
 800341c:	00ff00ff 	.word	0x00ff00ff
 8003420:	00ff00ff 	.word	0x00ff00ff
 8003424:	00ff00ff 	.word	0x00ff00ff
 8003428:	012f0136 	.word	0x012f0136
 800342c:	00ff00fa 	.word	0x00ff00fa
 8003430:	00ff00ff 	.word	0x00ff00ff
 8003434:	00ff00ff 	.word	0x00ff00ff
 8003438:	00ff00ff 	.word	0x00ff00ff
 800343c:	00ff00ff 	.word	0x00ff00ff
 8003440:	00ff00ff 	.word	0x00ff00ff
 8003444:	00ff00ff 	.word	0x00ff00ff
 8003448:	00ff00ff 	.word	0x00ff00ff
 800344c:	00ff00ff 	.word	0x00ff00ff
 8003450:	00ff00ff 	.word	0x00ff00ff
 8003454:	00ff00ff 	.word	0x00ff00ff
 8003458:	00ff00ff 	.word	0x00ff00ff
 800345c:	00ff00ff 	.word	0x00ff00ff
 8003460:	00ff011e 	.word	0x00ff011e
 8003464:	00ff00ff 	.word	0x00ff00ff
 8003468:	00ff00ff 	.word	0x00ff00ff
 800346c:	00ff00ff 	.word	0x00ff00ff
 8003470:	00ff00ff 	.word	0x00ff00ff
 8003474:	00ff00ff 	.word	0x00ff00ff
 8003478:	00ff00ff 	.word	0x00ff00ff
 800347c:	00ff00ff 	.word	0x00ff00ff
 8003480:	00ff00ff 	.word	0x00ff00ff
 8003484:	011a00ff 	.word	0x011a00ff
 8003488:	01ba012b 	.word	0x01ba012b
 800348c:	00f700ff 	.word	0x00f700ff
 8003490:	00ff00f7 	.word	0x00ff00f7
 8003494:	00ff00ff 	.word	0x00ff00ff
 8003498:	00ff00ff 	.word	0x00ff00ff
 800349c:	00ff00ff 	.word	0x00ff00ff
 80034a0:	00ff00ff 	.word	0x00ff00ff
 80034a4:	00ff00ff 	.word	0x00ff00ff
 80034a8:	00ff00ff 	.word	0x00ff00ff
 80034ac:	00f7      	.short	0x00f7
 80034ae:	2970      	cmp	r1, #112	; 0x70
 80034b0:	d872      	bhi.n	8003598 <UI_GetReg+0x218>
 80034b2:	e8df f011 	tbh	[pc, r1, lsl #1]
 80034b6:	00bd      	.short	0x00bd
 80034b8:	00e900b7 	.word	0x00e900b7
 80034bc:	00de00e5 	.word	0x00de00e5
 80034c0:	00d600da 	.word	0x00d600da
 80034c4:	007c00d2 	.word	0x007c00d2
 80034c8:	0124011c 	.word	0x0124011c
 80034cc:	00740120 	.word	0x00740120
 80034d0:	012c0130 	.word	0x012c0130
 80034d4:	00710128 	.word	0x00710128
 80034d8:	00710071 	.word	0x00710071
 80034dc:	00710071 	.word	0x00710071
 80034e0:	00710071 	.word	0x00710071
 80034e4:	00710071 	.word	0x00710071
 80034e8:	00ce0090 	.word	0x00ce0090
 80034ec:	007100ca 	.word	0x007100ca
 80034f0:	01510071 	.word	0x01510071
 80034f4:	00810086 	.word	0x00810086
 80034f8:	014a0071 	.word	0x014a0071
 80034fc:	01360145 	.word	0x01360145
 8003500:	00c000c5 	.word	0x00c000c5
 8003504:	00810086 	.word	0x00810086
 8003508:	0074007c 	.word	0x0074007c
 800350c:	0140008b 	.word	0x0140008b
 8003510:	0117013b 	.word	0x0117013b
 8003514:	00ed0102 	.word	0x00ed0102
 8003518:	00710071 	.word	0x00710071
 800351c:	00710071 	.word	0x00710071
 8003520:	00710071 	.word	0x00710071
 8003524:	00710071 	.word	0x00710071
 8003528:	00710071 	.word	0x00710071
 800352c:	00710071 	.word	0x00710071
 8003530:	00710071 	.word	0x00710071
 8003534:	00a900b0 	.word	0x00a900b0
 8003538:	00710074 	.word	0x00710074
 800353c:	00710071 	.word	0x00710071
 8003540:	00710071 	.word	0x00710071
 8003544:	00710071 	.word	0x00710071
 8003548:	00710071 	.word	0x00710071
 800354c:	00710071 	.word	0x00710071
 8003550:	00710071 	.word	0x00710071
 8003554:	00710071 	.word	0x00710071
 8003558:	00710071 	.word	0x00710071
 800355c:	00710071 	.word	0x00710071
 8003560:	00710071 	.word	0x00710071
 8003564:	00710071 	.word	0x00710071
 8003568:	00710071 	.word	0x00710071
 800356c:	00710098 	.word	0x00710098
 8003570:	00710071 	.word	0x00710071
 8003574:	00710071 	.word	0x00710071
 8003578:	00710071 	.word	0x00710071
 800357c:	00710071 	.word	0x00710071
 8003580:	00710071 	.word	0x00710071
 8003584:	00710071 	.word	0x00710071
 8003588:	00710071 	.word	0x00710071
 800358c:	00710071 	.word	0x00710071
 8003590:	00940071 	.word	0x00940071
 8003594:	013400a5 	.word	0x013400a5
  int32_t bRetVal = 0;
 8003598:	2000      	movs	r0, #0
      }
	}
    break;
  }
  return bRetVal;
}
 800359a:	b00d      	add	sp, #52	; 0x34
 800359c:	bd30      	pop	{r4, r5, pc}
      bRetVal = MCI_GetIqdref(pMCI).d;
 800359e:	4628      	mov	r0, r5
 80035a0:	f7fd ff54 	bl	800144c <MCI_GetIqdref>
 80035a4:	1400      	asrs	r0, r0, #16
    break;
 80035a6:	e7f8      	b.n	800359a <UI_GetReg+0x21a>
        *success = false;
 80035a8:	2000      	movs	r0, #0
 80035aa:	7010      	strb	r0, [r2, #0]
  return bRetVal;
 80035ac:	e7f5      	b.n	800359a <UI_GetReg+0x21a>
      bRetVal = MCI_GetIqdref(pMCI).q;
 80035ae:	4628      	mov	r0, r5
 80035b0:	f7fd ff4c 	bl	800144c <MCI_GetIqdref>
 80035b4:	b200      	sxth	r0, r0
    break;
 80035b6:	e7f0      	b.n	800359a <UI_GetReg+0x21a>
      bRetVal = MCI_GetIqd(pMCI).d;
 80035b8:	4628      	mov	r0, r5
 80035ba:	f7fd ff39 	bl	8001430 <MCI_GetIqd>
 80035be:	1400      	asrs	r0, r0, #16
    break;
 80035c0:	e7eb      	b.n	800359a <UI_GetReg+0x21a>
      bRetVal = MCI_GetIqd(pMCI).q;
 80035c2:	4628      	mov	r0, r5
 80035c4:	f7fd ff34 	bl	8001430 <MCI_GetIqd>
 80035c8:	b200      	sxth	r0, r0
    break;
 80035ca:	e7e6      	b.n	800359a <UI_GetReg+0x21a>
      bRetVal = MCI_GetVqd(pMCI).q;
 80035cc:	4628      	mov	r0, r5
 80035ce:	f7fd ff4b 	bl	8001468 <MCI_GetVqd>
 80035d2:	b200      	sxth	r0, r0
    break;
 80035d4:	e7e1      	b.n	800359a <UI_GetReg+0x21a>
      bRetVal = (int32_t)VBS_GetAvBusVoltage_V(pMCT->pBusVoltageSensor);
 80035d6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80035d8:	f003 fa86 	bl	8006ae8 <VBS_GetAvBusVoltage_V>
    break;
 80035dc:	e7dd      	b.n	800359a <UI_GetReg+0x21a>
      bRetVal = (int32_t)PID_GetKPDivisor(pMCT->pPIDSpeed);
 80035de:	6820      	ldr	r0, [r4, #0]
 80035e0:	f003 ff7e 	bl	80074e0 <PID_GetKPDivisor>
    break;
 80035e4:	e7d9      	b.n	800359a <UI_GetReg+0x21a>
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 80035e6:	4628      	mov	r0, r5
 80035e8:	f7fd feec 	bl	80013c4 <MCI_GetControlMode>
 80035ec:	2801      	cmp	r0, #1
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 80035ee:	4628      	mov	r0, r5
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 80035f0:	f000 80c1 	beq.w	8003776 <UI_GetReg+0x3f6>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI) * _RPM)/SPEED_UNIT) ;
 80035f4:	f7fd fefc 	bl	80013f0 <MCI_GetMecSpeedRefUnit>
 80035f8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80035fc:	0040      	lsls	r0, r0, #1
 80035fe:	e7cc      	b.n	800359a <UI_GetReg+0x21a>
      bRetVal = (int32_t)PID_GetKIDivisor(pMCT->pPIDSpeed);
 8003600:	6820      	ldr	r0, [r4, #0]
 8003602:	f003 ff6f 	bl	80074e4 <PID_GetKIDivisor>
    break;
 8003606:	e7c8      	b.n	800359a <UI_GetReg+0x21a>
      bRetVal = (STC_GetMinAppNegativeMecSpeedUnit(pMCT->pSpeednTorqueCtrl)  * _RPM)/SPEED_UNIT ;
 8003608:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800360a:	f005 f839 	bl	8008680 <STC_GetMinAppNegativeMecSpeedUnit>
 800360e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003612:	0040      	lsls	r0, r0, #1
    break;
 8003614:	e7c1      	b.n	800359a <UI_GetReg+0x21a>
      bRetVal = (STC_GetMaxAppPositiveMecSpeedUnit(pMCT->pSpeednTorqueCtrl) * _RPM)/SPEED_UNIT ;
 8003616:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003618:	f005 f830 	bl	800867c <STC_GetMaxAppPositiveMecSpeedUnit>
 800361c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003620:	0040      	lsls	r0, r0, #1
    break;
 8003622:	e7ba      	b.n	800359a <UI_GetReg+0x21a>
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 8003624:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
 8003626:	b00d      	add	sp, #52	; 0x34
 8003628:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 800362c:	f005 b8e6 	b.w	80087fc <STM_GetFaultState>
      bRetVal = (int32_t)UI_GetSelectedMC(pHandle);
 8003630:	f7ff fde4 	bl	80031fc <UI_GetSelectedMC>
    break;
 8003634:	e7b1      	b.n	800359a <UI_GetReg+0x21a>
      bRetVal = MCI_GetIalphabeta(pMCI).beta;
 8003636:	4628      	mov	r0, r5
 8003638:	f7fd feec 	bl	8001414 <MCI_GetIalphabeta>
 800363c:	1400      	asrs	r0, r0, #16
    break;
 800363e:	e7ac      	b.n	800359a <UI_GetReg+0x21a>
      bRetVal = MCI_GetIalphabeta(pMCI).alpha;
 8003640:	4628      	mov	r0, r5
 8003642:	f7fd fee7 	bl	8001414 <MCI_GetIalphabeta>
 8003646:	b200      	sxth	r0, r0
    break;
 8003648:	e7a7      	b.n	800359a <UI_GetReg+0x21a>
      bRetVal = MPM_GetAvrgElMotorPowerW(pMCT->pMPM);
 800364a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800364c:	f003 fed8 	bl	8007400 <MPM_GetAvrgElMotorPowerW>
    break;
 8003650:	e7a3      	b.n	800359a <UI_GetReg+0x21a>
      bRetVal = (int32_t)NTC_GetAvTemp_C(pMCT->pTemperatureSensor);
 8003652:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003654:	f003 ff18 	bl	8007488 <NTC_GetAvTemp_C>
    break;
 8003658:	e79f      	b.n	800359a <UI_GetReg+0x21a>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDSpeed);
 800365a:	6820      	ldr	r0, [r4, #0]
 800365c:	f003 ff46 	bl	80074ec <PID_GetKD>
    break;
 8003660:	e79b      	b.n	800359a <UI_GetReg+0x21a>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDSpeed);
 8003662:	6820      	ldr	r0, [r4, #0]
 8003664:	f003 ff36 	bl	80074d4 <PID_GetKI>
    break;
 8003668:	e797      	b.n	800359a <UI_GetReg+0x21a>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDSpeed);
 800366a:	6820      	ldr	r0, [r4, #0]
 800366c:	f003 ff2e 	bl	80074cc <PID_GetKP>
    break;
 8003670:	e793      	b.n	800359a <UI_GetReg+0x21a>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI)*_RPM)/SPEED_UNIT);
 8003672:	4628      	mov	r0, r5
 8003674:	f7fd febc 	bl	80013f0 <MCI_GetMecSpeedRefUnit>
 8003678:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800367c:	0040      	lsls	r0, r0, #1
    break;
 800367e:	e78c      	b.n	800359a <UI_GetReg+0x21a>
      bRetVal = (int32_t)MCI_GetControlMode(pMCI);
 8003680:	4628      	mov	r0, r5
 8003682:	f7fd fe9f 	bl	80013c4 <MCI_GetControlMode>
    break;
 8003686:	e788      	b.n	800359a <UI_GetReg+0x21a>
      bRetVal = (int32_t)STM_GetState(pMCT->pStateMachine);
 8003688:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800368a:	f005 f8a9 	bl	80087e0 <STM_GetState>
	break;
 800368e:	e784      	b.n	800359a <UI_GetReg+0x21a>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003690:	6902      	ldr	r2, [r0, #16]
 8003692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003696:	0f1a      	lsrs	r2, r3, #28
 8003698:	3a01      	subs	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 800369a:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 800369e:	2a01      	cmp	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80036a0:	f103 33ff 	add.w	r3, r3, #4294967295
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80036a4:	d963      	bls.n	800376e <UI_GetReg+0x3ee>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	f63f af76 	bhi.w	8003598 <UI_GetReg+0x218>
        pSPD = pMCT->pSpeedSensorAux;
 80036ac:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 80036ae:	2800      	cmp	r0, #0
 80036b0:	f43f af72 	beq.w	8003598 <UI_GetReg+0x218>
        bRetVal = SPD_GetS16Speed(pSPD);
 80036b4:	f004 ff22 	bl	80084fc <SPD_GetS16Speed>
 80036b8:	e76f      	b.n	800359a <UI_GetReg+0x21a>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80036ba:	6902      	ldr	r2, [r0, #16]
 80036bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80036c0:	0f1a      	lsrs	r2, r3, #28
 80036c2:	3a01      	subs	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80036c4:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80036c8:	2a01      	cmp	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80036ca:	f103 33ff 	add.w	r3, r3, #4294967295
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80036ce:	d94a      	bls.n	8003766 <UI_GetReg+0x3e6>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	f63f af61 	bhi.w	8003598 <UI_GetReg+0x218>
        pSPD = pMCT->pSpeedSensorAux;
 80036d6:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 80036d8:	2800      	cmp	r0, #0
 80036da:	f43f af5d 	beq.w	8003598 <UI_GetReg+0x218>
        bRetVal = SPD_GetElAngle(pSPD);
 80036de:	f004 fecb 	bl	8008478 <SPD_GetElAngle>
 80036e2:	e75a      	b.n	800359a <UI_GetReg+0x21a>
      bRetVal = MCI_GetValphabeta(pMCI).beta;
 80036e4:	4628      	mov	r0, r5
 80036e6:	f7fd fecd 	bl	8001484 <MCI_GetValphabeta>
 80036ea:	1400      	asrs	r0, r0, #16
    break;
 80036ec:	e755      	b.n	800359a <UI_GetReg+0x21a>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDIq);
 80036ee:	6860      	ldr	r0, [r4, #4]
 80036f0:	f003 feec 	bl	80074cc <PID_GetKP>
    break;
 80036f4:	e751      	b.n	800359a <UI_GetReg+0x21a>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDIq);
 80036f6:	6860      	ldr	r0, [r4, #4]
 80036f8:	f003 fef8 	bl	80074ec <PID_GetKD>
    break;
 80036fc:	e74d      	b.n	800359a <UI_GetReg+0x21a>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDIq);
 80036fe:	6860      	ldr	r0, [r4, #4]
 8003700:	f003 fee8 	bl	80074d4 <PID_GetKI>
    break;
 8003704:	e749      	b.n	800359a <UI_GetReg+0x21a>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDId);
 8003706:	68a0      	ldr	r0, [r4, #8]
 8003708:	f003 fef0 	bl	80074ec <PID_GetKD>
    break;
 800370c:	e745      	b.n	800359a <UI_GetReg+0x21a>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDId);
 800370e:	68a0      	ldr	r0, [r4, #8]
 8003710:	f003 fee0 	bl	80074d4 <PID_GetKI>
    break;
 8003714:	e741      	b.n	800359a <UI_GetReg+0x21a>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDId);
 8003716:	68a0      	ldr	r0, [r4, #8]
 8003718:	f003 fed8 	bl	80074cc <PID_GetKP>
    break;
 800371c:	e73d      	b.n	800359a <UI_GetReg+0x21a>
      bRetVal = (int32_t)(MC_UID);
 800371e:	4819      	ldr	r0, [pc, #100]	; (8003784 <UI_GetReg+0x404>)
 8003720:	e73b      	b.n	800359a <UI_GetReg+0x21a>
      bRetVal = MCI_GetIab(pMCI).b;
 8003722:	4628      	mov	r0, r5
 8003724:	f7fd fe68 	bl	80013f8 <MCI_GetIab>
 8003728:	1400      	asrs	r0, r0, #16
    break;
 800372a:	e736      	b.n	800359a <UI_GetReg+0x21a>
      bRetVal = MCI_GetValphabeta(pMCI).alpha;
 800372c:	4628      	mov	r0, r5
 800372e:	f7fd fea9 	bl	8001484 <MCI_GetValphabeta>
 8003732:	b200      	sxth	r0, r0
    break;
 8003734:	e731      	b.n	800359a <UI_GetReg+0x21a>
      bRetVal = MCI_GetVqd(pMCI).d;
 8003736:	4628      	mov	r0, r5
 8003738:	f7fd fe96 	bl	8001468 <MCI_GetVqd>
 800373c:	1400      	asrs	r0, r0, #16
    break;
 800373e:	e72c      	b.n	800359a <UI_GetReg+0x21a>
      bRetVal = MCI_GetIab(pMCI).a;
 8003740:	4628      	mov	r0, r5
 8003742:	f7fd fe59 	bl	80013f8 <MCI_GetIab>
 8003746:	b200      	sxth	r0, r0
    break;
 8003748:	e727      	b.n	800359a <UI_GetReg+0x21a>
      if (pMCT->pRevupCtrl)
 800374a:	6960      	ldr	r0, [r4, #20]
 800374c:	2800      	cmp	r0, #0
 800374e:	f43f af23 	beq.w	8003598 <UI_GetReg+0x218>
        bRetVal = (int32_t)RUC_GetNumberOfPhases(pMCT->pRevupCtrl);
 8003752:	f004 fe8d 	bl	8008470 <RUC_GetNumberOfPhases>
 8003756:	e720      	b.n	800359a <UI_GetReg+0x21a>
      bRetVal = (int32_t)((MCI_GetAvrgMecSpeedUnit(pMCI) * _RPM)/SPEED_UNIT);
 8003758:	4628      	mov	r0, r5
 800375a:	f7fd fe41 	bl	80013e0 <MCI_GetAvrgMecSpeedUnit>
 800375e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003762:	0040      	lsls	r0, r0, #1
    break;
 8003764:	e719      	b.n	800359a <UI_GetReg+0x21a>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003766:	2b01      	cmp	r3, #1
        pSPD = pMCT->pSpeedSensorMain;
 8003768:	69a0      	ldr	r0, [r4, #24]
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 800376a:	d8b5      	bhi.n	80036d8 <UI_GetReg+0x358>
 800376c:	e7b3      	b.n	80036d6 <UI_GetReg+0x356>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 800376e:	2b01      	cmp	r3, #1
        pSPD = pMCT->pSpeedSensorMain;
 8003770:	69a0      	ldr	r0, [r4, #24]
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003772:	d89c      	bhi.n	80036ae <UI_GetReg+0x32e>
 8003774:	e79a      	b.n	80036ac <UI_GetReg+0x32c>
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 8003776:	f7fd fe27 	bl	80013c8 <MCI_GetLastRampFinalSpeed>
 800377a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800377e:	0040      	lsls	r0, r0, #1
 8003780:	e70b      	b.n	800359a <UI_GetReg+0x21a>
 8003782:	bf00      	nop
 8003784:	34a6847a 	.word	0x34a6847a

08003788 <UI_ExecCmd>:
  * @param  bCmdID: Code of command to execute.
  *         See MC_PROTOCOL_CMD_xxx for code definition.
  *  @retval Return true if the command executed succesfully, otherwise false.
*/
__weak bool UI_ExecCmd(UI_Handle_t *pHandle, uint8_t bCmdID)
{
 8003788:	b510      	push	{r4, lr}
  bool retVal = true;

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 800378a:	6883      	ldr	r3, [r0, #8]
 800378c:	7d02      	ldrb	r2, [r0, #20]

  switch (bCmdID)
 800378e:	3901      	subs	r1, #1
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8003790:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
  switch (bCmdID)
 8003794:	290d      	cmp	r1, #13
 8003796:	d808      	bhi.n	80037aa <UI_ExecCmd+0x22>
 8003798:	e8df f001 	tbb	[pc, r1]
 800379c:	0e091419 	.word	0x0e091419
 80037a0:	231e100e 	.word	0x231e100e
 80037a4:	07070728 	.word	0x07070728
 80037a8:	1407      	.short	0x1407
 80037aa:	2000      	movs	r0, #0
    retVal = false;
	}
    break;
  }
  return retVal;
}
 80037ac:	bd10      	pop	{r4, pc}
      if (MCI_GetSTMState(pMCI) == RUN)
 80037ae:	4620      	mov	r0, r4
 80037b0:	f7fd fdf8 	bl	80013a4 <MCI_GetSTMState>
 80037b4:	2806      	cmp	r0, #6
 80037b6:	d01e      	beq.n	80037f6 <UI_ExecCmd+0x6e>
  bool retVal = true;
 80037b8:	2001      	movs	r0, #1
}
 80037ba:	bd10      	pop	{r4, pc}
      if (MCI_GetSTMState(pMCI) == IDLE)
 80037bc:	4620      	mov	r0, r4
 80037be:	f7fd fdf1 	bl	80013a4 <MCI_GetSTMState>
 80037c2:	b120      	cbz	r0, 80037ce <UI_ExecCmd+0x46>
        MCI_StopMotor(pMCI);
 80037c4:	4620      	mov	r0, r4
 80037c6:	f7fd fda5 	bl	8001314 <MCI_StopMotor>
  bool retVal = true;
 80037ca:	2001      	movs	r0, #1
}
 80037cc:	bd10      	pop	{r4, pc}
        MCI_StartMotor(pMCI);
 80037ce:	4620      	mov	r0, r4
 80037d0:	f7fd fd96 	bl	8001300 <MCI_StartMotor>
  bool retVal = true;
 80037d4:	2001      	movs	r0, #1
}
 80037d6:	bd10      	pop	{r4, pc}
      MCI_FaultAcknowledged(pMCI);
 80037d8:	4620      	mov	r0, r4
 80037da:	f7fd fd9f 	bl	800131c <MCI_FaultAcknowledged>
  bool retVal = true;
 80037de:	2001      	movs	r0, #1
}
 80037e0:	bd10      	pop	{r4, pc}
      MCI_EncoderAlign(pMCI);
 80037e2:	4620      	mov	r0, r4
 80037e4:	f7fd fd9e 	bl	8001324 <MCI_EncoderAlign>
  bool retVal = true;
 80037e8:	2001      	movs	r0, #1
}
 80037ea:	bd10      	pop	{r4, pc}
      MCI_Clear_Iqdref(pMCI);
 80037ec:	4620      	mov	r0, r4
 80037ee:	f7fd fe8d 	bl	800150c <MCI_Clear_Iqdref>
  bool retVal = true;
 80037f2:	2001      	movs	r0, #1
}
 80037f4:	bd10      	pop	{r4, pc}
        MCI_StopRamp(pMCI);
 80037f6:	4620      	mov	r0, r4
 80037f8:	f7fd fdee 	bl	80013d8 <MCI_StopRamp>
  bool retVal = true;
 80037fc:	2001      	movs	r0, #1
}
 80037fe:	bd10      	pop	{r4, pc}

08003800 <UI_ExecSpeedRamp>:
  * @param  hDurationms: Duration of the ramp expressed in milliseconds.
  *         It is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecSpeedRamp(UI_Handle_t *pHandle, int32_t wFinalMecSpeedUnit, uint16_t hDurationms)
{
 8003800:	b508      	push	{r3, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];

  /* Call MCI Exec Ramp */
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 8003802:	4b07      	ldr	r3, [pc, #28]	; (8003820 <UI_ExecSpeedRamp+0x20>)
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8003804:	f890 c014 	ldrb.w	ip, [r0, #20]
 8003808:	6880      	ldr	r0, [r0, #8]
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 800380a:	f850 002c 	ldr.w	r0, [r0, ip, lsl #2]
 800380e:	fb83 c301 	smull	ip, r3, r3, r1
 8003812:	eba3 71e1 	sub.w	r1, r3, r1, asr #31
 8003816:	b209      	sxth	r1, r1
 8003818:	f7fd fd54 	bl	80012c4 <MCI_ExecSpeedRamp>
  return true;
}
 800381c:	2001      	movs	r0, #1
 800381e:	bd08      	pop	{r3, pc}
 8003820:	2aaaaaab 	.word	0x2aaaaaab

08003824 <UI_ExecTorqueRamp>:
  * @param  hDurationms: the duration of the ramp expressed in milliseconds. It
  *         is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecTorqueRamp(UI_Handle_t *pHandle, int16_t hTargetFinal, uint16_t hDurationms)
{
 8003824:	b508      	push	{r3, lr}

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8003826:	6883      	ldr	r3, [r0, #8]
 8003828:	f890 c014 	ldrb.w	ip, [r0, #20]

  /* Call MCI Exec Ramp */
  MCI_ExecTorqueRamp(pMCI,hTargetFinal,hDurationms);
 800382c:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8003830:	f7fd fd52 	bl	80012d8 <MCI_ExecTorqueRamp>
  return true;
}
 8003834:	2001      	movs	r0, #1
 8003836:	bd08      	pop	{r3, pc}

08003838 <UI_GetRevupData>:
  *
  *  @retval Returns true if the command executed successfully, false otherwise.
  */
__weak bool UI_GetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t* pDurationms,
                     int16_t* pFinalMecSpeedUnit, int16_t* pFinalTorque )
{
 8003838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800383a:	4617      	mov	r7, r2
 800383c:	461e      	mov	r6, r3
  bool hRetVal = true;

  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 800383e:	7d02      	ldrb	r2, [r0, #20]
 8003840:	68c3      	ldr	r3, [r0, #12]
 8003842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003846:	695c      	ldr	r4, [r3, #20]
  if (pRevupCtrl)
 8003848:	b18c      	cbz	r4, 800386e <UI_GetRevupData+0x36>
  {
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 800384a:	4620      	mov	r0, r4
 800384c:	460d      	mov	r5, r1
 800384e:	f004 fdf9 	bl	8008444 <RUC_GetPhaseDurationms>
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8003852:	4629      	mov	r1, r5
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 8003854:	8038      	strh	r0, [r7, #0]
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8003856:	4620      	mov	r0, r4
 8003858:	f004 fdfa 	bl	8008450 <RUC_GetPhaseFinalMecSpeedUnit>
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 800385c:	4629      	mov	r1, r5
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 800385e:	8030      	strh	r0, [r6, #0]
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 8003860:	4620      	mov	r0, r4
 8003862:	f004 fdfd 	bl	8008460 <RUC_GetPhaseFinalTorque>
 8003866:	9b06      	ldr	r3, [sp, #24]
 8003868:	8018      	strh	r0, [r3, #0]
  bool hRetVal = true;
 800386a:	2001      	movs	r0, #1
  else
  {
    hRetVal = false;
  }
  return hRetVal;
}
 800386c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hRetVal = false;
 800386e:	4620      	mov	r0, r4
}
 8003870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003872:	bf00      	nop

08003874 <UI_SetRevupData>:
  *         digit.
  *  @retval Return true if the command executed successfully, otherwise false.
  */
__weak bool UI_SetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t hDurationms,
                     int16_t hFinalMecSpeedUnit, int16_t hFinalTorque )
{
 8003874:	b570      	push	{r4, r5, r6, lr}
 8003876:	461d      	mov	r5, r3
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8003878:	7d06      	ldrb	r6, [r0, #20]
 800387a:	68c3      	ldr	r3, [r0, #12]
{
 800387c:	b082      	sub	sp, #8
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 800387e:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
{
 8003882:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8003886:	6958      	ldr	r0, [r3, #20]
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 8003888:	9001      	str	r0, [sp, #4]
{
 800388a:	460c      	mov	r4, r1
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 800388c:	f004 fdc8 	bl	8008420 <RUC_SetPhaseDurationms>
  RUC_SetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage, hFinalMecSpeedUnit);
 8003890:	9801      	ldr	r0, [sp, #4]
 8003892:	462a      	mov	r2, r5
 8003894:	4621      	mov	r1, r4
 8003896:	f004 fdc9 	bl	800842c <RUC_SetPhaseFinalMecSpeedUnit>
  RUC_SetPhaseFinalTorque(pRevupCtrl, bStage, hFinalTorque);
 800389a:	9801      	ldr	r0, [sp, #4]
 800389c:	4632      	mov	r2, r6
 800389e:	4621      	mov	r1, r4
 80038a0:	f004 fdca 	bl	8008438 <RUC_SetPhaseFinalTorque>
  return true;
}
 80038a4:	2001      	movs	r0, #1
 80038a6:	b002      	add	sp, #8
 80038a8:	bd70      	pop	{r4, r5, r6, pc}
 80038aa:	bf00      	nop

080038ac <UI_SetCurrentReferences>:
  * @param  hIdRef: Current Id reference on qd reference frame.
  *         This value is expressed in digit. See hIqRef param description.
  * @retval none.
  */
__weak void UI_SetCurrentReferences(UI_Handle_t *pHandle, int16_t hIqRef, int16_t hIdRef)
{
 80038ac:	b082      	sub	sp, #8

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80038ae:	f890 c014 	ldrb.w	ip, [r0, #20]
 80038b2:	6883      	ldr	r3, [r0, #8]
  qd_t currComp;
  currComp.q = hIqRef;
 80038b4:	f8ad 1004 	strh.w	r1, [sp, #4]
  currComp.d = hIdRef;
 80038b8:	f8ad 2006 	strh.w	r2, [sp, #6]
  MCI_SetCurrentReferences(pMCI,currComp);
 80038bc:	9901      	ldr	r1, [sp, #4]
 80038be:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
}
 80038c2:	b002      	add	sp, #8
  MCI_SetCurrentReferences(pMCI,currComp);
 80038c4:	f7fd bd12 	b.w	80012ec <MCI_SetCurrentReferences>

080038c8 <UI_GetMPInfo>:
  * @retval true if MP is enabled, false otherwise.
  */
__weak bool UI_GetMPInfo(pMPInfo_t stepList, pMPInfo_t pMPInfo)
{
    return false;
}
 80038c8:	2000      	movs	r0, #0
 80038ca:	4770      	bx	lr

080038cc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80038cc:	4a03      	ldr	r2, [pc, #12]	; (80038dc <SystemInit+0x10>)
 80038ce:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80038d2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80038d6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80038da:	4770      	bx	lr
 80038dc:	e000ed00 	.word	0xe000ed00

080038e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038e0:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80038e2:	4b0b      	ldr	r3, [pc, #44]	; (8003910 <HAL_Init+0x30>)
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ea:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038f2:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038fa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038fc:	2003      	movs	r0, #3
 80038fe:	f000 fa61 	bl	8003dc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003902:	2000      	movs	r0, #0
 8003904:	f7ff fab2 	bl	8002e6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003908:	f7ff f94a 	bl	8002ba0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800390c:	2000      	movs	r0, #0
 800390e:	bd08      	pop	{r3, pc}
 8003910:	40023c00 	.word	0x40023c00

08003914 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003914:	4a03      	ldr	r2, [pc, #12]	; (8003924 <HAL_IncTick+0x10>)
 8003916:	4b04      	ldr	r3, [pc, #16]	; (8003928 <HAL_IncTick+0x14>)
 8003918:	6811      	ldr	r1, [r2, #0]
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	440b      	add	r3, r1
 800391e:	6013      	str	r3, [r2, #0]
}
 8003920:	4770      	bx	lr
 8003922:	bf00      	nop
 8003924:	20000c54 	.word	0x20000c54
 8003928:	2000057c 	.word	0x2000057c

0800392c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800392c:	4b01      	ldr	r3, [pc, #4]	; (8003934 <HAL_GetTick+0x8>)
 800392e:	6818      	ldr	r0, [r3, #0]
}
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	20000c54 	.word	0x20000c54

08003938 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003938:	b538      	push	{r3, r4, r5, lr}
 800393a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800393c:	f7ff fff6 	bl	800392c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003940:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8003942:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8003944:	d002      	beq.n	800394c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8003946:	4b04      	ldr	r3, [pc, #16]	; (8003958 <HAL_Delay+0x20>)
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800394c:	f7ff ffee 	bl	800392c <HAL_GetTick>
 8003950:	1b43      	subs	r3, r0, r5
 8003952:	42a3      	cmp	r3, r4
 8003954:	d3fa      	bcc.n	800394c <HAL_Delay+0x14>
  {
  }
}
 8003956:	bd38      	pop	{r3, r4, r5, pc}
 8003958:	2000057c 	.word	0x2000057c

0800395c <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800395c:	2800      	cmp	r0, #0
 800395e:	f000 809f 	beq.w	8003aa0 <HAL_ADC_Init+0x144>
{
 8003962:	b538      	push	{r3, r4, r5, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003964:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8003966:	4604      	mov	r4, r0
 8003968:	b13d      	cbz	r5, 800397a <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800396a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800396c:	06db      	lsls	r3, r3, #27
 800396e:	d50c      	bpl.n	800398a <HAL_ADC_Init+0x2e>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003970:	2300      	movs	r3, #0
 8003972:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    tmp_hal_status = HAL_ERROR;
 8003976:	2001      	movs	r0, #1

  /* Return function status */
  return tmp_hal_status;
}
 8003978:	bd38      	pop	{r3, r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 800397a:	f7ff f931 	bl	8002be0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800397e:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003980:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 8003982:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003986:	06db      	lsls	r3, r3, #27
 8003988:	d4f2      	bmi.n	8003970 <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 800398a:	6c23      	ldr	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800398c:	4a48      	ldr	r2, [pc, #288]	; (8003ab0 <HAL_ADC_Init+0x154>)
    ADC_STATE_CLR_SET(hadc->State,
 800398e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003992:	f023 0302 	bic.w	r3, r3, #2
 8003996:	f043 0302 	orr.w	r3, r3, #2
 800399a:	6423      	str	r3, [r4, #64]	; 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800399c:	6851      	ldr	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800399e:	6823      	ldr	r3, [r4, #0]
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80039a0:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 80039a4:	6051      	str	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80039a6:	6851      	ldr	r1, [r2, #4]
 80039a8:	6860      	ldr	r0, [r4, #4]
 80039aa:	4301      	orrs	r1, r0
 80039ac:	6051      	str	r1, [r2, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80039ae:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80039b0:	6925      	ldr	r5, [r4, #16]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80039b2:	68a0      	ldr	r0, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80039b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80039ba:	6859      	ldr	r1, [r3, #4]
 80039bc:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 80039c0:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80039c2:	6859      	ldr	r1, [r3, #4]
 80039c4:	f021 7140 	bic.w	r1, r1, #50331648	; 0x3000000
 80039c8:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80039ca:	685a      	ldr	r2, [r3, #4]
 80039cc:	4302      	orrs	r2, r0
 80039ce:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80039d0:	6899      	ldr	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80039d2:	68e0      	ldr	r0, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80039d4:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 80039d8:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80039da:	689a      	ldr	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80039dc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80039de:	4302      	orrs	r2, r0
 80039e0:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80039e2:	4a34      	ldr	r2, [pc, #208]	; (8003ab4 <HAL_ADC_Init+0x158>)
 80039e4:	4291      	cmp	r1, r2
 80039e6:	d052      	beq.n	8003a8e <HAL_ADC_Init+0x132>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80039e8:	6898      	ldr	r0, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80039ea:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80039ec:	f020 6070 	bic.w	r0, r0, #251658240	; 0xf000000
 80039f0:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80039f2:	689a      	ldr	r2, [r3, #8]
 80039f4:	4311      	orrs	r1, r2
 80039f6:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80039f8:	6899      	ldr	r1, [r3, #8]
 80039fa:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 80039fe:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003a00:	689a      	ldr	r2, [r3, #8]
 8003a02:	432a      	orrs	r2, r5
 8003a04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003a06:	689a      	ldr	r2, [r3, #8]
 8003a08:	f022 0202 	bic.w	r2, r2, #2
 8003a0c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003a0e:	689a      	ldr	r2, [r3, #8]
 8003a10:	7e21      	ldrb	r1, [r4, #24]
 8003a12:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8003a16:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003a18:	f894 2020 	ldrb.w	r2, [r4, #32]
 8003a1c:	2a00      	cmp	r2, #0
 8003a1e:	d041      	beq.n	8003aa4 <HAL_ADC_Init+0x148>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003a20:	6859      	ldr	r1, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003a22:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003a24:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8003a28:	6059      	str	r1, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003a2a:	6858      	ldr	r0, [r3, #4]
 8003a2c:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 8003a30:	6058      	str	r0, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003a32:	1e51      	subs	r1, r2, #1
 8003a34:	685a      	ldr	r2, [r3, #4]
 8003a36:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8003a3a:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003a3e:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003a40:	6965      	ldr	r5, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003a42:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003a46:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a4a:	3901      	subs	r1, #1
 8003a4c:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8003a50:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003a52:	6899      	ldr	r1, [r3, #8]
 8003a54:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8003a58:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003a5a:	6899      	ldr	r1, [r3, #8]
 8003a5c:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8003a60:	ea41 2142 	orr.w	r1, r1, r2, lsl #9
 8003a64:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003a66:	6899      	ldr	r1, [r3, #8]
 8003a68:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003a6c:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003a6e:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8003a70:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003a72:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 8003a76:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8003a78:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8003a7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a7c:	f023 0303 	bic.w	r3, r3, #3
 8003a80:	f043 0301 	orr.w	r3, r3, #1
 8003a84:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8003a86:	2300      	movs	r3, #0
 8003a88:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8003a8c:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a8e:	689a      	ldr	r2, [r3, #8]
 8003a90:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a94:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a96:	689a      	ldr	r2, [r3, #8]
 8003a98:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a9c:	609a      	str	r2, [r3, #8]
 8003a9e:	e7b2      	b.n	8003a06 <HAL_ADC_Init+0xaa>
    return HAL_ERROR;
 8003aa0:	2001      	movs	r0, #1
}
 8003aa2:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003aa4:	685a      	ldr	r2, [r3, #4]
 8003aa6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003aaa:	605a      	str	r2, [r3, #4]
 8003aac:	e7c6      	b.n	8003a3c <HAL_ADC_Init+0xe0>
 8003aae:	bf00      	nop
 8003ab0:	40012300 	.word	0x40012300
 8003ab4:	0f000001 	.word	0x0f000001

08003ab8 <HAL_ADC_ConfigChannel>:
{
 8003ab8:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hadc);
 8003aba:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8003abe:	b083      	sub	sp, #12
  __IO uint32_t counter = 0U;
 8003ac0:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8003ac2:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 8003ac4:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8003ac6:	f000 809c 	beq.w	8003c02 <HAL_ADC_ConfigChannel+0x14a>
 8003aca:	2301      	movs	r3, #1
 8003acc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003ad0:	680c      	ldr	r4, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003ad2:	6803      	ldr	r3, [r0, #0]
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003ad4:	2c09      	cmp	r4, #9
 8003ad6:	d82d      	bhi.n	8003b34 <HAL_ADC_ConfigChannel+0x7c>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003ad8:	691d      	ldr	r5, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003ada:	688a      	ldr	r2, [r1, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003adc:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 8003ae0:	f04f 0c07 	mov.w	ip, #7
 8003ae4:	fa0c fc0e 	lsl.w	ip, ip, lr
 8003ae8:	ea25 050c 	bic.w	r5, r5, ip
 8003aec:	611d      	str	r5, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003aee:	691d      	ldr	r5, [r3, #16]
 8003af0:	fa02 f20e 	lsl.w	r2, r2, lr
 8003af4:	432a      	orrs	r2, r5
 8003af6:	611a      	str	r2, [r3, #16]
  if (sConfig->Rank < 7U)
 8003af8:	684a      	ldr	r2, [r1, #4]
 8003afa:	2a06      	cmp	r2, #6
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003afc:	46a4      	mov	ip, r4
  if (sConfig->Rank < 7U)
 8003afe:	d82f      	bhi.n	8003b60 <HAL_ADC_ConfigChannel+0xa8>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003b00:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003b04:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003b06:	3a05      	subs	r2, #5
 8003b08:	f04f 0e1f 	mov.w	lr, #31
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003b0c:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003b10:	fa0e f202 	lsl.w	r2, lr, r2
 8003b14:	ea21 0202 	bic.w	r2, r1, r2
 8003b18:	635a      	str	r2, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003b1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b1c:	ea4c 0202 	orr.w	r2, ip, r2
 8003b20:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003b22:	4a39      	ldr	r2, [pc, #228]	; (8003c08 <HAL_ADC_ConfigChannel+0x150>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d030      	beq.n	8003b8a <HAL_ADC_ConfigChannel+0xd2>
  __HAL_UNLOCK(hadc);
 8003b28:	2300      	movs	r3, #0
 8003b2a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8003b2e:	4618      	mov	r0, r3
}
 8003b30:	b003      	add	sp, #12
 8003b32:	bd30      	pop	{r4, r5, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003b34:	fa1f fc84 	uxth.w	ip, r4
 8003b38:	eb0c 024c 	add.w	r2, ip, ip, lsl #1
 8003b3c:	68dd      	ldr	r5, [r3, #12]
 8003b3e:	f1a2 0e1e 	sub.w	lr, r2, #30
 8003b42:	2207      	movs	r2, #7
 8003b44:	fa02 f20e 	lsl.w	r2, r2, lr
 8003b48:	ea25 0202 	bic.w	r2, r5, r2
 8003b4c:	60da      	str	r2, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003b4e:	688a      	ldr	r2, [r1, #8]
 8003b50:	68dd      	ldr	r5, [r3, #12]
 8003b52:	fa02 f20e 	lsl.w	r2, r2, lr
 8003b56:	432a      	orrs	r2, r5
 8003b58:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7U)
 8003b5a:	684a      	ldr	r2, [r1, #4]
 8003b5c:	2a06      	cmp	r2, #6
 8003b5e:	d9cf      	bls.n	8003b00 <HAL_ADC_ConfigChannel+0x48>
  else if (sConfig->Rank < 13U)
 8003b60:	2a0c      	cmp	r2, #12
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003b62:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  else if (sConfig->Rank < 13U)
 8003b66:	d836      	bhi.n	8003bd6 <HAL_ADC_ConfigChannel+0x11e>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003b68:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003b6a:	3a23      	subs	r2, #35	; 0x23
 8003b6c:	251f      	movs	r5, #31
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003b6e:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003b72:	fa05 f202 	lsl.w	r2, r5, r2
 8003b76:	ea21 0202 	bic.w	r2, r1, r2
 8003b7a:	631a      	str	r2, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003b7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b7e:	ea4c 0202 	orr.w	r2, ip, r2
 8003b82:	631a      	str	r2, [r3, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003b84:	4a20      	ldr	r2, [pc, #128]	; (8003c08 <HAL_ADC_ConfigChannel+0x150>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d1ce      	bne.n	8003b28 <HAL_ADC_ConfigChannel+0x70>
 8003b8a:	2c12      	cmp	r4, #18
 8003b8c:	d032      	beq.n	8003bf4 <HAL_ADC_ConfigChannel+0x13c>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003b8e:	f1a4 0310 	sub.w	r3, r4, #16
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d8c8      	bhi.n	8003b28 <HAL_ADC_ConfigChannel+0x70>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003b96:	4a1d      	ldr	r2, [pc, #116]	; (8003c0c <HAL_ADC_ConfigChannel+0x154>)
 8003b98:	6853      	ldr	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b9a:	2c10      	cmp	r4, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003b9c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003ba0:	6053      	str	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ba2:	d1c1      	bne.n	8003b28 <HAL_ADC_ConfigChannel+0x70>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003ba4:	4b1a      	ldr	r3, [pc, #104]	; (8003c10 <HAL_ADC_ConfigChannel+0x158>)
 8003ba6:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 8003bb0:	f202 3283 	addw	r2, r2, #899	; 0x383
 8003bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb8:	0c9b      	lsrs	r3, r3, #18
 8003bba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003bbe:	005b      	lsls	r3, r3, #1
 8003bc0:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8003bc2:	9b01      	ldr	r3, [sp, #4]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d0af      	beq.n	8003b28 <HAL_ADC_ConfigChannel+0x70>
        counter--;
 8003bc8:	9b01      	ldr	r3, [sp, #4]
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8003bce:	9b01      	ldr	r3, [sp, #4]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1f9      	bne.n	8003bc8 <HAL_ADC_ConfigChannel+0x110>
 8003bd4:	e7a8      	b.n	8003b28 <HAL_ADC_ConfigChannel+0x70>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003bd6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003bd8:	3a41      	subs	r2, #65	; 0x41
 8003bda:	251f      	movs	r5, #31
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003bdc:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003be0:	fa05 f202 	lsl.w	r2, r5, r2
 8003be4:	ea21 0202 	bic.w	r2, r1, r2
 8003be8:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bec:	ea4c 0202 	orr.w	r2, ip, r2
 8003bf0:	62da      	str	r2, [r3, #44]	; 0x2c
 8003bf2:	e796      	b.n	8003b22 <HAL_ADC_ConfigChannel+0x6a>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003bf4:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 8003bf8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003bfc:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003c00:	e792      	b.n	8003b28 <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 8003c02:	2002      	movs	r0, #2
}
 8003c04:	b003      	add	sp, #12
 8003c06:	bd30      	pop	{r4, r5, pc}
 8003c08:	40012000 	.word	0x40012000
 8003c0c:	40012300 	.word	0x40012300
 8003c10:	20000578 	.word	0x20000578

08003c14 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8003c14:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c16:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003c1a:	698e      	ldr	r6, [r1, #24]
  __HAL_LOCK(hadc);
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	f000 80c8 	beq.w	8003db2 <HAL_ADCEx_InjectedConfigChannel+0x19e>
 8003c22:	2301      	movs	r3, #1
 8003c24:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8003c28:	680d      	ldr	r5, [r1, #0]
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8003c2a:	6803      	ldr	r3, [r0, #0]
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8003c2c:	2d09      	cmp	r5, #9
 8003c2e:	d868      	bhi.n	8003d02 <HAL_ADCEx_InjectedConfigChannel+0xee>
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8003c30:	691c      	ldr	r4, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8003c32:	688a      	ldr	r2, [r1, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8003c34:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8003c38:	2707      	movs	r7, #7
 8003c3a:	fa07 f70c 	lsl.w	r7, r7, ip
 8003c3e:	ea24 0407 	bic.w	r4, r4, r7
 8003c42:	611c      	str	r4, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8003c44:	691c      	ldr	r4, [r3, #16]
 8003c46:	fa02 f20c 	lsl.w	r2, r2, ip
 8003c4a:	4322      	orrs	r2, r4
 8003c4c:	611a      	str	r2, [r3, #16]
 8003c4e:	46ac      	mov	ip, r5
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8003c50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8003c52:	f8d1 e010 	ldr.w	lr, [r1, #16]
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8003c56:	684c      	ldr	r4, [r1, #4]
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8003c58:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8003c5c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8003c5e:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8003c60:	f10e 32ff 	add.w	r2, lr, #4294967295
 8003c64:	ea47 5702 	orr.w	r7, r7, r2, lsl #20
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8003c68:	1ce2      	adds	r2, r4, #3
 8003c6a:	eba2 020e 	sub.w	r2, r2, lr
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8003c6e:	639f      	str	r7, [r3, #56]	; 0x38
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8003c70:	b2d2      	uxtb	r2, r2
 8003c72:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8003c74:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003c78:	f04f 0e1f 	mov.w	lr, #31
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8003c7c:	fa0c fc02 	lsl.w	ip, ip, r2
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8003c80:	fa0e f202 	lsl.w	r2, lr, r2
 8003c84:	ea27 0202 	bic.w	r2, r7, r2
 8003c88:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8003c8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c8c:	ea4c 0202 	orr.w	r2, ip, r2
 8003c90:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003c92:	4a49      	ldr	r2, [pc, #292]	; (8003db8 <HAL_ADCEx_InjectedConfigChannel+0x1a4>)
 8003c94:	4296      	cmp	r6, r2
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8003c96:	689a      	ldr	r2, [r3, #8]
 8003c98:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8003c9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8003c9e:	689a      	ldr	r2, [r3, #8]
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003ca0:	d066      	beq.n	8003d70 <HAL_ADCEx_InjectedConfigChannel+0x15c>
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8003ca2:	4316      	orrs	r6, r2
 8003ca4:	609e      	str	r6, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8003ca6:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8003ca8:	69ce      	ldr	r6, [r1, #28]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8003caa:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8003cae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8003cb0:	689a      	ldr	r2, [r3, #8]
 8003cb2:	4332      	orrs	r2, r6
 8003cb4:	609a      	str	r2, [r3, #8]
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8003cb6:	7d4a      	ldrb	r2, [r1, #21]
 8003cb8:	2a00      	cmp	r2, #0
 8003cba:	d034      	beq.n	8003d26 <HAL_ADCEx_InjectedConfigChannel+0x112>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8003cbc:	685a      	ldr	r2, [r3, #4]
 8003cbe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003cc2:	605a      	str	r2, [r3, #4]
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8003cc4:	7d0a      	ldrb	r2, [r1, #20]
 8003cc6:	2a00      	cmp	r2, #0
 8003cc8:	d034      	beq.n	8003d34 <HAL_ADCEx_InjectedConfigChannel+0x120>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8003cca:	685a      	ldr	r2, [r3, #4]
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
  }
  
  switch(sConfigInjected->InjectedRank)
 8003ccc:	2c02      	cmp	r4, #2
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8003cce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003cd2:	605a      	str	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 8003cd4:	d034      	beq.n	8003d40 <HAL_ADCEx_InjectedConfigChannel+0x12c>
 8003cd6:	2c03      	cmp	r4, #3
 8003cd8:	d059      	beq.n	8003d8e <HAL_ADCEx_InjectedConfigChannel+0x17a>
 8003cda:	2c01      	cmp	r4, #1
 8003cdc:	d04c      	beq.n	8003d78 <HAL_ADCEx_InjectedConfigChannel+0x164>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
      break;
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8003cde:	6a1a      	ldr	r2, [r3, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8003ce0:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8003ce2:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8003ce6:	f022 020f 	bic.w	r2, r2, #15
 8003cea:	621a      	str	r2, [r3, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8003cec:	6a1a      	ldr	r2, [r3, #32]
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	621a      	str	r2, [r3, #32]
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8003cf2:	4a32      	ldr	r2, [pc, #200]	; (8003dbc <HAL_ADCEx_InjectedConfigChannel+0x1a8>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d030      	beq.n	8003d5a <HAL_ADCEx_InjectedConfigChannel+0x146>
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003cfe:	4618      	mov	r0, r3
}
 8003d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8003d02:	fa1f fc85 	uxth.w	ip, r5
 8003d06:	eb0c 024c 	add.w	r2, ip, ip, lsl #1
 8003d0a:	f1a2 041e 	sub.w	r4, r2, #30
 8003d0e:	2707      	movs	r7, #7
 8003d10:	68da      	ldr	r2, [r3, #12]
 8003d12:	40a7      	lsls	r7, r4
 8003d14:	ea22 0207 	bic.w	r2, r2, r7
 8003d18:	60da      	str	r2, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8003d1a:	688a      	ldr	r2, [r1, #8]
 8003d1c:	40a2      	lsls	r2, r4
 8003d1e:	68dc      	ldr	r4, [r3, #12]
 8003d20:	4322      	orrs	r2, r4
 8003d22:	60da      	str	r2, [r3, #12]
 8003d24:	e794      	b.n	8003c50 <HAL_ADCEx_InjectedConfigChannel+0x3c>
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8003d26:	685a      	ldr	r2, [r3, #4]
 8003d28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d2c:	605a      	str	r2, [r3, #4]
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8003d2e:	7d0a      	ldrb	r2, [r1, #20]
 8003d30:	2a00      	cmp	r2, #0
 8003d32:	d1ca      	bne.n	8003cca <HAL_ADCEx_InjectedConfigChannel+0xb6>
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8003d34:	685a      	ldr	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 8003d36:	2c02      	cmp	r4, #2
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8003d38:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003d3c:	605a      	str	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 8003d3e:	d1ca      	bne.n	8003cd6 <HAL_ADCEx_InjectedConfigChannel+0xc2>
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8003d40:	699a      	ldr	r2, [r3, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8003d42:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8003d44:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8003d48:	f022 020f 	bic.w	r2, r2, #15
 8003d4c:	619a      	str	r2, [r3, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8003d4e:	699a      	ldr	r2, [r3, #24]
 8003d50:	430a      	orrs	r2, r1
 8003d52:	619a      	str	r2, [r3, #24]
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8003d54:	4a19      	ldr	r2, [pc, #100]	; (8003dbc <HAL_ADCEx_InjectedConfigChannel+0x1a8>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d1ce      	bne.n	8003cf8 <HAL_ADCEx_InjectedConfigChannel+0xe4>
 8003d5a:	2d12      	cmp	r5, #18
 8003d5c:	d022      	beq.n	8003da4 <HAL_ADCEx_InjectedConfigChannel+0x190>
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8003d5e:	3d10      	subs	r5, #16
 8003d60:	2d01      	cmp	r5, #1
 8003d62:	d8c9      	bhi.n	8003cf8 <HAL_ADCEx_InjectedConfigChannel+0xe4>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003d64:	4a16      	ldr	r2, [pc, #88]	; (8003dc0 <HAL_ADCEx_InjectedConfigChannel+0x1ac>)
 8003d66:	6853      	ldr	r3, [r2, #4]
 8003d68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d6c:	6053      	str	r3, [r2, #4]
 8003d6e:	e7c3      	b.n	8003cf8 <HAL_ADCEx_InjectedConfigChannel+0xe4>
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8003d70:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8003d74:	609a      	str	r2, [r3, #8]
 8003d76:	e79e      	b.n	8003cb6 <HAL_ADCEx_InjectedConfigChannel+0xa2>
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8003d78:	695a      	ldr	r2, [r3, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8003d7a:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8003d7c:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8003d80:	f022 020f 	bic.w	r2, r2, #15
 8003d84:	615a      	str	r2, [r3, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8003d86:	695a      	ldr	r2, [r3, #20]
 8003d88:	430a      	orrs	r2, r1
 8003d8a:	615a      	str	r2, [r3, #20]
      break;
 8003d8c:	e7b1      	b.n	8003cf2 <HAL_ADCEx_InjectedConfigChannel+0xde>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8003d8e:	69da      	ldr	r2, [r3, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8003d90:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8003d92:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8003d96:	f022 020f 	bic.w	r2, r2, #15
 8003d9a:	61da      	str	r2, [r3, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8003d9c:	69da      	ldr	r2, [r3, #28]
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	61da      	str	r2, [r3, #28]
      break;
 8003da2:	e7a6      	b.n	8003cf2 <HAL_ADCEx_InjectedConfigChannel+0xde>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003da4:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 8003da8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003dac:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8003db0:	e7a2      	b.n	8003cf8 <HAL_ADCEx_InjectedConfigChannel+0xe4>
  __HAL_LOCK(hadc);
 8003db2:	2002      	movs	r0, #2
}
 8003db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003db6:	bf00      	nop
 8003db8:	000f0001 	.word	0x000f0001
 8003dbc:	40012000 	.word	0x40012000
 8003dc0:	40012300 	.word	0x40012300

08003dc4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003dc4:	4907      	ldr	r1, [pc, #28]	; (8003de4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003dc6:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003dc8:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dca:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003dce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dd2:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003dd4:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003dd6:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003dda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003dde:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	e000ed00 	.word	0xe000ed00

08003de8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003de8:	4b1c      	ldr	r3, [pc, #112]	; (8003e5c <HAL_NVIC_SetPriority+0x74>)
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003df0:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003df2:	f1c3 0e07 	rsb	lr, r3, #7
 8003df6:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dfa:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003dfe:	bf28      	it	cs
 8003e00:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e04:	f1bc 0f06 	cmp.w	ip, #6
 8003e08:	d91b      	bls.n	8003e42 <HAL_NVIC_SetPriority+0x5a>
 8003e0a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e0c:	f04f 3cff 	mov.w	ip, #4294967295
 8003e10:	fa0c fc03 	lsl.w	ip, ip, r3
 8003e14:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e18:	f04f 3cff 	mov.w	ip, #4294967295
 8003e1c:	fa0c fc0e 	lsl.w	ip, ip, lr
 8003e20:	ea21 010c 	bic.w	r1, r1, ip
 8003e24:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8003e26:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e28:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8003e2c:	db0c      	blt.n	8003e48 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e2e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003e32:	0109      	lsls	r1, r1, #4
 8003e34:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003e38:	b2c9      	uxtb	r1, r1
 8003e3a:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003e3e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003e42:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e44:	4613      	mov	r3, r2
 8003e46:	e7e7      	b.n	8003e18 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e48:	4b05      	ldr	r3, [pc, #20]	; (8003e60 <HAL_NVIC_SetPriority+0x78>)
 8003e4a:	f000 000f 	and.w	r0, r0, #15
 8003e4e:	0109      	lsls	r1, r1, #4
 8003e50:	4403      	add	r3, r0
 8003e52:	b2c9      	uxtb	r1, r1
 8003e54:	7619      	strb	r1, [r3, #24]
 8003e56:	f85d fb04 	ldr.w	pc, [sp], #4
 8003e5a:	bf00      	nop
 8003e5c:	e000ed00 	.word	0xe000ed00
 8003e60:	e000ecfc 	.word	0xe000ecfc

08003e64 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003e64:	2800      	cmp	r0, #0
 8003e66:	db08      	blt.n	8003e7a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e68:	0941      	lsrs	r1, r0, #5
 8003e6a:	4a04      	ldr	r2, [pc, #16]	; (8003e7c <HAL_NVIC_EnableIRQ+0x18>)
 8003e6c:	f000 001f 	and.w	r0, r0, #31
 8003e70:	2301      	movs	r3, #1
 8003e72:	fa03 f000 	lsl.w	r0, r3, r0
 8003e76:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003e7a:	4770      	bx	lr
 8003e7c:	e000e100 	.word	0xe000e100

08003e80 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003e80:	2800      	cmp	r0, #0
 8003e82:	db0d      	blt.n	8003ea0 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e84:	0943      	lsrs	r3, r0, #5
 8003e86:	4907      	ldr	r1, [pc, #28]	; (8003ea4 <HAL_NVIC_DisableIRQ+0x24>)
 8003e88:	2201      	movs	r2, #1
 8003e8a:	3320      	adds	r3, #32
 8003e8c:	f000 001f 	and.w	r0, r0, #31
 8003e90:	fa02 f000 	lsl.w	r0, r2, r0
 8003e94:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003e98:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003e9c:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	e000e100 	.word	0xe000e100

08003ea8 <HAL_NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 8003ea8:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003eac:	4905      	ldr	r1, [pc, #20]	; (8003ec4 <HAL_NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003eae:	4b06      	ldr	r3, [pc, #24]	; (8003ec8 <HAL_NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003eb0:	68ca      	ldr	r2, [r1, #12]
 8003eb2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	60cb      	str	r3, [r1, #12]
 8003eba:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003ebe:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8003ec0:	e7fd      	b.n	8003ebe <HAL_NVIC_SystemReset+0x16>
 8003ec2:	bf00      	nop
 8003ec4:	e000ed00 	.word	0xe000ed00
 8003ec8:	05fa0004 	.word	0x05fa0004

08003ecc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ecc:	3801      	subs	r0, #1
 8003ece:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003ed2:	d210      	bcs.n	8003ef6 <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ed4:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ed6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003eda:	4c08      	ldr	r4, [pc, #32]	; (8003efc <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003edc:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ede:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8003ee2:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ee6:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ee8:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003eea:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003eec:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8003eee:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ef2:	6119      	str	r1, [r3, #16]
 8003ef4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003ef6:	2001      	movs	r0, #1
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	e000ed00 	.word	0xe000ed00

08003f00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f04:	2200      	movs	r2, #0
 8003f06:	680c      	ldr	r4, [r1, #0]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f08:	4e70      	ldr	r6, [pc, #448]	; (80040cc <HAL_GPIO_Init+0x1cc>)
{
 8003f0a:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f0c:	4613      	mov	r3, r2
    ioposition = 0x01U << position;
 8003f0e:	f04f 0a01 	mov.w	sl, #1
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f12:	4689      	mov	r9, r1
 8003f14:	e004      	b.n	8003f20 <HAL_GPIO_Init+0x20>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f16:	3301      	adds	r3, #1
 8003f18:	2b10      	cmp	r3, #16
 8003f1a:	f102 0202 	add.w	r2, r2, #2
 8003f1e:	d078      	beq.n	8004012 <HAL_GPIO_Init+0x112>
    ioposition = 0x01U << position;
 8003f20:	fa0a f103 	lsl.w	r1, sl, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f24:	ea01 0b04 	and.w	fp, r1, r4
    if(iocurrent == ioposition)
 8003f28:	43a1      	bics	r1, r4
 8003f2a:	d1f4      	bne.n	8003f16 <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f2c:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8003f30:	f00c 0103 	and.w	r1, ip, #3
 8003f34:	1e4d      	subs	r5, r1, #1
 8003f36:	2d01      	cmp	r5, #1
 8003f38:	d96e      	bls.n	8004018 <HAL_GPIO_Init+0x118>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f3a:	2903      	cmp	r1, #3
 8003f3c:	f040 80ae 	bne.w	800409c <HAL_GPIO_Init+0x19c>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f40:	4091      	lsls	r1, r2
 8003f42:	43cd      	mvns	r5, r1
      temp = GPIOx->MODER;
 8003f44:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f46:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f48:	4329      	orrs	r1, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f4a:	f41c 3f40 	tst.w	ip, #196608	; 0x30000
      GPIOx->MODER = temp;
 8003f4e:	6001      	str	r1, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f50:	d0e1      	beq.n	8003f16 <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f52:	4d5f      	ldr	r5, [pc, #380]	; (80040d0 <HAL_GPIO_Init+0x1d0>)
 8003f54:	2100      	movs	r1, #0
 8003f56:	9103      	str	r1, [sp, #12]
 8003f58:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8003f5a:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8003f5e:	6469      	str	r1, [r5, #68]	; 0x44
 8003f60:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8003f62:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8003f66:	9103      	str	r1, [sp, #12]
 8003f68:	9903      	ldr	r1, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8003f6a:	f023 0103 	bic.w	r1, r3, #3
 8003f6e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8003f72:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f76:	f003 0703 	and.w	r7, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8003f7a:	f8d1 e008 	ldr.w	lr, [r1, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f7e:	00bf      	lsls	r7, r7, #2
 8003f80:	250f      	movs	r5, #15
 8003f82:	40bd      	lsls	r5, r7
 8003f84:	ea2e 0805 	bic.w	r8, lr, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f88:	4d52      	ldr	r5, [pc, #328]	; (80040d4 <HAL_GPIO_Init+0x1d4>)
 8003f8a:	42a8      	cmp	r0, r5
 8003f8c:	d017      	beq.n	8003fbe <HAL_GPIO_Init+0xbe>
 8003f8e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003f92:	42a8      	cmp	r0, r5
 8003f94:	f000 8086 	beq.w	80040a4 <HAL_GPIO_Init+0x1a4>
 8003f98:	4d4f      	ldr	r5, [pc, #316]	; (80040d8 <HAL_GPIO_Init+0x1d8>)
 8003f9a:	42a8      	cmp	r0, r5
 8003f9c:	f000 8087 	beq.w	80040ae <HAL_GPIO_Init+0x1ae>
 8003fa0:	4d4e      	ldr	r5, [pc, #312]	; (80040dc <HAL_GPIO_Init+0x1dc>)
 8003fa2:	42a8      	cmp	r0, r5
 8003fa4:	f000 808a 	beq.w	80040bc <HAL_GPIO_Init+0x1bc>
 8003fa8:	4d4d      	ldr	r5, [pc, #308]	; (80040e0 <HAL_GPIO_Init+0x1e0>)
 8003faa:	42a8      	cmp	r0, r5
 8003fac:	bf0c      	ite	eq
 8003fae:	f04f 0e04 	moveq.w	lr, #4
 8003fb2:	f04f 0e07 	movne.w	lr, #7
 8003fb6:	fa0e f707 	lsl.w	r7, lr, r7
 8003fba:	ea48 0807 	orr.w	r8, r8, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003fbe:	f8c1 8008 	str.w	r8, [r1, #8]
        temp = EXTI->RTSR;
 8003fc2:	68b1      	ldr	r1, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8003fc4:	ea6f 070b 	mvn.w	r7, fp
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003fc8:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8003fcc:	bf0c      	ite	eq
 8003fce:	4039      	andeq	r1, r7
        {
          temp |= iocurrent;
 8003fd0:	ea4b 0101 	orrne.w	r1, fp, r1
        }
        EXTI->RTSR = temp;
 8003fd4:	60b1      	str	r1, [r6, #8]

        temp = EXTI->FTSR;
 8003fd6:	68f5      	ldr	r5, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003fd8:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 8003fdc:	bf0c      	ite	eq
 8003fde:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8003fe0:	ea4b 0505 	orrne.w	r5, fp, r5
        }
        EXTI->FTSR = temp;
 8003fe4:	60f5      	str	r5, [r6, #12]

        temp = EXTI->EMR;
 8003fe6:	6875      	ldr	r5, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003fe8:	f41c 3f00 	tst.w	ip, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8003fec:	bf0c      	ite	eq
 8003fee:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8003ff0:	ea4b 0505 	orrne.w	r5, fp, r5
        }
        EXTI->EMR = temp;
 8003ff4:	6075      	str	r5, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ff6:	6831      	ldr	r1, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ff8:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ffc:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 8004000:	bf0c      	ite	eq
 8004002:	4039      	andeq	r1, r7
        {
          temp |= iocurrent;
 8004004:	ea4b 0101 	orrne.w	r1, fp, r1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004008:	2b10      	cmp	r3, #16
        }
        EXTI->IMR = temp;
 800400a:	6031      	str	r1, [r6, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800400c:	f102 0202 	add.w	r2, r2, #2
 8004010:	d186      	bne.n	8003f20 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004012:	b005      	add	sp, #20
 8004014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004018:	f8d9 500c 	ldr.w	r5, [r9, #12]
        temp = GPIOx->OSPEEDR; 
 800401c:	6887      	ldr	r7, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800401e:	fa05 f802 	lsl.w	r8, r5, r2
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004022:	2503      	movs	r5, #3
 8004024:	fa05 fe02 	lsl.w	lr, r5, r2
 8004028:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 800402c:	ea48 0707 	orr.w	r7, r8, r7
        GPIOx->OSPEEDR = temp;
 8004030:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8004032:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004034:	ea6f 050e 	mvn.w	r5, lr
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004038:	ea27 0e0b 	bic.w	lr, r7, fp
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800403c:	f3cc 1700 	ubfx	r7, ip, #4, #1
 8004040:	409f      	lsls	r7, r3
 8004042:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8004046:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8004048:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800404a:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800404e:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8004052:	4097      	lsls	r7, r2
 8004054:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004058:	2902      	cmp	r1, #2
        GPIOx->PUPDR = temp;
 800405a:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800405c:	fa01 f102 	lsl.w	r1, r1, r2
 8004060:	f47f af70 	bne.w	8003f44 <HAL_GPIO_Init+0x44>
        temp = GPIOx->AFR[position >> 3U];
 8004064:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8004068:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800406c:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8004070:	f8de 7020 	ldr.w	r7, [lr, #32]
 8004074:	9700      	str	r7, [sp, #0]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004076:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800407a:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800407e:	fa07 f708 	lsl.w	r7, r7, r8
 8004082:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004084:	270f      	movs	r7, #15
 8004086:	fa07 f808 	lsl.w	r8, r7, r8
 800408a:	9f00      	ldr	r7, [sp, #0]
 800408c:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004090:	9f01      	ldr	r7, [sp, #4]
 8004092:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3U] = temp;
 8004096:	f8ce 7020 	str.w	r7, [lr, #32]
 800409a:	e753      	b.n	8003f44 <HAL_GPIO_Init+0x44>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800409c:	2503      	movs	r5, #3
 800409e:	4095      	lsls	r5, r2
 80040a0:	43ed      	mvns	r5, r5
 80040a2:	e7d1      	b.n	8004048 <HAL_GPIO_Init+0x148>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80040a4:	fa0a f707 	lsl.w	r7, sl, r7
 80040a8:	ea48 0807 	orr.w	r8, r8, r7
 80040ac:	e787      	b.n	8003fbe <HAL_GPIO_Init+0xbe>
 80040ae:	f04f 0e02 	mov.w	lr, #2
 80040b2:	fa0e f707 	lsl.w	r7, lr, r7
 80040b6:	ea48 0807 	orr.w	r8, r8, r7
 80040ba:	e780      	b.n	8003fbe <HAL_GPIO_Init+0xbe>
 80040bc:	f04f 0e03 	mov.w	lr, #3
 80040c0:	fa0e f707 	lsl.w	r7, lr, r7
 80040c4:	ea48 0807 	orr.w	r8, r8, r7
 80040c8:	e779      	b.n	8003fbe <HAL_GPIO_Init+0xbe>
 80040ca:	bf00      	nop
 80040cc:	40013c00 	.word	0x40013c00
 80040d0:	40023800 	.word	0x40023800
 80040d4:	40020000 	.word	0x40020000
 80040d8:	40020800 	.word	0x40020800
 80040dc:	40020c00 	.word	0x40020c00
 80040e0:	40021000 	.word	0x40021000

080040e4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80040e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040e8:	2300      	movs	r3, #0
    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80040ea:	f8df b10c 	ldr.w	fp, [pc, #268]	; 80041f8 <HAL_GPIO_DeInit+0x114>
    ioposition = 0x01U << position;
 80040ee:	2601      	movs	r6, #1
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80040f0:	f04f 090f 	mov.w	r9, #15
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80040f4:	f04f 0a03 	mov.w	sl, #3
 80040f8:	e002      	b.n	8004100 <HAL_GPIO_DeInit+0x1c>
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040fa:	3301      	adds	r3, #1
 80040fc:	2b10      	cmp	r3, #16
 80040fe:	d064      	beq.n	80041ca <HAL_GPIO_DeInit+0xe6>
    ioposition = 0x01U << position;
 8004100:	fa06 f203 	lsl.w	r2, r6, r3
    if(iocurrent == ioposition)
 8004104:	ea32 0401 	bics.w	r4, r2, r1
    iocurrent = (GPIO_Pin) & ioposition;
 8004108:	ea02 0c01 	and.w	ip, r2, r1
    if(iocurrent == ioposition)
 800410c:	d1f5      	bne.n	80040fa <HAL_GPIO_DeInit+0x16>
      tmp = SYSCFG->EXTICR[position >> 2U];
 800410e:	f023 0503 	bic.w	r5, r3, #3
 8004112:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8004116:	f505 359c 	add.w	r5, r5, #79872	; 0x13800
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800411a:	f003 0403 	and.w	r4, r3, #3
 800411e:	00a4      	lsls	r4, r4, #2
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004120:	f8d5 e008 	ldr.w	lr, [r5, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004124:	fa09 f804 	lsl.w	r8, r9, r4
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004128:	4558      	cmp	r0, fp
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800412a:	4627      	mov	r7, r4
 800412c:	ea08 0e0e 	and.w	lr, r8, lr
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004130:	d04d      	beq.n	80041ce <HAL_GPIO_DeInit+0xea>
 8004132:	4c2c      	ldr	r4, [pc, #176]	; (80041e4 <HAL_GPIO_DeInit+0x100>)
 8004134:	42a0      	cmp	r0, r4
 8004136:	d04c      	beq.n	80041d2 <HAL_GPIO_DeInit+0xee>
 8004138:	4c2b      	ldr	r4, [pc, #172]	; (80041e8 <HAL_GPIO_DeInit+0x104>)
 800413a:	42a0      	cmp	r0, r4
 800413c:	d04c      	beq.n	80041d8 <HAL_GPIO_DeInit+0xf4>
 800413e:	4c2b      	ldr	r4, [pc, #172]	; (80041ec <HAL_GPIO_DeInit+0x108>)
 8004140:	42a0      	cmp	r0, r4
 8004142:	d04c      	beq.n	80041de <HAL_GPIO_DeInit+0xfa>
 8004144:	4c2a      	ldr	r4, [pc, #168]	; (80041f0 <HAL_GPIO_DeInit+0x10c>)
 8004146:	42a0      	cmp	r0, r4
 8004148:	bf14      	ite	ne
 800414a:	2407      	movne	r4, #7
 800414c:	2404      	moveq	r4, #4
 800414e:	40bc      	lsls	r4, r7
 8004150:	45a6      	cmp	lr, r4
 8004152:	d115      	bne.n	8004180 <HAL_GPIO_DeInit+0x9c>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004154:	4c27      	ldr	r4, [pc, #156]	; (80041f4 <HAL_GPIO_DeInit+0x110>)
 8004156:	4f27      	ldr	r7, [pc, #156]	; (80041f4 <HAL_GPIO_DeInit+0x110>)
 8004158:	6824      	ldr	r4, [r4, #0]
 800415a:	ea24 040c 	bic.w	r4, r4, ip
 800415e:	603c      	str	r4, [r7, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004160:	687c      	ldr	r4, [r7, #4]
 8004162:	ea24 040c 	bic.w	r4, r4, ip
 8004166:	607c      	str	r4, [r7, #4]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004168:	68fc      	ldr	r4, [r7, #12]
 800416a:	ea24 040c 	bic.w	r4, r4, ip
 800416e:	60fc      	str	r4, [r7, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004170:	68bc      	ldr	r4, [r7, #8]
 8004172:	ea24 040c 	bic.w	r4, r4, ip
 8004176:	60bc      	str	r4, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004178:	68ac      	ldr	r4, [r5, #8]
 800417a:	ea24 0408 	bic.w	r4, r4, r8
 800417e:	60ac      	str	r4, [r5, #8]
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004180:	6805      	ldr	r5, [r0, #0]
 8004182:	005c      	lsls	r4, r3, #1
 8004184:	fa0a f404 	lsl.w	r4, sl, r4

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004188:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800418c:	ea25 0504 	bic.w	r5, r5, r4
 8004190:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8004194:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004196:	f003 0507 	and.w	r5, r3, #7
 800419a:	f8dc e020 	ldr.w	lr, [ip, #32]
 800419e:	00ad      	lsls	r5, r5, #2
 80041a0:	fa09 f505 	lsl.w	r5, r9, r5
 80041a4:	ea2e 0505 	bic.w	r5, lr, r5
 80041a8:	f8cc 5020 	str.w	r5, [ip, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80041ac:	68c5      	ldr	r5, [r0, #12]
 80041ae:	ea25 0504 	bic.w	r5, r5, r4
 80041b2:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041b4:	6845      	ldr	r5, [r0, #4]
 80041b6:	ea25 0202 	bic.w	r2, r5, r2
 80041ba:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80041bc:	6882      	ldr	r2, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041be:	3301      	adds	r3, #1
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80041c0:	ea22 0404 	bic.w	r4, r2, r4
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041c4:	2b10      	cmp	r3, #16
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80041c6:	6084      	str	r4, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041c8:	d19a      	bne.n	8004100 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80041ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041ce:	2400      	movs	r4, #0
 80041d0:	e7be      	b.n	8004150 <HAL_GPIO_DeInit+0x6c>
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80041d2:	fa06 f407 	lsl.w	r4, r6, r7
 80041d6:	e7bb      	b.n	8004150 <HAL_GPIO_DeInit+0x6c>
 80041d8:	2402      	movs	r4, #2
 80041da:	40bc      	lsls	r4, r7
 80041dc:	e7b8      	b.n	8004150 <HAL_GPIO_DeInit+0x6c>
 80041de:	fa0a f407 	lsl.w	r4, sl, r7
 80041e2:	e7b5      	b.n	8004150 <HAL_GPIO_DeInit+0x6c>
 80041e4:	40020400 	.word	0x40020400
 80041e8:	40020800 	.word	0x40020800
 80041ec:	40020c00 	.word	0x40020c00
 80041f0:	40021000 	.word	0x40021000
 80041f4:	40013c00 	.word	0x40013c00
 80041f8:	40020000 	.word	0x40020000

080041fc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041fc:	b902      	cbnz	r2, 8004200 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80041fe:	0409      	lsls	r1, r1, #16
 8004200:	6181      	str	r1, [r0, #24]
  }
}
 8004202:	4770      	bx	lr

08004204 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004204:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004206:	ea01 0203 	and.w	r2, r1, r3
 800420a:	ea21 0103 	bic.w	r1, r1, r3
 800420e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004212:	6181      	str	r1, [r0, #24]
}
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop

08004218 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8004218:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 800421a:	4c0d      	ldr	r4, [pc, #52]	; (8004250 <HAL_PWR_EnterSTOPMode+0x38>)
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800421c:	4a0d      	ldr	r2, [pc, #52]	; (8004254 <HAL_PWR_EnterSTOPMode+0x3c>)
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 800421e:	6823      	ldr	r3, [r4, #0]
 8004220:	f023 0303 	bic.w	r3, r3, #3
 8004224:	4318      	orrs	r0, r3
 8004226:	6020      	str	r0, [r4, #0]
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004228:	6913      	ldr	r3, [r2, #16]
  
  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800422a:	2901      	cmp	r1, #1
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800422c:	f043 0304 	orr.w	r3, r3, #4
 8004230:	6113      	str	r3, [r2, #16]
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8004232:	d00a      	beq.n	800424a <HAL_PWR_EnterSTOPMode+0x32>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004234:	bf40      	sev
    __WFE();
 8004236:	bf20      	wfe
    __WFE();
 8004238:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 800423a:	4a06      	ldr	r2, [pc, #24]	; (8004254 <HAL_PWR_EnterSTOPMode+0x3c>)
}
 800423c:	f85d 4b04 	ldr.w	r4, [sp], #4
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 8004240:	6913      	ldr	r3, [r2, #16]
 8004242:	f023 0304 	bic.w	r3, r3, #4
 8004246:	6113      	str	r3, [r2, #16]
}
 8004248:	4770      	bx	lr
    __WFI();
 800424a:	bf30      	wfi
 800424c:	e7f5      	b.n	800423a <HAL_PWR_EnterSTOPMode+0x22>
 800424e:	bf00      	nop
 8004250:	40007000 	.word	0x40007000
 8004254:	e000ed00 	.word	0xe000ed00

08004258 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004258:	2800      	cmp	r0, #0
 800425a:	f000 81a2 	beq.w	80045a2 <HAL_RCC_OscConfig+0x34a>
{
 800425e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004262:	6803      	ldr	r3, [r0, #0]
 8004264:	07dd      	lsls	r5, r3, #31
{
 8004266:	b082      	sub	sp, #8
 8004268:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800426a:	d52f      	bpl.n	80042cc <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800426c:	499e      	ldr	r1, [pc, #632]	; (80044e8 <HAL_RCC_OscConfig+0x290>)
 800426e:	688a      	ldr	r2, [r1, #8]
 8004270:	f002 020c 	and.w	r2, r2, #12
 8004274:	2a04      	cmp	r2, #4
 8004276:	f000 80ed 	beq.w	8004454 <HAL_RCC_OscConfig+0x1fc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800427a:	688a      	ldr	r2, [r1, #8]
 800427c:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004280:	2a08      	cmp	r2, #8
 8004282:	f000 80e3 	beq.w	800444c <HAL_RCC_OscConfig+0x1f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004286:	6863      	ldr	r3, [r4, #4]
 8004288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800428c:	f000 80ec 	beq.w	8004468 <HAL_RCC_OscConfig+0x210>
 8004290:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004294:	f000 8175 	beq.w	8004582 <HAL_RCC_OscConfig+0x32a>
 8004298:	4d93      	ldr	r5, [pc, #588]	; (80044e8 <HAL_RCC_OscConfig+0x290>)
 800429a:	682a      	ldr	r2, [r5, #0]
 800429c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80042a0:	602a      	str	r2, [r5, #0]
 80042a2:	682a      	ldr	r2, [r5, #0]
 80042a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80042a8:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	f040 80e1 	bne.w	8004472 <HAL_RCC_OscConfig+0x21a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042b0:	f7ff fb3c 	bl	800392c <HAL_GetTick>
 80042b4:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042b6:	e005      	b.n	80042c4 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042b8:	f7ff fb38 	bl	800392c <HAL_GetTick>
 80042bc:	1b80      	subs	r0, r0, r6
 80042be:	2864      	cmp	r0, #100	; 0x64
 80042c0:	f200 8101 	bhi.w	80044c6 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042c4:	682b      	ldr	r3, [r5, #0]
 80042c6:	039b      	lsls	r3, r3, #14
 80042c8:	d4f6      	bmi.n	80042b8 <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042ca:	6823      	ldr	r3, [r4, #0]
 80042cc:	079f      	lsls	r7, r3, #30
 80042ce:	d528      	bpl.n	8004322 <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042d0:	4a85      	ldr	r2, [pc, #532]	; (80044e8 <HAL_RCC_OscConfig+0x290>)
 80042d2:	6891      	ldr	r1, [r2, #8]
 80042d4:	f011 0f0c 	tst.w	r1, #12
 80042d8:	f000 8090 	beq.w	80043fc <HAL_RCC_OscConfig+0x1a4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042dc:	6891      	ldr	r1, [r2, #8]
 80042de:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042e2:	2908      	cmp	r1, #8
 80042e4:	f000 8086 	beq.w	80043f4 <HAL_RCC_OscConfig+0x19c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042e8:	68e3      	ldr	r3, [r4, #12]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f000 810e 	beq.w	800450c <HAL_RCC_OscConfig+0x2b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042f0:	4b7e      	ldr	r3, [pc, #504]	; (80044ec <HAL_RCC_OscConfig+0x294>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042f2:	4e7d      	ldr	r6, [pc, #500]	; (80044e8 <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_ENABLE();
 80042f4:	2201      	movs	r2, #1
 80042f6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80042f8:	f7ff fb18 	bl	800392c <HAL_GetTick>
 80042fc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042fe:	e005      	b.n	800430c <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004300:	f7ff fb14 	bl	800392c <HAL_GetTick>
 8004304:	1b40      	subs	r0, r0, r5
 8004306:	2802      	cmp	r0, #2
 8004308:	f200 80dd 	bhi.w	80044c6 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800430c:	6833      	ldr	r3, [r6, #0]
 800430e:	0798      	lsls	r0, r3, #30
 8004310:	d5f6      	bpl.n	8004300 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004312:	6833      	ldr	r3, [r6, #0]
 8004314:	6922      	ldr	r2, [r4, #16]
 8004316:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800431a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800431e:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004320:	6823      	ldr	r3, [r4, #0]
 8004322:	071a      	lsls	r2, r3, #28
 8004324:	d451      	bmi.n	80043ca <HAL_RCC_OscConfig+0x172>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004326:	0758      	lsls	r0, r3, #29
 8004328:	d52f      	bpl.n	800438a <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800432a:	4a6f      	ldr	r2, [pc, #444]	; (80044e8 <HAL_RCC_OscConfig+0x290>)
 800432c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800432e:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8004332:	d07f      	beq.n	8004434 <HAL_RCC_OscConfig+0x1dc>
    FlagStatus       pwrclkchanged = RESET;
 8004334:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004336:	4e6e      	ldr	r6, [pc, #440]	; (80044f0 <HAL_RCC_OscConfig+0x298>)
 8004338:	6833      	ldr	r3, [r6, #0]
 800433a:	05d9      	lsls	r1, r3, #23
 800433c:	f140 80b3 	bpl.w	80044a6 <HAL_RCC_OscConfig+0x24e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004340:	68a3      	ldr	r3, [r4, #8]
 8004342:	2b01      	cmp	r3, #1
 8004344:	f000 80c3 	beq.w	80044ce <HAL_RCC_OscConfig+0x276>
 8004348:	2b05      	cmp	r3, #5
 800434a:	f000 812c 	beq.w	80045a6 <HAL_RCC_OscConfig+0x34e>
 800434e:	4e66      	ldr	r6, [pc, #408]	; (80044e8 <HAL_RCC_OscConfig+0x290>)
 8004350:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8004352:	f022 0201 	bic.w	r2, r2, #1
 8004356:	6732      	str	r2, [r6, #112]	; 0x70
 8004358:	6f32      	ldr	r2, [r6, #112]	; 0x70
 800435a:	f022 0204 	bic.w	r2, r2, #4
 800435e:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004360:	2b00      	cmp	r3, #0
 8004362:	f040 80b9 	bne.w	80044d8 <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004366:	f7ff fae1 	bl	800392c <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800436a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800436e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004370:	e005      	b.n	800437e <HAL_RCC_OscConfig+0x126>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004372:	f7ff fadb 	bl	800392c <HAL_GetTick>
 8004376:	1bc0      	subs	r0, r0, r7
 8004378:	4540      	cmp	r0, r8
 800437a:	f200 80a4 	bhi.w	80044c6 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800437e:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8004380:	0798      	lsls	r0, r3, #30
 8004382:	d4f6      	bmi.n	8004372 <HAL_RCC_OscConfig+0x11a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004384:	2d00      	cmp	r5, #0
 8004386:	f040 8106 	bne.w	8004596 <HAL_RCC_OscConfig+0x33e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800438a:	69a0      	ldr	r0, [r4, #24]
 800438c:	b1c8      	cbz	r0, 80043c2 <HAL_RCC_OscConfig+0x16a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800438e:	4d56      	ldr	r5, [pc, #344]	; (80044e8 <HAL_RCC_OscConfig+0x290>)
 8004390:	68ab      	ldr	r3, [r5, #8]
 8004392:	f003 030c 	and.w	r3, r3, #12
 8004396:	2b08      	cmp	r3, #8
 8004398:	f000 80c9 	beq.w	800452e <HAL_RCC_OscConfig+0x2d6>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800439c:	4b53      	ldr	r3, [pc, #332]	; (80044ec <HAL_RCC_OscConfig+0x294>)
 800439e:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043a0:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80043a2:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043a4:	f000 8109 	beq.w	80045ba <HAL_RCC_OscConfig+0x362>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a8:	f7ff fac0 	bl	800392c <HAL_GetTick>
 80043ac:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ae:	e005      	b.n	80043bc <HAL_RCC_OscConfig+0x164>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043b0:	f7ff fabc 	bl	800392c <HAL_GetTick>
 80043b4:	1b00      	subs	r0, r0, r4
 80043b6:	2802      	cmp	r0, #2
 80043b8:	f200 8085 	bhi.w	80044c6 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043bc:	682b      	ldr	r3, [r5, #0]
 80043be:	019b      	lsls	r3, r3, #6
 80043c0:	d4f6      	bmi.n	80043b0 <HAL_RCC_OscConfig+0x158>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80043c2:	2000      	movs	r0, #0
}
 80043c4:	b002      	add	sp, #8
 80043c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043ca:	6963      	ldr	r3, [r4, #20]
 80043cc:	b30b      	cbz	r3, 8004412 <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_LSI_ENABLE();
 80043ce:	4b47      	ldr	r3, [pc, #284]	; (80044ec <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043d0:	4e45      	ldr	r6, [pc, #276]	; (80044e8 <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_ENABLE();
 80043d2:	2201      	movs	r2, #1
 80043d4:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 80043d8:	f7ff faa8 	bl	800392c <HAL_GetTick>
 80043dc:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043de:	e004      	b.n	80043ea <HAL_RCC_OscConfig+0x192>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043e0:	f7ff faa4 	bl	800392c <HAL_GetTick>
 80043e4:	1b40      	subs	r0, r0, r5
 80043e6:	2802      	cmp	r0, #2
 80043e8:	d86d      	bhi.n	80044c6 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043ea:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80043ec:	079b      	lsls	r3, r3, #30
 80043ee:	d5f7      	bpl.n	80043e0 <HAL_RCC_OscConfig+0x188>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043f0:	6823      	ldr	r3, [r4, #0]
 80043f2:	e798      	b.n	8004326 <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043f4:	6852      	ldr	r2, [r2, #4]
 80043f6:	0256      	lsls	r6, r2, #9
 80043f8:	f53f af76 	bmi.w	80042e8 <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043fc:	4a3a      	ldr	r2, [pc, #232]	; (80044e8 <HAL_RCC_OscConfig+0x290>)
 80043fe:	6812      	ldr	r2, [r2, #0]
 8004400:	0795      	lsls	r5, r2, #30
 8004402:	d544      	bpl.n	800448e <HAL_RCC_OscConfig+0x236>
 8004404:	68e2      	ldr	r2, [r4, #12]
 8004406:	2a01      	cmp	r2, #1
 8004408:	d041      	beq.n	800448e <HAL_RCC_OscConfig+0x236>
        return HAL_ERROR;
 800440a:	2001      	movs	r0, #1
}
 800440c:	b002      	add	sp, #8
 800440e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8004412:	4a36      	ldr	r2, [pc, #216]	; (80044ec <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004414:	4e34      	ldr	r6, [pc, #208]	; (80044e8 <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_DISABLE();
 8004416:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 800441a:	f7ff fa87 	bl	800392c <HAL_GetTick>
 800441e:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004420:	e004      	b.n	800442c <HAL_RCC_OscConfig+0x1d4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004422:	f7ff fa83 	bl	800392c <HAL_GetTick>
 8004426:	1b40      	subs	r0, r0, r5
 8004428:	2802      	cmp	r0, #2
 800442a:	d84c      	bhi.n	80044c6 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800442c:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800442e:	079f      	lsls	r7, r3, #30
 8004430:	d4f7      	bmi.n	8004422 <HAL_RCC_OscConfig+0x1ca>
 8004432:	e7dd      	b.n	80043f0 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004434:	9301      	str	r3, [sp, #4]
 8004436:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800443c:	6413      	str	r3, [r2, #64]	; 0x40
 800443e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004440:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004444:	9301      	str	r3, [sp, #4]
 8004446:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004448:	2501      	movs	r5, #1
 800444a:	e774      	b.n	8004336 <HAL_RCC_OscConfig+0xde>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800444c:	684a      	ldr	r2, [r1, #4]
 800444e:	0250      	lsls	r0, r2, #9
 8004450:	f57f af19 	bpl.w	8004286 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004454:	4a24      	ldr	r2, [pc, #144]	; (80044e8 <HAL_RCC_OscConfig+0x290>)
 8004456:	6812      	ldr	r2, [r2, #0]
 8004458:	0391      	lsls	r1, r2, #14
 800445a:	f57f af37 	bpl.w	80042cc <HAL_RCC_OscConfig+0x74>
 800445e:	6862      	ldr	r2, [r4, #4]
 8004460:	2a00      	cmp	r2, #0
 8004462:	f47f af33 	bne.w	80042cc <HAL_RCC_OscConfig+0x74>
 8004466:	e7d0      	b.n	800440a <HAL_RCC_OscConfig+0x1b2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004468:	4a1f      	ldr	r2, [pc, #124]	; (80044e8 <HAL_RCC_OscConfig+0x290>)
 800446a:	6813      	ldr	r3, [r2, #0]
 800446c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004470:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004472:	f7ff fa5b 	bl	800392c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004476:	4e1c      	ldr	r6, [pc, #112]	; (80044e8 <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 8004478:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800447a:	e004      	b.n	8004486 <HAL_RCC_OscConfig+0x22e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800447c:	f7ff fa56 	bl	800392c <HAL_GetTick>
 8004480:	1b40      	subs	r0, r0, r5
 8004482:	2864      	cmp	r0, #100	; 0x64
 8004484:	d81f      	bhi.n	80044c6 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004486:	6833      	ldr	r3, [r6, #0]
 8004488:	039a      	lsls	r2, r3, #14
 800448a:	d5f7      	bpl.n	800447c <HAL_RCC_OscConfig+0x224>
 800448c:	e71d      	b.n	80042ca <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800448e:	4916      	ldr	r1, [pc, #88]	; (80044e8 <HAL_RCC_OscConfig+0x290>)
 8004490:	6920      	ldr	r0, [r4, #16]
 8004492:	680a      	ldr	r2, [r1, #0]
 8004494:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8004498:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 800449c:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800449e:	071a      	lsls	r2, r3, #28
 80044a0:	f57f af41 	bpl.w	8004326 <HAL_RCC_OscConfig+0xce>
 80044a4:	e791      	b.n	80043ca <HAL_RCC_OscConfig+0x172>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044a6:	6833      	ldr	r3, [r6, #0]
 80044a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044ac:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80044ae:	f7ff fa3d 	bl	800392c <HAL_GetTick>
 80044b2:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044b4:	6833      	ldr	r3, [r6, #0]
 80044b6:	05da      	lsls	r2, r3, #23
 80044b8:	f53f af42 	bmi.w	8004340 <HAL_RCC_OscConfig+0xe8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044bc:	f7ff fa36 	bl	800392c <HAL_GetTick>
 80044c0:	1bc0      	subs	r0, r0, r7
 80044c2:	2802      	cmp	r0, #2
 80044c4:	d9f6      	bls.n	80044b4 <HAL_RCC_OscConfig+0x25c>
            return HAL_TIMEOUT;
 80044c6:	2003      	movs	r0, #3
}
 80044c8:	b002      	add	sp, #8
 80044ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044ce:	4a06      	ldr	r2, [pc, #24]	; (80044e8 <HAL_RCC_OscConfig+0x290>)
 80044d0:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80044d2:	f043 0301 	orr.w	r3, r3, #1
 80044d6:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 80044d8:	f7ff fa28 	bl	800392c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044dc:	4f02      	ldr	r7, [pc, #8]	; (80044e8 <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 80044de:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044e0:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044e4:	e00b      	b.n	80044fe <HAL_RCC_OscConfig+0x2a6>
 80044e6:	bf00      	nop
 80044e8:	40023800 	.word	0x40023800
 80044ec:	42470000 	.word	0x42470000
 80044f0:	40007000 	.word	0x40007000
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044f4:	f7ff fa1a 	bl	800392c <HAL_GetTick>
 80044f8:	1b80      	subs	r0, r0, r6
 80044fa:	4540      	cmp	r0, r8
 80044fc:	d8e3      	bhi.n	80044c6 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004500:	079b      	lsls	r3, r3, #30
 8004502:	d5f7      	bpl.n	80044f4 <HAL_RCC_OscConfig+0x29c>
    if(pwrclkchanged == SET)
 8004504:	2d00      	cmp	r5, #0
 8004506:	f43f af40 	beq.w	800438a <HAL_RCC_OscConfig+0x132>
 800450a:	e044      	b.n	8004596 <HAL_RCC_OscConfig+0x33e>
        __HAL_RCC_HSI_DISABLE();
 800450c:	4a42      	ldr	r2, [pc, #264]	; (8004618 <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800450e:	4e43      	ldr	r6, [pc, #268]	; (800461c <HAL_RCC_OscConfig+0x3c4>)
        __HAL_RCC_HSI_DISABLE();
 8004510:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004512:	f7ff fa0b 	bl	800392c <HAL_GetTick>
 8004516:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004518:	e004      	b.n	8004524 <HAL_RCC_OscConfig+0x2cc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800451a:	f7ff fa07 	bl	800392c <HAL_GetTick>
 800451e:	1b40      	subs	r0, r0, r5
 8004520:	2802      	cmp	r0, #2
 8004522:	d8d0      	bhi.n	80044c6 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004524:	6833      	ldr	r3, [r6, #0]
 8004526:	0799      	lsls	r1, r3, #30
 8004528:	d4f7      	bmi.n	800451a <HAL_RCC_OscConfig+0x2c2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800452a:	6823      	ldr	r3, [r4, #0]
 800452c:	e6f9      	b.n	8004322 <HAL_RCC_OscConfig+0xca>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800452e:	2801      	cmp	r0, #1
 8004530:	f43f af48 	beq.w	80043c4 <HAL_RCC_OscConfig+0x16c>
        pll_config = RCC->PLLCFGR;
 8004534:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004536:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004538:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800453c:	4291      	cmp	r1, r2
 800453e:	f47f af64 	bne.w	800440a <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004542:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004544:	f003 013f 	and.w	r1, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004548:	4291      	cmp	r1, r2
 800454a:	f47f af5e 	bne.w	800440a <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800454e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004550:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8004554:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004556:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800455a:	f47f af56 	bne.w	800440a <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800455e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004560:	0852      	lsrs	r2, r2, #1
 8004562:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8004566:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004568:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800456c:	f47f af4d 	bne.w	800440a <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004570:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004572:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004576:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
            return HAL_TIMEOUT;
 800457a:	bf14      	ite	ne
 800457c:	2001      	movne	r0, #1
 800457e:	2000      	moveq	r0, #0
 8004580:	e720      	b.n	80043c4 <HAL_RCC_OscConfig+0x16c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004582:	4b26      	ldr	r3, [pc, #152]	; (800461c <HAL_RCC_OscConfig+0x3c4>)
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800458a:	601a      	str	r2, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004592:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004594:	e76d      	b.n	8004472 <HAL_RCC_OscConfig+0x21a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004596:	4a21      	ldr	r2, [pc, #132]	; (800461c <HAL_RCC_OscConfig+0x3c4>)
 8004598:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800459a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800459e:	6413      	str	r3, [r2, #64]	; 0x40
 80045a0:	e6f3      	b.n	800438a <HAL_RCC_OscConfig+0x132>
    return HAL_ERROR;
 80045a2:	2001      	movs	r0, #1
}
 80045a4:	4770      	bx	lr
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045a6:	4b1d      	ldr	r3, [pc, #116]	; (800461c <HAL_RCC_OscConfig+0x3c4>)
 80045a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80045aa:	f042 0204 	orr.w	r2, r2, #4
 80045ae:	671a      	str	r2, [r3, #112]	; 0x70
 80045b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80045b2:	f042 0201 	orr.w	r2, r2, #1
 80045b6:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045b8:	e78e      	b.n	80044d8 <HAL_RCC_OscConfig+0x280>
        tickstart = HAL_GetTick();
 80045ba:	f7ff f9b7 	bl	800392c <HAL_GetTick>
 80045be:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045c0:	e005      	b.n	80045ce <HAL_RCC_OscConfig+0x376>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045c2:	f7ff f9b3 	bl	800392c <HAL_GetTick>
 80045c6:	1b80      	subs	r0, r0, r6
 80045c8:	2802      	cmp	r0, #2
 80045ca:	f63f af7c 	bhi.w	80044c6 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ce:	682b      	ldr	r3, [r5, #0]
 80045d0:	0199      	lsls	r1, r3, #6
 80045d2:	d4f6      	bmi.n	80045c2 <HAL_RCC_OscConfig+0x36a>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045d4:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 80045d8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80045da:	430b      	orrs	r3, r1
 80045dc:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80045e0:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
 80045e4:	0852      	lsrs	r2, r2, #1
 80045e6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80045ea:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 80045ec:	490a      	ldr	r1, [pc, #40]	; (8004618 <HAL_RCC_OscConfig+0x3c0>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 80045f2:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045f4:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80045f6:	660a      	str	r2, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 80045f8:	f7ff f998 	bl	800392c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045fc:	4d07      	ldr	r5, [pc, #28]	; (800461c <HAL_RCC_OscConfig+0x3c4>)
        tickstart = HAL_GetTick();
 80045fe:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004600:	e005      	b.n	800460e <HAL_RCC_OscConfig+0x3b6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004602:	f7ff f993 	bl	800392c <HAL_GetTick>
 8004606:	1b00      	subs	r0, r0, r4
 8004608:	2802      	cmp	r0, #2
 800460a:	f63f af5c 	bhi.w	80044c6 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800460e:	682b      	ldr	r3, [r5, #0]
 8004610:	019a      	lsls	r2, r3, #6
 8004612:	d5f6      	bpl.n	8004602 <HAL_RCC_OscConfig+0x3aa>
 8004614:	e6d5      	b.n	80043c2 <HAL_RCC_OscConfig+0x16a>
 8004616:	bf00      	nop
 8004618:	42470000 	.word	0x42470000
 800461c:	40023800 	.word	0x40023800

08004620 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8004620:	4b01      	ldr	r3, [pc, #4]	; (8004628 <HAL_RCC_EnableCSS+0x8>)
 8004622:	2201      	movs	r2, #1
 8004624:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8004626:	4770      	bx	lr
 8004628:	42470000 	.word	0x42470000

0800462c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800462c:	4910      	ldr	r1, [pc, #64]	; (8004670 <HAL_RCC_GetSysClockFreq+0x44>)
{
 800462e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004630:	688b      	ldr	r3, [r1, #8]
 8004632:	f003 030c 	and.w	r3, r3, #12
 8004636:	2b08      	cmp	r3, #8
 8004638:	d001      	beq.n	800463e <HAL_RCC_GetSysClockFreq+0x12>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800463a:	480e      	ldr	r0, [pc, #56]	; (8004674 <HAL_RCC_GetSysClockFreq+0x48>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800463c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800463e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004640:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004642:	6849      	ldr	r1, [r1, #4]
 8004644:	480b      	ldr	r0, [pc, #44]	; (8004674 <HAL_RCC_GetSysClockFreq+0x48>)
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004646:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800464a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800464e:	bf18      	it	ne
 8004650:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004652:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004656:	fba1 0100 	umull	r0, r1, r1, r0
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800465a:	f7fc f8f7 	bl	800084c <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800465e:	4b04      	ldr	r3, [pc, #16]	; (8004670 <HAL_RCC_GetSysClockFreq+0x44>)
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8004666:	3301      	adds	r3, #1
 8004668:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 800466a:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800466e:	bd08      	pop	{r3, pc}
 8004670:	40023800 	.word	0x40023800
 8004674:	00f42400 	.word	0x00f42400

08004678 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8004678:	2800      	cmp	r0, #0
 800467a:	f000 8087 	beq.w	800478c <HAL_RCC_ClockConfig+0x114>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800467e:	4a48      	ldr	r2, [pc, #288]	; (80047a0 <HAL_RCC_ClockConfig+0x128>)
 8004680:	6813      	ldr	r3, [r2, #0]
 8004682:	f003 0307 	and.w	r3, r3, #7
 8004686:	428b      	cmp	r3, r1
{
 8004688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800468c:	460d      	mov	r5, r1
 800468e:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004690:	d209      	bcs.n	80046a6 <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004692:	b2cb      	uxtb	r3, r1
 8004694:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004696:	6813      	ldr	r3, [r2, #0]
 8004698:	f003 0307 	and.w	r3, r3, #7
 800469c:	428b      	cmp	r3, r1
 800469e:	d002      	beq.n	80046a6 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80046a0:	2001      	movs	r0, #1
}
 80046a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046a6:	6823      	ldr	r3, [r4, #0]
 80046a8:	0798      	lsls	r0, r3, #30
 80046aa:	d514      	bpl.n	80046d6 <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046ac:	0759      	lsls	r1, r3, #29
 80046ae:	d504      	bpl.n	80046ba <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046b0:	493c      	ldr	r1, [pc, #240]	; (80047a4 <HAL_RCC_ClockConfig+0x12c>)
 80046b2:	688a      	ldr	r2, [r1, #8]
 80046b4:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80046b8:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046ba:	071a      	lsls	r2, r3, #28
 80046bc:	d504      	bpl.n	80046c8 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046be:	4939      	ldr	r1, [pc, #228]	; (80047a4 <HAL_RCC_ClockConfig+0x12c>)
 80046c0:	688a      	ldr	r2, [r1, #8]
 80046c2:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 80046c6:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046c8:	4936      	ldr	r1, [pc, #216]	; (80047a4 <HAL_RCC_ClockConfig+0x12c>)
 80046ca:	68a0      	ldr	r0, [r4, #8]
 80046cc:	688a      	ldr	r2, [r1, #8]
 80046ce:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80046d2:	4302      	orrs	r2, r0
 80046d4:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046d6:	07df      	lsls	r7, r3, #31
 80046d8:	d521      	bpl.n	800471e <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046da:	6862      	ldr	r2, [r4, #4]
 80046dc:	2a01      	cmp	r2, #1
 80046de:	d057      	beq.n	8004790 <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046e0:	1e93      	subs	r3, r2, #2
 80046e2:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046e4:	4b2f      	ldr	r3, [pc, #188]	; (80047a4 <HAL_RCC_ClockConfig+0x12c>)
 80046e6:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046e8:	d94d      	bls.n	8004786 <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046ea:	0799      	lsls	r1, r3, #30
 80046ec:	d5d8      	bpl.n	80046a0 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046ee:	4e2d      	ldr	r6, [pc, #180]	; (80047a4 <HAL_RCC_ClockConfig+0x12c>)
 80046f0:	68b3      	ldr	r3, [r6, #8]
 80046f2:	f023 0303 	bic.w	r3, r3, #3
 80046f6:	4313      	orrs	r3, r2
 80046f8:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80046fa:	f7ff f917 	bl	800392c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046fe:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8004702:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004704:	e004      	b.n	8004710 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004706:	f7ff f911 	bl	800392c <HAL_GetTick>
 800470a:	1bc0      	subs	r0, r0, r7
 800470c:	4540      	cmp	r0, r8
 800470e:	d844      	bhi.n	800479a <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004710:	68b3      	ldr	r3, [r6, #8]
 8004712:	6862      	ldr	r2, [r4, #4]
 8004714:	f003 030c 	and.w	r3, r3, #12
 8004718:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800471c:	d1f3      	bne.n	8004706 <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800471e:	4a20      	ldr	r2, [pc, #128]	; (80047a0 <HAL_RCC_ClockConfig+0x128>)
 8004720:	6813      	ldr	r3, [r2, #0]
 8004722:	f003 0307 	and.w	r3, r3, #7
 8004726:	42ab      	cmp	r3, r5
 8004728:	d906      	bls.n	8004738 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800472a:	b2eb      	uxtb	r3, r5
 800472c:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800472e:	6813      	ldr	r3, [r2, #0]
 8004730:	f003 0307 	and.w	r3, r3, #7
 8004734:	42ab      	cmp	r3, r5
 8004736:	d1b3      	bne.n	80046a0 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004738:	6823      	ldr	r3, [r4, #0]
 800473a:	075a      	lsls	r2, r3, #29
 800473c:	d506      	bpl.n	800474c <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800473e:	4919      	ldr	r1, [pc, #100]	; (80047a4 <HAL_RCC_ClockConfig+0x12c>)
 8004740:	68e0      	ldr	r0, [r4, #12]
 8004742:	688a      	ldr	r2, [r1, #8]
 8004744:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8004748:	4302      	orrs	r2, r0
 800474a:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800474c:	071b      	lsls	r3, r3, #28
 800474e:	d507      	bpl.n	8004760 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004750:	4a14      	ldr	r2, [pc, #80]	; (80047a4 <HAL_RCC_ClockConfig+0x12c>)
 8004752:	6921      	ldr	r1, [r4, #16]
 8004754:	6893      	ldr	r3, [r2, #8]
 8004756:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800475a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800475e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004760:	f7ff ff64 	bl	800462c <HAL_RCC_GetSysClockFreq>
 8004764:	4a0f      	ldr	r2, [pc, #60]	; (80047a4 <HAL_RCC_ClockConfig+0x12c>)
 8004766:	4c10      	ldr	r4, [pc, #64]	; (80047a8 <HAL_RCC_ClockConfig+0x130>)
 8004768:	6892      	ldr	r2, [r2, #8]
 800476a:	4910      	ldr	r1, [pc, #64]	; (80047ac <HAL_RCC_ClockConfig+0x134>)
 800476c:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8004770:	4603      	mov	r3, r0
 8004772:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 8004774:	480e      	ldr	r0, [pc, #56]	; (80047b0 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004776:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 8004778:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800477a:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 800477c:	f7fe fb76 	bl	8002e6c <HAL_InitTick>
  return HAL_OK;
 8004780:	2000      	movs	r0, #0
}
 8004782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004786:	0198      	lsls	r0, r3, #6
 8004788:	d4b1      	bmi.n	80046ee <HAL_RCC_ClockConfig+0x76>
 800478a:	e789      	b.n	80046a0 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 800478c:	2001      	movs	r0, #1
}
 800478e:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004790:	4b04      	ldr	r3, [pc, #16]	; (80047a4 <HAL_RCC_ClockConfig+0x12c>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	039e      	lsls	r6, r3, #14
 8004796:	d4aa      	bmi.n	80046ee <HAL_RCC_ClockConfig+0x76>
 8004798:	e782      	b.n	80046a0 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 800479a:	2003      	movs	r0, #3
 800479c:	e781      	b.n	80046a2 <HAL_RCC_ClockConfig+0x2a>
 800479e:	bf00      	nop
 80047a0:	40023c00 	.word	0x40023c00
 80047a4:	40023800 	.word	0x40023800
 80047a8:	08009324 	.word	0x08009324
 80047ac:	20000578 	.word	0x20000578
 80047b0:	20000580 	.word	0x20000580

080047b4 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 80047b4:	4b01      	ldr	r3, [pc, #4]	; (80047bc <HAL_RCC_GetHCLKFreq+0x8>)
}
 80047b6:	6818      	ldr	r0, [r3, #0]
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	20000578 	.word	0x20000578

080047c0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80047c0:	4b04      	ldr	r3, [pc, #16]	; (80047d4 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 80047c2:	4905      	ldr	r1, [pc, #20]	; (80047d8 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	4a05      	ldr	r2, [pc, #20]	; (80047dc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80047c8:	6808      	ldr	r0, [r1, #0]
 80047ca:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80047ce:	5cd3      	ldrb	r3, [r2, r3]
}
 80047d0:	40d8      	lsrs	r0, r3
 80047d2:	4770      	bx	lr
 80047d4:	40023800 	.word	0x40023800
 80047d8:	20000578 	.word	0x20000578
 80047dc:	08009334 	.word	0x08009334

080047e0 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80047e0:	4b04      	ldr	r3, [pc, #16]	; (80047f4 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 80047e2:	4905      	ldr	r1, [pc, #20]	; (80047f8 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	4a05      	ldr	r2, [pc, #20]	; (80047fc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80047e8:	6808      	ldr	r0, [r1, #0]
 80047ea:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80047ee:	5cd3      	ldrb	r3, [r2, r3]
}
 80047f0:	40d8      	lsrs	r0, r3
 80047f2:	4770      	bx	lr
 80047f4:	40023800 	.word	0x40023800
 80047f8:	20000578 	.word	0x20000578
 80047fc:	08009334 	.word	0x08009334

08004800 <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004800:	4b0e      	ldr	r3, [pc, #56]	; (800483c <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004802:	220f      	movs	r2, #15
 8004804:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004806:	689a      	ldr	r2, [r3, #8]
 8004808:	f002 0203 	and.w	r2, r2, #3
 800480c:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800480e:	689a      	ldr	r2, [r3, #8]
 8004810:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8004814:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004816:	689a      	ldr	r2, [r3, #8]
 8004818:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 800481c:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	08db      	lsrs	r3, r3, #3
{
 8004822:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004824:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004828:	4c05      	ldr	r4, [pc, #20]	; (8004840 <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800482a:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800482c:	6823      	ldr	r3, [r4, #0]
}
 800482e:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004832:	f003 0307 	and.w	r3, r3, #7
 8004836:	600b      	str	r3, [r1, #0]
}
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	40023800 	.word	0x40023800
 8004840:	40023c00 	.word	0x40023c00

08004844 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004844:	2800      	cmp	r0, #0
 8004846:	d076      	beq.n	8004936 <HAL_TIM_Base_Init+0xf2>
{
 8004848:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800484a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800484e:	4604      	mov	r4, r0
 8004850:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004854:	2b00      	cmp	r3, #0
 8004856:	d055      	beq.n	8004904 <HAL_TIM_Base_Init+0xc0>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004858:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800485a:	4938      	ldr	r1, [pc, #224]	; (800493c <HAL_TIM_Base_Init+0xf8>)
  htim->State = HAL_TIM_STATE_BUSY;
 800485c:	2302      	movs	r3, #2
 800485e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004862:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8004864:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004866:	d052      	beq.n	800490e <HAL_TIM_Base_Init+0xca>
 8004868:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800486c:	d021      	beq.n	80048b2 <HAL_TIM_Base_Init+0x6e>
 800486e:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 8004872:	428a      	cmp	r2, r1
 8004874:	d01d      	beq.n	80048b2 <HAL_TIM_Base_Init+0x6e>
 8004876:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800487a:	428a      	cmp	r2, r1
 800487c:	d019      	beq.n	80048b2 <HAL_TIM_Base_Init+0x6e>
 800487e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004882:	428a      	cmp	r2, r1
 8004884:	d015      	beq.n	80048b2 <HAL_TIM_Base_Init+0x6e>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004886:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 800488a:	428a      	cmp	r2, r1
 800488c:	d015      	beq.n	80048ba <HAL_TIM_Base_Init+0x76>
 800488e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004892:	428a      	cmp	r2, r1
 8004894:	d011      	beq.n	80048ba <HAL_TIM_Base_Init+0x76>
 8004896:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800489a:	428a      	cmp	r2, r1
 800489c:	d00d      	beq.n	80048ba <HAL_TIM_Base_Init+0x76>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800489e:	69a0      	ldr	r0, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048a0:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048a6:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 80048a8:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048aa:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048ac:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80048ae:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048b0:	e010      	b.n	80048d4 <HAL_TIM_Base_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 80048b2:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80048b8:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048ba:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048bc:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 80048be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048c2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048c8:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048ca:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 80048cc:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80048ce:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048d0:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80048d2:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048d4:	2301      	movs	r3, #1
 80048d6:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048d8:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048dc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80048e0:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80048e4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80048e8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80048f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048f4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80048f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80048fc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004900:	2000      	movs	r0, #0
}
 8004902:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004904:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004908:	f7fe f9b0 	bl	8002c6c <HAL_TIM_Base_MspInit>
 800490c:	e7a4      	b.n	8004858 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 800490e:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004910:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004916:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8004918:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800491c:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800491e:	69a1      	ldr	r1, [r4, #24]
 8004920:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004924:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8004926:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004928:	68e3      	ldr	r3, [r4, #12]
 800492a:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800492c:	6863      	ldr	r3, [r4, #4]
 800492e:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8004930:	6963      	ldr	r3, [r4, #20]
 8004932:	6313      	str	r3, [r2, #48]	; 0x30
 8004934:	e7ce      	b.n	80048d4 <HAL_TIM_Base_Init+0x90>
    return HAL_ERROR;
 8004936:	2001      	movs	r0, #1
}
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop
 800493c:	40010000 	.word	0x40010000

08004940 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004940:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004944:	2b01      	cmp	r3, #1
 8004946:	d127      	bne.n	8004998 <HAL_TIM_Base_Start_IT+0x58>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004948:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800494a:	4915      	ldr	r1, [pc, #84]	; (80049a0 <HAL_TIM_Base_Start_IT+0x60>)
  htim->State = HAL_TIM_STATE_BUSY;
 800494c:	2202      	movs	r2, #2
 800494e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004952:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004954:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004956:	f042 0201 	orr.w	r2, r2, #1
 800495a:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800495c:	d011      	beq.n	8004982 <HAL_TIM_Base_Start_IT+0x42>
 800495e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004962:	d00e      	beq.n	8004982 <HAL_TIM_Base_Start_IT+0x42>
 8004964:	4a0f      	ldr	r2, [pc, #60]	; (80049a4 <HAL_TIM_Base_Start_IT+0x64>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d00b      	beq.n	8004982 <HAL_TIM_Base_Start_IT+0x42>
 800496a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800496e:	4293      	cmp	r3, r2
 8004970:	d007      	beq.n	8004982 <HAL_TIM_Base_Start_IT+0x42>
 8004972:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004976:	4293      	cmp	r3, r2
 8004978:	d003      	beq.n	8004982 <HAL_TIM_Base_Start_IT+0x42>
 800497a:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800497e:	4293      	cmp	r3, r2
 8004980:	d104      	bne.n	800498c <HAL_TIM_Base_Start_IT+0x4c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004982:	689a      	ldr	r2, [r3, #8]
 8004984:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004988:	2a06      	cmp	r2, #6
 800498a:	d007      	beq.n	800499c <HAL_TIM_Base_Start_IT+0x5c>
    __HAL_TIM_ENABLE(htim);
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 8004992:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8004994:	601a      	str	r2, [r3, #0]
 8004996:	4770      	bx	lr
    return HAL_ERROR;
 8004998:	2001      	movs	r0, #1
 800499a:	4770      	bx	lr
  return HAL_OK;
 800499c:	2000      	movs	r0, #0
}
 800499e:	4770      	bx	lr
 80049a0:	40010000 	.word	0x40010000
 80049a4:	40000400 	.word	0x40000400

080049a8 <HAL_TIM_PWM_MspInit>:
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop

080049ac <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80049ac:	2800      	cmp	r0, #0
 80049ae:	d076      	beq.n	8004a9e <HAL_TIM_PWM_Init+0xf2>
{
 80049b0:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80049b2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80049b6:	4604      	mov	r4, r0
 80049b8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d055      	beq.n	8004a6c <HAL_TIM_PWM_Init+0xc0>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049c0:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049c2:	4938      	ldr	r1, [pc, #224]	; (8004aa4 <HAL_TIM_PWM_Init+0xf8>)
  htim->State = HAL_TIM_STATE_BUSY;
 80049c4:	2302      	movs	r3, #2
 80049c6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049ca:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80049cc:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049ce:	d052      	beq.n	8004a76 <HAL_TIM_PWM_Init+0xca>
 80049d0:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80049d4:	d021      	beq.n	8004a1a <HAL_TIM_PWM_Init+0x6e>
 80049d6:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 80049da:	428a      	cmp	r2, r1
 80049dc:	d01d      	beq.n	8004a1a <HAL_TIM_PWM_Init+0x6e>
 80049de:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80049e2:	428a      	cmp	r2, r1
 80049e4:	d019      	beq.n	8004a1a <HAL_TIM_PWM_Init+0x6e>
 80049e6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80049ea:	428a      	cmp	r2, r1
 80049ec:	d015      	beq.n	8004a1a <HAL_TIM_PWM_Init+0x6e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049ee:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 80049f2:	428a      	cmp	r2, r1
 80049f4:	d015      	beq.n	8004a22 <HAL_TIM_PWM_Init+0x76>
 80049f6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80049fa:	428a      	cmp	r2, r1
 80049fc:	d011      	beq.n	8004a22 <HAL_TIM_PWM_Init+0x76>
 80049fe:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004a02:	428a      	cmp	r2, r1
 8004a04:	d00d      	beq.n	8004a22 <HAL_TIM_PWM_Init+0x76>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a06:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a08:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a0e:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8004a10:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 8004a12:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a14:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004a16:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a18:	e010      	b.n	8004a3c <HAL_TIM_PWM_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 8004a1a:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004a20:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a22:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a24:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a2a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a30:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a32:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8004a34:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8004a36:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a38:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004a3a:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a40:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a44:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004a48:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004a4c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004a50:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a5c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004a60:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8004a64:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004a68:	2000      	movs	r0, #0
}
 8004a6a:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004a6c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8004a70:	f7ff ff9a 	bl	80049a8 <HAL_TIM_PWM_MspInit>
 8004a74:	e7a4      	b.n	80049c0 <HAL_TIM_PWM_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8004a76:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a78:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004a7e:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a84:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a86:	69a1      	ldr	r1, [r4, #24]
 8004a88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a8c:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8004a8e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a90:	68e3      	ldr	r3, [r4, #12]
 8004a92:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004a94:	6863      	ldr	r3, [r4, #4]
 8004a96:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8004a98:	6963      	ldr	r3, [r4, #20]
 8004a9a:	6313      	str	r3, [r2, #48]	; 0x30
 8004a9c:	e7ce      	b.n	8004a3c <HAL_TIM_PWM_Init+0x90>
    return HAL_ERROR;
 8004a9e:	2001      	movs	r0, #1
}
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	40010000 	.word	0x40010000

08004aa8 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8004aa8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	f000 80ca 	beq.w	8004c46 <HAL_TIM_PWM_ConfigChannel+0x19e>
 8004ab2:	2301      	movs	r3, #1
{
 8004ab4:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 8004ab6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8004aba:	2a0c      	cmp	r2, #12
 8004abc:	d808      	bhi.n	8004ad0 <HAL_TIM_PWM_ConfigChannel+0x28>
 8004abe:	e8df f002 	tbb	[pc, r2]
 8004ac2:	073d      	.short	0x073d
 8004ac4:	07680707 	.word	0x07680707
 8004ac8:	07960707 	.word	0x07960707
 8004acc:	0707      	.short	0x0707
 8004ace:	0e          	.byte	0x0e
 8004acf:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8004ad6:	2201      	movs	r2, #1
}
 8004ad8:	4610      	mov	r0, r2
 8004ada:	bcf0      	pop	{r4, r5, r6, r7}
 8004adc:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ade:	6803      	ldr	r3, [r0, #0]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ae0:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ae2:	6a1a      	ldr	r2, [r3, #32]
 8004ae4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004ae8:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8004aea:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004aec:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8004aee:	69dc      	ldr	r4, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004af0:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004af4:	ea44 2406 	orr.w	r4, r4, r6, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004af8:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8004afa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004afe:	ea42 3206 	orr.w	r2, r2, r6, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b02:	4e6b      	ldr	r6, [pc, #428]	; (8004cb0 <HAL_TIM_PWM_ConfigChannel+0x208>)
 8004b04:	42b3      	cmp	r3, r6
 8004b06:	f000 80bd 	beq.w	8004c84 <HAL_TIM_PWM_ConfigChannel+0x1dc>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b0a:	605d      	str	r5, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b0c:	61dc      	str	r4, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b0e:	684c      	ldr	r4, [r1, #4]
 8004b10:	641c      	str	r4, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b12:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b14:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b16:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b1e:	69dc      	ldr	r4, [r3, #28]
 8004b20:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8004b24:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b26:	69d9      	ldr	r1, [r3, #28]
 8004b28:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 8004b2c:	61d9      	str	r1, [r3, #28]
  __HAL_UNLOCK(htim);
 8004b2e:	2300      	movs	r3, #0
 8004b30:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8004b34:	2200      	movs	r2, #0
}
 8004b36:	4610      	mov	r0, r2
 8004b38:	bcf0      	pop	{r4, r5, r6, r7}
 8004b3a:	4770      	bx	lr
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b3c:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8004b3e:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b40:	6a1a      	ldr	r2, [r3, #32]
 8004b42:	f022 0201 	bic.w	r2, r2, #1
 8004b46:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8004b48:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004b4a:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8004b4c:	699c      	ldr	r4, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b4e:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8004b52:	4334      	orrs	r4, r6
  tmpccer |= OC_Config->OCPolarity;
 8004b54:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8004b56:	f022 0202 	bic.w	r2, r2, #2
  tmpccer |= OC_Config->OCPolarity;
 8004b5a:	4332      	orrs	r2, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b5c:	4e54      	ldr	r6, [pc, #336]	; (8004cb0 <HAL_TIM_PWM_ConfigChannel+0x208>)
 8004b5e:	42b3      	cmp	r3, r6
 8004b60:	d074      	beq.n	8004c4c <HAL_TIM_PWM_ConfigChannel+0x1a4>
  TIMx->CR2 = tmpcr2;
 8004b62:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004b64:	619c      	str	r4, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8004b66:	684c      	ldr	r4, [r1, #4]
 8004b68:	635c      	str	r4, [r3, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8004b6a:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b6c:	699a      	ldr	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b6e:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b70:	f042 0208 	orr.w	r2, r2, #8
 8004b74:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b76:	699c      	ldr	r4, [r3, #24]
 8004b78:	f024 0404 	bic.w	r4, r4, #4
 8004b7c:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b7e:	6999      	ldr	r1, [r3, #24]
 8004b80:	4329      	orrs	r1, r5
 8004b82:	6199      	str	r1, [r3, #24]
  __HAL_UNLOCK(htim);
 8004b84:	2300      	movs	r3, #0
 8004b86:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8004b8a:	2200      	movs	r2, #0
}
 8004b8c:	4610      	mov	r0, r2
 8004b8e:	bcf0      	pop	{r4, r5, r6, r7}
 8004b90:	4770      	bx	lr
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b92:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b94:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b96:	6a1a      	ldr	r2, [r3, #32]
 8004b98:	f022 0210 	bic.w	r2, r2, #16
 8004b9c:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8004b9e:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004ba0:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8004ba2:	699c      	ldr	r4, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ba4:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ba8:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004bac:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8004bae:	f022 0220 	bic.w	r2, r2, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004bb2:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004bb6:	4e3e      	ldr	r6, [pc, #248]	; (8004cb0 <HAL_TIM_PWM_ConfigChannel+0x208>)
 8004bb8:	42b3      	cmp	r3, r6
 8004bba:	d054      	beq.n	8004c66 <HAL_TIM_PWM_ConfigChannel+0x1be>
  TIMx->CR2 = tmpcr2;
 8004bbc:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004bbe:	619c      	str	r4, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8004bc0:	684c      	ldr	r4, [r1, #4]
 8004bc2:	639c      	str	r4, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8004bc4:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004bc6:	699a      	ldr	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004bc8:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004bca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004bd0:	699c      	ldr	r4, [r3, #24]
 8004bd2:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8004bd6:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004bd8:	6999      	ldr	r1, [r3, #24]
 8004bda:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 8004bde:	6199      	str	r1, [r3, #24]
  __HAL_UNLOCK(htim);
 8004be0:	2300      	movs	r3, #0
 8004be2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8004be6:	2200      	movs	r2, #0
}
 8004be8:	4610      	mov	r0, r2
 8004bea:	bcf0      	pop	{r4, r5, r6, r7}
 8004bec:	4770      	bx	lr
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004bee:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8004bf0:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004bf2:	6a1a      	ldr	r2, [r3, #32]
 8004bf4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004bf8:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8004bfa:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004bfc:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8004bfe:	69dc      	ldr	r4, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c00:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8004c04:	4334      	orrs	r4, r6
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c06:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8004c08:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c0c:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c10:	4e27      	ldr	r6, [pc, #156]	; (8004cb0 <HAL_TIM_PWM_ConfigChannel+0x208>)
 8004c12:	42b3      	cmp	r3, r6
 8004c14:	d03c      	beq.n	8004c90 <HAL_TIM_PWM_ConfigChannel+0x1e8>
  TIMx->CR2 = tmpcr2;
 8004c16:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004c18:	61dc      	str	r4, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8004c1a:	684c      	ldr	r4, [r1, #4]
 8004c1c:	63dc      	str	r4, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8004c1e:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c20:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c22:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c24:	f042 0208 	orr.w	r2, r2, #8
 8004c28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c2a:	69dc      	ldr	r4, [r3, #28]
 8004c2c:	f024 0404 	bic.w	r4, r4, #4
 8004c30:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c32:	69d9      	ldr	r1, [r3, #28]
 8004c34:	4329      	orrs	r1, r5
 8004c36:	61d9      	str	r1, [r3, #28]
  __HAL_UNLOCK(htim);
 8004c38:	2300      	movs	r3, #0
 8004c3a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8004c3e:	2200      	movs	r2, #0
}
 8004c40:	4610      	mov	r0, r2
 8004c42:	bcf0      	pop	{r4, r5, r6, r7}
 8004c44:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004c46:	2202      	movs	r2, #2
}
 8004c48:	4610      	mov	r0, r2
 8004c4a:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 8004c4c:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c4e:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 8004c52:	4332      	orrs	r2, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c54:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c58:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c5c:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c5e:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c62:	4335      	orrs	r5, r6
 8004c64:	e77d      	b.n	8004b62 <HAL_TIM_PWM_ConfigChannel+0xba>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c66:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c6c:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c70:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c74:	f425 6540 	bic.w	r5, r5, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c78:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c7e:	ea45 0586 	orr.w	r5, r5, r6, lsl #2
 8004c82:	e79b      	b.n	8004bbc <HAL_TIM_PWM_ConfigChannel+0x114>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c84:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c86:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c8a:	ea45 1586 	orr.w	r5, r5, r6, lsl #6
 8004c8e:	e73c      	b.n	8004b0a <HAL_TIM_PWM_ConfigChannel+0x62>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c90:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c96:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c9a:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c9e:	f425 5540 	bic.w	r5, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ca2:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ca4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ca8:	ea45 1506 	orr.w	r5, r5, r6, lsl #4
 8004cac:	e7b3      	b.n	8004c16 <HAL_TIM_PWM_ConfigChannel+0x16e>
 8004cae:	bf00      	nop
 8004cb0:	40010000 	.word	0x40010000

08004cb4 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8004cb4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d075      	beq.n	8004da8 <HAL_TIM_ConfigClockSource+0xf4>
 8004cbc:	4602      	mov	r2, r0
{
 8004cbe:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8004cc0:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 8004cc2:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004cc4:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 8004cc8:	2001      	movs	r0, #1
 8004cca:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8004cce:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cd0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cd4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8004cd8:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8004cda:	680b      	ldr	r3, [r1, #0]
 8004cdc:	2b60      	cmp	r3, #96	; 0x60
 8004cde:	d065      	beq.n	8004dac <HAL_TIM_ConfigClockSource+0xf8>
 8004ce0:	d824      	bhi.n	8004d2c <HAL_TIM_ConfigClockSource+0x78>
 8004ce2:	2b40      	cmp	r3, #64	; 0x40
 8004ce4:	d07c      	beq.n	8004de0 <HAL_TIM_ConfigClockSource+0x12c>
 8004ce6:	d94b      	bls.n	8004d80 <HAL_TIM_ConfigClockSource+0xcc>
 8004ce8:	2b50      	cmp	r3, #80	; 0x50
 8004cea:	d117      	bne.n	8004d1c <HAL_TIM_ConfigClockSource+0x68>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cec:	6848      	ldr	r0, [r1, #4]
 8004cee:	68cd      	ldr	r5, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004cf0:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cf2:	6a23      	ldr	r3, [r4, #32]
 8004cf4:	f023 0301 	bic.w	r3, r3, #1
 8004cf8:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cfa:	69a3      	ldr	r3, [r4, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cfc:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8004d04:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d06:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d0a:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8004d0c:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d0e:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d14:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  HAL_StatusTypeDef status = HAL_OK;
 8004d18:	2000      	movs	r0, #0
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d1a:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 8004d1c:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8004d1e:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8004d20:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004d24:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8004d28:	bc30      	pop	{r4, r5}
 8004d2a:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8004d2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d30:	d038      	beq.n	8004da4 <HAL_TIM_ConfigClockSource+0xf0>
 8004d32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d36:	d110      	bne.n	8004d5a <HAL_TIM_ConfigClockSource+0xa6>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d38:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8004d3c:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d3e:	432b      	orrs	r3, r5
 8004d40:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d42:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d46:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8004d4a:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d4c:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d4e:	68a3      	ldr	r3, [r4, #8]
 8004d50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  HAL_StatusTypeDef status = HAL_OK;
 8004d54:	2000      	movs	r0, #0
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d56:	60a3      	str	r3, [r4, #8]
      break;
 8004d58:	e7e0      	b.n	8004d1c <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8004d5a:	2b70      	cmp	r3, #112	; 0x70
 8004d5c:	d1de      	bne.n	8004d1c <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d5e:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8004d62:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d64:	432b      	orrs	r3, r5
 8004d66:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d68:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d6c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8004d70:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8004d72:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8004d74:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d76:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  HAL_StatusTypeDef status = HAL_OK;
 8004d7a:	2000      	movs	r0, #0
      htim->Instance->SMCR = tmpsmcr;
 8004d7c:	60a3      	str	r3, [r4, #8]
      break;
 8004d7e:	e7cd      	b.n	8004d1c <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8004d80:	2b20      	cmp	r3, #32
 8004d82:	d002      	beq.n	8004d8a <HAL_TIM_ConfigClockSource+0xd6>
 8004d84:	d90a      	bls.n	8004d9c <HAL_TIM_ConfigClockSource+0xe8>
 8004d86:	2b30      	cmp	r3, #48	; 0x30
 8004d88:	d1c8      	bne.n	8004d1c <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 8004d8a:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d8c:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d90:	430b      	orrs	r3, r1
 8004d92:	f043 0307 	orr.w	r3, r3, #7
  HAL_StatusTypeDef status = HAL_OK;
 8004d96:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8004d98:	60a3      	str	r3, [r4, #8]
}
 8004d9a:	e7bf      	b.n	8004d1c <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8004d9c:	f033 0110 	bics.w	r1, r3, #16
 8004da0:	d1bc      	bne.n	8004d1c <HAL_TIM_ConfigClockSource+0x68>
 8004da2:	e7f2      	b.n	8004d8a <HAL_TIM_ConfigClockSource+0xd6>
  HAL_StatusTypeDef status = HAL_OK;
 8004da4:	2000      	movs	r0, #0
 8004da6:	e7b9      	b.n	8004d1c <HAL_TIM_ConfigClockSource+0x68>
  __HAL_LOCK(htim);
 8004da8:	2002      	movs	r0, #2
}
 8004daa:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dac:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004dae:	68cb      	ldr	r3, [r1, #12]
 8004db0:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004db2:	f020 0010 	bic.w	r0, r0, #16
 8004db6:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004db8:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004dba:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004dbe:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
  tmpccer = TIMx->CCER;
 8004dc2:	6a23      	ldr	r3, [r4, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8004dc4:	61a1      	str	r1, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004dc6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8004dca:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCER = tmpccer;
 8004dce:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8004dd0:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004dd6:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  HAL_StatusTypeDef status = HAL_OK;
 8004dda:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8004ddc:	60a3      	str	r3, [r4, #8]
}
 8004dde:	e79d      	b.n	8004d1c <HAL_TIM_ConfigClockSource+0x68>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004de0:	6848      	ldr	r0, [r1, #4]
 8004de2:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8004de4:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004de6:	6a23      	ldr	r3, [r4, #32]
 8004de8:	f023 0301 	bic.w	r3, r3, #1
 8004dec:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dee:	69a3      	ldr	r3, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004df0:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004df4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8004df8:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004dfa:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8004dfe:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8004e00:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8004e02:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e08:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  HAL_StatusTypeDef status = HAL_OK;
 8004e0c:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8004e0e:	60a3      	str	r3, [r4, #8]
}
 8004e10:	e784      	b.n	8004d1c <HAL_TIM_ConfigClockSource+0x68>
 8004e12:	bf00      	nop

08004e14 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 8004e14:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8004e18:	2a01      	cmp	r2, #1
 8004e1a:	d050      	beq.n	8004ebe <HAL_TIM_SlaveConfigSynchro+0xaa>
 8004e1c:	4603      	mov	r3, r0
{
 8004e1e:	b470      	push	{r4, r5, r6}
  htim->State = HAL_TIM_STATE_BUSY;
 8004e20:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 8004e22:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  __HAL_LOCK(htim);
 8004e28:	2001      	movs	r0, #1
 8004e2a:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8004e2e:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004e30:	6848      	ldr	r0, [r1, #4]
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004e32:	680d      	ldr	r5, [r1, #0]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e34:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004e38:	4302      	orrs	r2, r0
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004e3a:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004e3e:	432a      	orrs	r2, r5
  switch (sSlaveConfig->InputTrigger)
 8004e40:	2850      	cmp	r0, #80	; 0x50
  htim->Instance->SMCR = tmpsmcr;
 8004e42:	60a2      	str	r2, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 8004e44:	d060      	beq.n	8004f08 <HAL_TIM_SlaveConfigSynchro+0xf4>
 8004e46:	d90f      	bls.n	8004e68 <HAL_TIM_SlaveConfigSynchro+0x54>
 8004e48:	2860      	cmp	r0, #96	; 0x60
 8004e4a:	d03a      	beq.n	8004ec2 <HAL_TIM_SlaveConfigSynchro+0xae>
 8004e4c:	2870      	cmp	r0, #112	; 0x70
 8004e4e:	d10e      	bne.n	8004e6e <HAL_TIM_SlaveConfigSynchro+0x5a>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e50:	e9d1 5202 	ldrd	r5, r2, [r1, #8]
  tmpsmcr = TIMx->SMCR;
 8004e54:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e56:	432a      	orrs	r2, r5
 8004e58:	690d      	ldr	r5, [r1, #16]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e5a:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e5e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8004e62:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8004e64:	60a2      	str	r2, [r4, #8]
 8004e66:	e00f      	b.n	8004e88 <HAL_TIM_SlaveConfigSynchro+0x74>
  switch (sSlaveConfig->InputTrigger)
 8004e68:	2840      	cmp	r0, #64	; 0x40
 8004e6a:	d03d      	beq.n	8004ee8 <HAL_TIM_SlaveConfigSynchro+0xd4>
 8004e6c:	d907      	bls.n	8004e7e <HAL_TIM_SlaveConfigSynchro+0x6a>
    htim->State = HAL_TIM_STATE_READY;
 8004e6e:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 8004e70:	2200      	movs	r2, #0
    htim->State = HAL_TIM_STATE_READY;
 8004e72:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004e7a:	bc70      	pop	{r4, r5, r6}
 8004e7c:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 8004e7e:	2820      	cmp	r0, #32
 8004e80:	d002      	beq.n	8004e88 <HAL_TIM_SlaveConfigSynchro+0x74>
 8004e82:	d912      	bls.n	8004eaa <HAL_TIM_SlaveConfigSynchro+0x96>
 8004e84:	2830      	cmp	r0, #48	; 0x30
 8004e86:	d1f2      	bne.n	8004e6e <HAL_TIM_SlaveConfigSynchro+0x5a>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004e88:	68e2      	ldr	r2, [r4, #12]
 8004e8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e8e:	60e2      	str	r2, [r4, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004e90:	68e2      	ldr	r2, [r4, #12]
  __HAL_UNLOCK(htim);
 8004e92:	2100      	movs	r1, #0
  htim->State = HAL_TIM_STATE_READY;
 8004e94:	2501      	movs	r5, #1
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004e96:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004e9a:	60e2      	str	r2, [r4, #12]
  htim->State = HAL_TIM_STATE_READY;
 8004e9c:	f883 503d 	strb.w	r5, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004ea0:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
  return HAL_OK;
 8004ea4:	4608      	mov	r0, r1
}
 8004ea6:	bc70      	pop	{r4, r5, r6}
 8004ea8:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 8004eaa:	f030 0210 	bics.w	r2, r0, #16
 8004eae:	d0eb      	beq.n	8004e88 <HAL_TIM_SlaveConfigSynchro+0x74>
    htim->State = HAL_TIM_STATE_READY;
 8004eb0:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 8004eb2:	2200      	movs	r2, #0
    htim->State = HAL_TIM_STATE_READY;
 8004eb4:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8004ebc:	e7dd      	b.n	8004e7a <HAL_TIM_SlaveConfigSynchro+0x66>
  __HAL_LOCK(htim);
 8004ebe:	2002      	movs	r0, #2
}
 8004ec0:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ec2:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ec4:	690a      	ldr	r2, [r1, #16]
 8004ec6:	688d      	ldr	r5, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ec8:	f020 0010 	bic.w	r0, r0, #16
 8004ecc:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ece:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ed0:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ed4:	ea41 3102 	orr.w	r1, r1, r2, lsl #12
  tmpccer = TIMx->CCER;
 8004ed8:	6a22      	ldr	r2, [r4, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8004eda:	61a1      	str	r1, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004edc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ee0:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCER = tmpccer;
 8004ee4:	6222      	str	r2, [r4, #32]
 8004ee6:	e7cf      	b.n	8004e88 <HAL_TIM_SlaveConfigSynchro+0x74>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004ee8:	2d05      	cmp	r5, #5
 8004eea:	d0c0      	beq.n	8004e6e <HAL_TIM_SlaveConfigSynchro+0x5a>
      tmpccer = htim->Instance->CCER;
 8004eec:	6a25      	ldr	r5, [r4, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004eee:	6a20      	ldr	r0, [r4, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004ef0:	690e      	ldr	r6, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004ef2:	f020 0001 	bic.w	r0, r0, #1
 8004ef6:	6220      	str	r0, [r4, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004ef8:	69a2      	ldr	r2, [r4, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004efa:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004efe:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8004f02:	61a2      	str	r2, [r4, #24]
      htim->Instance->CCER = tmpccer;
 8004f04:	6225      	str	r5, [r4, #32]
      break;
 8004f06:	e7bf      	b.n	8004e88 <HAL_TIM_SlaveConfigSynchro+0x74>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f08:	6888      	ldr	r0, [r1, #8]
 8004f0a:	690d      	ldr	r5, [r1, #16]
  tmpccer = TIMx->CCER;
 8004f0c:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f0e:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8004f12:	4301      	orrs	r1, r0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f14:	6a20      	ldr	r0, [r4, #32]
 8004f16:	f020 0001 	bic.w	r0, r0, #1
 8004f1a:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f1c:	69a2      	ldr	r2, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f1e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f22:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8004f26:	61a2      	str	r2, [r4, #24]
  TIMx->CCER = tmpccer;
 8004f28:	6221      	str	r1, [r4, #32]
 8004f2a:	e7ad      	b.n	8004e88 <HAL_TIM_SlaveConfigSynchro+0x74>

08004f2c <HAL_TIM_OC_DelayElapsedCallback>:
 8004f2c:	4770      	bx	lr
 8004f2e:	bf00      	nop

08004f30 <HAL_TIM_IC_CaptureCallback>:
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop

08004f34 <HAL_TIM_PWM_PulseFinishedCallback>:
 8004f34:	4770      	bx	lr
 8004f36:	bf00      	nop

08004f38 <HAL_TIM_TriggerCallback>:
 8004f38:	4770      	bx	lr
 8004f3a:	bf00      	nop

08004f3c <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f3c:	6803      	ldr	r3, [r0, #0]
 8004f3e:	691a      	ldr	r2, [r3, #16]
 8004f40:	0791      	lsls	r1, r2, #30
{
 8004f42:	b510      	push	{r4, lr}
 8004f44:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f46:	d502      	bpl.n	8004f4e <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f48:	68da      	ldr	r2, [r3, #12]
 8004f4a:	0792      	lsls	r2, r2, #30
 8004f4c:	d45f      	bmi.n	800500e <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f4e:	691a      	ldr	r2, [r3, #16]
 8004f50:	0750      	lsls	r0, r2, #29
 8004f52:	d502      	bpl.n	8004f5a <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f54:	68da      	ldr	r2, [r3, #12]
 8004f56:	0751      	lsls	r1, r2, #29
 8004f58:	d446      	bmi.n	8004fe8 <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f5a:	691a      	ldr	r2, [r3, #16]
 8004f5c:	0712      	lsls	r2, r2, #28
 8004f5e:	d502      	bpl.n	8004f66 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f60:	68da      	ldr	r2, [r3, #12]
 8004f62:	0710      	lsls	r0, r2, #28
 8004f64:	d42e      	bmi.n	8004fc4 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f66:	691a      	ldr	r2, [r3, #16]
 8004f68:	06d2      	lsls	r2, r2, #27
 8004f6a:	d502      	bpl.n	8004f72 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f6c:	68da      	ldr	r2, [r3, #12]
 8004f6e:	06d0      	lsls	r0, r2, #27
 8004f70:	d418      	bmi.n	8004fa4 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f72:	691a      	ldr	r2, [r3, #16]
 8004f74:	07d1      	lsls	r1, r2, #31
 8004f76:	d502      	bpl.n	8004f7e <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f78:	68da      	ldr	r2, [r3, #12]
 8004f7a:	07d2      	lsls	r2, r2, #31
 8004f7c:	d45d      	bmi.n	800503a <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f7e:	691a      	ldr	r2, [r3, #16]
 8004f80:	0610      	lsls	r0, r2, #24
 8004f82:	d502      	bpl.n	8004f8a <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f84:	68da      	ldr	r2, [r3, #12]
 8004f86:	0611      	lsls	r1, r2, #24
 8004f88:	d45f      	bmi.n	800504a <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f8a:	691a      	ldr	r2, [r3, #16]
 8004f8c:	0652      	lsls	r2, r2, #25
 8004f8e:	d502      	bpl.n	8004f96 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f90:	68da      	ldr	r2, [r3, #12]
 8004f92:	0650      	lsls	r0, r2, #25
 8004f94:	d461      	bmi.n	800505a <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f96:	691a      	ldr	r2, [r3, #16]
 8004f98:	0691      	lsls	r1, r2, #26
 8004f9a:	d502      	bpl.n	8004fa2 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f9c:	68da      	ldr	r2, [r3, #12]
 8004f9e:	0692      	lsls	r2, r2, #26
 8004fa0:	d443      	bmi.n	800502a <HAL_TIM_IRQHandler+0xee>
}
 8004fa2:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004fa4:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fa8:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004faa:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fac:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fae:	69db      	ldr	r3, [r3, #28]
 8004fb0:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8004fb4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fb6:	d064      	beq.n	8005082 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8004fb8:	f7ff ffba 	bl	8004f30 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fbc:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004fbe:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fc0:	7722      	strb	r2, [r4, #28]
 8004fc2:	e7d6      	b.n	8004f72 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004fc4:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fc8:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004fca:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fcc:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fce:	69db      	ldr	r3, [r3, #28]
 8004fd0:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8004fd2:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fd4:	d152      	bne.n	800507c <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fd6:	f7ff ffa9 	bl	8004f2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fda:	4620      	mov	r0, r4
 8004fdc:	f7ff ffaa 	bl	8004f34 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fe0:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004fe2:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fe4:	7722      	strb	r2, [r4, #28]
 8004fe6:	e7be      	b.n	8004f66 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004fe8:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004fec:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004fee:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ff0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ff2:	699b      	ldr	r3, [r3, #24]
 8004ff4:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8004ff8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ffa:	d13c      	bne.n	8005076 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ffc:	f7ff ff96 	bl	8004f2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005000:	4620      	mov	r0, r4
 8005002:	f7ff ff97 	bl	8004f34 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005006:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005008:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800500a:	7722      	strb	r2, [r4, #28]
 800500c:	e7a5      	b.n	8004f5a <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800500e:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005012:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005014:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005016:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005018:	699b      	ldr	r3, [r3, #24]
 800501a:	079b      	lsls	r3, r3, #30
 800501c:	d025      	beq.n	800506a <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 800501e:	f7ff ff87 	bl	8004f30 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005022:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005024:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005026:	7722      	strb	r2, [r4, #28]
 8005028:	e791      	b.n	8004f4e <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800502a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800502e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005030:	611a      	str	r2, [r3, #16]
}
 8005032:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8005036:	f000 b9ad 	b.w	8005394 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800503a:	f06f 0201 	mvn.w	r2, #1
 800503e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005040:	4620      	mov	r0, r4
 8005042:	f7fc f84f 	bl	80010e4 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005046:	6823      	ldr	r3, [r4, #0]
 8005048:	e799      	b.n	8004f7e <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800504a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800504e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005050:	4620      	mov	r0, r4
 8005052:	f000 f9a1 	bl	8005398 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005056:	6823      	ldr	r3, [r4, #0]
 8005058:	e797      	b.n	8004f8a <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800505a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800505e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005060:	4620      	mov	r0, r4
 8005062:	f7ff ff69 	bl	8004f38 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005066:	6823      	ldr	r3, [r4, #0]
 8005068:	e795      	b.n	8004f96 <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800506a:	f7ff ff5f 	bl	8004f2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800506e:	4620      	mov	r0, r4
 8005070:	f7ff ff60 	bl	8004f34 <HAL_TIM_PWM_PulseFinishedCallback>
 8005074:	e7d5      	b.n	8005022 <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 8005076:	f7ff ff5b 	bl	8004f30 <HAL_TIM_IC_CaptureCallback>
 800507a:	e7c4      	b.n	8005006 <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 800507c:	f7ff ff58 	bl	8004f30 <HAL_TIM_IC_CaptureCallback>
 8005080:	e7ae      	b.n	8004fe0 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005082:	f7ff ff53 	bl	8004f2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005086:	4620      	mov	r0, r4
 8005088:	f7ff ff54 	bl	8004f34 <HAL_TIM_PWM_PulseFinishedCallback>
 800508c:	e796      	b.n	8004fbc <HAL_TIM_IRQHandler+0x80>
 800508e:	bf00      	nop

08005090 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005090:	4a2a      	ldr	r2, [pc, #168]	; (800513c <TIM_Base_SetConfig+0xac>)
  tmpcr1 = TIMx->CR1;
 8005092:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005094:	4290      	cmp	r0, r2
{
 8005096:	b430      	push	{r4, r5}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005098:	d039      	beq.n	800510e <TIM_Base_SetConfig+0x7e>
 800509a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800509e:	d021      	beq.n	80050e4 <TIM_Base_SetConfig+0x54>
 80050a0:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80050a4:	4290      	cmp	r0, r2
 80050a6:	d01d      	beq.n	80050e4 <TIM_Base_SetConfig+0x54>
 80050a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80050ac:	4290      	cmp	r0, r2
 80050ae:	d019      	beq.n	80050e4 <TIM_Base_SetConfig+0x54>
 80050b0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80050b4:	4290      	cmp	r0, r2
 80050b6:	d015      	beq.n	80050e4 <TIM_Base_SetConfig+0x54>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050b8:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 80050bc:	4290      	cmp	r0, r2
 80050be:	d015      	beq.n	80050ec <TIM_Base_SetConfig+0x5c>
 80050c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80050c4:	4290      	cmp	r0, r2
 80050c6:	d011      	beq.n	80050ec <TIM_Base_SetConfig+0x5c>
 80050c8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80050cc:	4290      	cmp	r0, r2
 80050ce:	d00d      	beq.n	80050ec <TIM_Base_SetConfig+0x5c>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050d0:	694d      	ldr	r5, [r1, #20]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050d2:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 80050d4:	680a      	ldr	r2, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050da:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80050dc:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050de:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80050e0:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050e2:	e010      	b.n	8005106 <TIM_Base_SetConfig+0x76>
    tmpcr1 |= Structure->CounterMode;
 80050e4:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80050ea:	4313      	orrs	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050ec:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050ee:	694a      	ldr	r2, [r1, #20]
    tmpcr1 &= ~TIM_CR1_CKD;
 80050f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050f4:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050fa:	688c      	ldr	r4, [r1, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050fc:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 80050fe:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 8005100:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005102:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005104:	6282      	str	r2, [r0, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8005106:	2301      	movs	r3, #1
}
 8005108:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 800510a:	6143      	str	r3, [r0, #20]
}
 800510c:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 800510e:	684c      	ldr	r4, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005110:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005116:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 8005118:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800511c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800511e:	694a      	ldr	r2, [r1, #20]
 8005120:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005124:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005126:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005128:	688b      	ldr	r3, [r1, #8]
 800512a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800512c:	680b      	ldr	r3, [r1, #0]
 800512e:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8005130:	690b      	ldr	r3, [r1, #16]
 8005132:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8005134:	2301      	movs	r3, #1
}
 8005136:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 8005138:	6143      	str	r3, [r0, #20]
}
 800513a:	4770      	bx	lr
 800513c:	40010000 	.word	0x40010000

08005140 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005140:	6a03      	ldr	r3, [r0, #32]
 8005142:	f023 0310 	bic.w	r3, r3, #16
 8005146:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8005148:	6a03      	ldr	r3, [r0, #32]
{
 800514a:	b470      	push	{r4, r5, r6}
  tmpcr2 =  TIMx->CR2;
 800514c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800514e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005150:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005152:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005156:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800515a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 800515c:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005160:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005164:	4d0c      	ldr	r5, [pc, #48]	; (8005198 <TIM_OC2_SetConfig+0x58>)
 8005166:	42a8      	cmp	r0, r5
 8005168:	d006      	beq.n	8005178 <TIM_OC2_SetConfig+0x38>
  TIMx->CCR2 = OC_Config->Pulse;
 800516a:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800516c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800516e:	6182      	str	r2, [r0, #24]
}
 8005170:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 8005172:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8005174:	6203      	str	r3, [r0, #32]
}
 8005176:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005178:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800517a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800517e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005182:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005186:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800518a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 800518c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005190:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8005194:	e7e9      	b.n	800516a <TIM_OC2_SetConfig+0x2a>
 8005196:	bf00      	nop
 8005198:	40010000 	.word	0x40010000

0800519c <TIM_TI1_SetConfig>:
{
 800519c:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800519e:	6a05      	ldr	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80051a0:	4e17      	ldr	r6, [pc, #92]	; (8005200 <TIM_TI1_SetConfig+0x64>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051a2:	f025 0501 	bic.w	r5, r5, #1
 80051a6:	6205      	str	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80051a8:	42b0      	cmp	r0, r6
  tmpccmr1 = TIMx->CCMR1;
 80051aa:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80051ac:	6a05      	ldr	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80051ae:	d015      	beq.n	80051dc <TIM_TI1_SetConfig+0x40>
 80051b0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80051b4:	d012      	beq.n	80051dc <TIM_TI1_SetConfig+0x40>
 80051b6:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 80051ba:	42b0      	cmp	r0, r6
 80051bc:	d00e      	beq.n	80051dc <TIM_TI1_SetConfig+0x40>
 80051be:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80051c2:	42b0      	cmp	r0, r6
 80051c4:	d00a      	beq.n	80051dc <TIM_TI1_SetConfig+0x40>
 80051c6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80051ca:	42b0      	cmp	r0, r6
 80051cc:	d006      	beq.n	80051dc <TIM_TI1_SetConfig+0x40>
 80051ce:	f506 369a 	add.w	r6, r6, #78848	; 0x13400
 80051d2:	42b0      	cmp	r0, r6
 80051d4:	d002      	beq.n	80051dc <TIM_TI1_SetConfig+0x40>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80051d6:	f044 0201 	orr.w	r2, r4, #1
 80051da:	e002      	b.n	80051e2 <TIM_TI1_SetConfig+0x46>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80051dc:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 80051e0:	4322      	orrs	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80051e2:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051e4:	f025 040a 	bic.w	r4, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051e8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80051ec:	b2db      	uxtb	r3, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80051ee:	f001 010a 	and.w	r1, r1, #10
 80051f2:	4321      	orrs	r1, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80051f4:	4313      	orrs	r3, r2
  TIMx->CCMR1 = tmpccmr1;
 80051f6:	6183      	str	r3, [r0, #24]
}
 80051f8:	bc70      	pop	{r4, r5, r6}
  TIMx->CCER = tmpccer;
 80051fa:	6201      	str	r1, [r0, #32]
}
 80051fc:	4770      	bx	lr
 80051fe:	bf00      	nop
 8005200:	40010000 	.word	0x40010000

08005204 <HAL_TIMEx_HallSensor_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop

08005208 <HAL_TIMEx_HallSensor_Init>:
  if (htim == NULL)
 8005208:	2800      	cmp	r0, #0
 800520a:	d05f      	beq.n	80052cc <HAL_TIMEx_HallSensor_Init+0xc4>
{
 800520c:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800520e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 8005212:	b088      	sub	sp, #32
 8005214:	460d      	mov	r5, r1
 8005216:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8005218:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800521c:	2b00      	cmp	r3, #0
 800521e:	d050      	beq.n	80052c2 <HAL_TIMEx_HallSensor_Init+0xba>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005220:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8005222:	2302      	movs	r3, #2
 8005224:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005228:	f851 0b04 	ldr.w	r0, [r1], #4
 800522c:	f7ff ff30 	bl	8005090 <TIM_Base_SetConfig>
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8005230:	68ab      	ldr	r3, [r5, #8]
 8005232:	6829      	ldr	r1, [r5, #0]
 8005234:	6820      	ldr	r0, [r4, #0]
 8005236:	2203      	movs	r2, #3
 8005238:	f7ff ffb0 	bl	800519c <TIM_TI1_SetConfig>
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800523c:	6820      	ldr	r0, [r4, #0]
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 800523e:	686e      	ldr	r6, [r5, #4]
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005240:	6982      	ldr	r2, [r0, #24]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8005242:	68e9      	ldr	r1, [r5, #12]
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005244:	f022 020c 	bic.w	r2, r2, #12
 8005248:	6182      	str	r2, [r0, #24]
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 800524a:	6983      	ldr	r3, [r0, #24]
 800524c:	4333      	orrs	r3, r6
 800524e:	6183      	str	r3, [r0, #24]
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8005250:	6843      	ldr	r3, [r0, #4]
 8005252:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005256:	6043      	str	r3, [r0, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8005258:	6883      	ldr	r3, [r0, #8]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 800525a:	9102      	str	r1, [sp, #8]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800525c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005260:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8005262:	6883      	ldr	r3, [r0, #8]
 8005264:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005268:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800526a:	6883      	ldr	r3, [r0, #8]
 800526c:	f023 0307 	bic.w	r3, r3, #7
 8005270:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8005272:	6883      	ldr	r3, [r0, #8]
 8005274:	f043 0304 	orr.w	r3, r3, #4
 8005278:	6083      	str	r3, [r0, #8]
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 800527a:	2500      	movs	r5, #0
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 800527c:	a901      	add	r1, sp, #4
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 800527e:	2370      	movs	r3, #112	; 0x70
 8005280:	9301      	str	r3, [sp, #4]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005282:	e9cd 5505 	strd	r5, r5, [sp, #20]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005286:	e9cd 5503 	strd	r5, r5, [sp, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800528a:	9507      	str	r5, [sp, #28]
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 800528c:	f7ff ff58 	bl	8005140 <TIM_OC2_SetConfig>
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8005290:	6822      	ldr	r2, [r4, #0]
 8005292:	6851      	ldr	r1, [r2, #4]
 8005294:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8005298:	6051      	str	r1, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 800529a:	6851      	ldr	r1, [r2, #4]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800529c:	2301      	movs	r3, #1
  return HAL_OK;
 800529e:	4628      	mov	r0, r5
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 80052a0:	f041 0150 	orr.w	r1, r1, #80	; 0x50
 80052a4:	6051      	str	r1, [r2, #4]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052a6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80052aa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80052ae:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80052b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80052b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  htim->State = HAL_TIM_STATE_READY;
 80052ba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80052be:	b008      	add	sp, #32
 80052c0:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80052c2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIMEx_HallSensor_MspInit(htim);
 80052c6:	f7ff ff9d 	bl	8005204 <HAL_TIMEx_HallSensor_MspInit>
 80052ca:	e7a9      	b.n	8005220 <HAL_TIMEx_HallSensor_Init+0x18>
    return HAL_ERROR;
 80052cc:	2001      	movs	r0, #1
}
 80052ce:	4770      	bx	lr

080052d0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052d0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d02f      	beq.n	8005338 <HAL_TIMEx_MasterConfigSynchronization+0x68>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052d8:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80052da:	2202      	movs	r2, #2
{
 80052dc:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 80052de:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 80052e2:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052e4:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 80052e6:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 80052e8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052ec:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052ee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052f0:	4a12      	ldr	r2, [pc, #72]	; (800533c <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d012      	beq.n	800531c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80052f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052fa:	d00f      	beq.n	800531c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80052fc:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8005300:	4293      	cmp	r3, r2
 8005302:	d00b      	beq.n	800531c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005304:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005308:	4293      	cmp	r3, r2
 800530a:	d007      	beq.n	800531c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800530c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005310:	4293      	cmp	r3, r2
 8005312:	d003      	beq.n	800531c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005314:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8005318:	4293      	cmp	r3, r2
 800531a:	d104      	bne.n	8005326 <HAL_TIMEx_MasterConfigSynchronization+0x56>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800531c:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800531e:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005322:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005324:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8005326:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8005328:	2201      	movs	r2, #1
 800532a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800532e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8005332:	bc30      	pop	{r4, r5}
  return HAL_OK;
 8005334:	4618      	mov	r0, r3
}
 8005336:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005338:	2002      	movs	r0, #2
}
 800533a:	4770      	bx	lr
 800533c:	40010000 	.word	0x40010000

08005340 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005340:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005344:	2b01      	cmp	r3, #1
 8005346:	d023      	beq.n	8005390 <HAL_TIMEx_ConfigBreakDeadTime+0x50>
{
 8005348:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800534a:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 800534e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005352:	4602      	mov	r2, r0
 8005354:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005356:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005358:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800535a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800535e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005360:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005364:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005366:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005368:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800536c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800536e:	6948      	ldr	r0, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005370:	69cc      	ldr	r4, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005372:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005376:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005378:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800537c:	6810      	ldr	r0, [r2, #0]

  __HAL_UNLOCK(htim);
 800537e:	2100      	movs	r1, #0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005380:	4323      	orrs	r3, r4
  htim->Instance->BDTR = tmpbdtr;
 8005382:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8005384:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 8005388:	4608      	mov	r0, r1
}
 800538a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800538e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005390:	2002      	movs	r0, #2
}
 8005392:	4770      	bx	lr

08005394 <HAL_TIMEx_CommutCallback>:
 8005394:	4770      	bx	lr
 8005396:	bf00      	nop

08005398 <HAL_TIMEx_BreakCallback>:
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop

0800539c <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 800539c:	2800      	cmp	r0, #0
 800539e:	f000 808f 	beq.w	80054c0 <HAL_UART_Init+0x124>
{
 80053a2:	b538      	push	{r3, r4, r5, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80053a4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80053a8:	4604      	mov	r4, r0
 80053aa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	f000 8081 	beq.w	80054b6 <HAL_UART_Init+0x11a>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80053b4:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053b6:	68e0      	ldr	r0, [r4, #12]
  huart->gState = HAL_UART_STATE_BUSY;
 80053b8:	2224      	movs	r2, #36	; 0x24
 80053ba:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 80053be:	68da      	ldr	r2, [r3, #12]
 80053c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053c4:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053c6:	6919      	ldr	r1, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80053c8:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053ca:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 80053ce:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80053d0:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053d2:	6119      	str	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80053d4:	4302      	orrs	r2, r0
 80053d6:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80053d8:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80053da:	4302      	orrs	r2, r0
 80053dc:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 80053de:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 80053e2:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80053e6:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80053e8:	430a      	orrs	r2, r1
 80053ea:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80053ec:	695a      	ldr	r2, [r3, #20]
 80053ee:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80053f0:	4934      	ldr	r1, [pc, #208]	; (80054c4 <HAL_UART_Init+0x128>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80053f2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80053f6:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80053f8:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80053fa:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80053fc:	d035      	beq.n	800546a <HAL_UART_Init+0xce>
 80053fe:	4a32      	ldr	r2, [pc, #200]	; (80054c8 <HAL_UART_Init+0x12c>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d032      	beq.n	800546a <HAL_UART_Init+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005404:	f7ff f9dc 	bl	80047c0 <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005408:	69e3      	ldr	r3, [r4, #28]
 800540a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800540e:	d032      	beq.n	8005476 <HAL_UART_Init+0xda>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005410:	6863      	ldr	r3, [r4, #4]
 8005412:	2119      	movs	r1, #25
 8005414:	009a      	lsls	r2, r3, #2
 8005416:	fba0 0101 	umull	r0, r1, r0, r1
 800541a:	0f9b      	lsrs	r3, r3, #30
 800541c:	f7fb fa16 	bl	800084c <__aeabi_uldivmod>
 8005420:	492a      	ldr	r1, [pc, #168]	; (80054cc <HAL_UART_Init+0x130>)
 8005422:	fba1 3200 	umull	r3, r2, r1, r0
 8005426:	0952      	lsrs	r2, r2, #5
 8005428:	2564      	movs	r5, #100	; 0x64
 800542a:	fb05 0012 	mls	r0, r5, r2, r0
 800542e:	0100      	lsls	r0, r0, #4
 8005430:	3032      	adds	r0, #50	; 0x32
 8005432:	6823      	ldr	r3, [r4, #0]
 8005434:	fba1 1000 	umull	r1, r0, r1, r0
 8005438:	0112      	lsls	r2, r2, #4
 800543a:	eb02 1050 	add.w	r0, r2, r0, lsr #5
 800543e:	6098      	str	r0, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005440:	691a      	ldr	r2, [r3, #16]
 8005442:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005446:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005448:	695a      	ldr	r2, [r3, #20]
 800544a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800544e:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8005450:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005452:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8005454:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 8005456:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800545a:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800545c:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800545e:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005462:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  return HAL_OK;
 8005466:	4628      	mov	r0, r5
}
 8005468:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 800546a:	f7ff f9b9 	bl	80047e0 <HAL_RCC_GetPCLK2Freq>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800546e:	69e3      	ldr	r3, [r4, #28]
 8005470:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005474:	d1cc      	bne.n	8005410 <HAL_UART_Init+0x74>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005476:	6862      	ldr	r2, [r4, #4]
 8005478:	2119      	movs	r1, #25
 800547a:	1892      	adds	r2, r2, r2
 800547c:	f04f 0300 	mov.w	r3, #0
 8005480:	415b      	adcs	r3, r3
 8005482:	fba0 0101 	umull	r0, r1, r0, r1
 8005486:	f7fb f9e1 	bl	800084c <__aeabi_uldivmod>
 800548a:	4b10      	ldr	r3, [pc, #64]	; (80054cc <HAL_UART_Init+0x130>)
 800548c:	fba3 2100 	umull	r2, r1, r3, r0
 8005490:	094d      	lsrs	r5, r1, #5
 8005492:	2264      	movs	r2, #100	; 0x64
 8005494:	fb02 0215 	mls	r2, r2, r5, r0
 8005498:	00d2      	lsls	r2, r2, #3
 800549a:	3232      	adds	r2, #50	; 0x32
 800549c:	fba3 3202 	umull	r3, r2, r3, r2
 80054a0:	f3c2 1142 	ubfx	r1, r2, #5, #3
 80054a4:	0912      	lsrs	r2, r2, #4
 80054a6:	6823      	ldr	r3, [r4, #0]
 80054a8:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 80054ac:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 80054b0:	440a      	add	r2, r1
 80054b2:	609a      	str	r2, [r3, #8]
 80054b4:	e7c4      	b.n	8005440 <HAL_UART_Init+0xa4>
    huart->Lock = HAL_UNLOCKED;
 80054b6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 80054ba:	f7fd fc81 	bl	8002dc0 <HAL_UART_MspInit>
 80054be:	e779      	b.n	80053b4 <HAL_UART_Init+0x18>
    return HAL_ERROR;
 80054c0:	2001      	movs	r0, #1
}
 80054c2:	4770      	bx	lr
 80054c4:	40011000 	.word	0x40011000
 80054c8:	40011400 	.word	0x40011400
 80054cc:	51eb851f 	.word	0x51eb851f

080054d0 <HAL_UART_DeInit>:
  if (huart == NULL)
 80054d0:	b1b0      	cbz	r0, 8005500 <HAL_UART_DeInit+0x30>
  __HAL_UART_DISABLE(huart);
 80054d2:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80054d4:	2324      	movs	r3, #36	; 0x24
{
 80054d6:	b510      	push	{r4, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 80054d8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 80054dc:	68d3      	ldr	r3, [r2, #12]
 80054de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054e2:	4604      	mov	r4, r0
 80054e4:	60d3      	str	r3, [r2, #12]
  HAL_UART_MspDeInit(huart);
 80054e6:	f7fd fca7 	bl	8002e38 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054ea:	2300      	movs	r3, #0
 80054ec:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(huart);
 80054ee:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_RESET;
 80054f2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 80054f6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  return HAL_OK;
 80054fa:	4618      	mov	r0, r3
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054fc:	6323      	str	r3, [r4, #48]	; 0x30
}
 80054fe:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005500:	2001      	movs	r0, #1
}
 8005502:	4770      	bx	lr

08005504 <ESCOOTER_ThrottleSignalTrigger>:
/**To be called by motor control protocol**/
/**Before running the Main Task, please verify this function carefully**/
/*Input some dummy commands -> check it*/
bool ESCOOTER_ThrottleSignalTrigger(ESCOOTER_BrakeANDThrottleInput_t *inputHandle)
{
	if(inputHandle->TARGET_IQ != 0)
 8005504:	f9b0 0000 	ldrsh.w	r0, [r0]
	{
		return true;
	}
	return false;
}
 8005508:	3800      	subs	r0, #0
 800550a:	bf18      	it	ne
 800550c:	2001      	movne	r0, #1
 800550e:	4770      	bx	lr

08005510 <ESCOOTER_saveStatus>:
	Cruise_Control_Setting(&CruiseControl);
}

void ESCOOTER_saveStatus (uint8_t state)
{
	  Driving_State = state;
 8005510:	4b01      	ldr	r3, [pc, #4]	; (8005518 <ESCOOTER_saveStatus+0x8>)
 8005512:	7018      	strb	r0, [r3, #0]
}
 8005514:	4770      	bx	lr
 8005516:	bf00      	nop
 8005518:	20000c5a 	.word	0x20000c5a

0800551c <ESCOOTER_getStatus>:

ESCOOTER_Driving_State_t ESCOOTER_getStatus()
{
	return Driving_State;
 800551c:	4b01      	ldr	r3, [pc, #4]	; (8005524 <ESCOOTER_getStatus+0x8>)
}
 800551e:	7818      	ldrb	r0, [r3, #0]
 8005520:	4770      	bx	lr
 8005522:	bf00      	nop
 8005524:	20000c5a 	.word	0x20000c5a

08005528 <ESCOOTER_Set_Limit>:

void ESCOOTER_Set_Limit(ESCOOTER_BrakeANDThrottleInput_t *limitHandle)
{
 8005528:	4602      	mov	r2, r0
     modeControl = *limitHandle;
 800552a:	4b03      	ldr	r3, [pc, #12]	; (8005538 <ESCOOTER_Set_Limit+0x10>)
 800552c:	6851      	ldr	r1, [r2, #4]
 800552e:	6800      	ldr	r0, [r0, #0]
 8005530:	c303      	stmia	r3!, {r0, r1}
 8005532:	8912      	ldrh	r2, [r2, #8]
 8005534:	801a      	strh	r2, [r3, #0]
}
 8005536:	4770      	bx	lr
 8005538:	20000c6c 	.word	0x20000c6c

0800553c <ESCOOTER_Set_PhysicalParam>:

void ESCOOTER_Set_PhysicalParam(ESCOOTER_Physical_State_t *motorParam)
{
	 motorStatus = *motorParam;
 800553c:	c80f      	ldmia	r0, {r0, r1, r2, r3}
{
 800553e:	b410      	push	{r4}
	 motorStatus = *motorParam;
 8005540:	4c02      	ldr	r4, [pc, #8]	; (800554c <ESCOOTER_Set_PhysicalParam+0x10>)
 8005542:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8005546:	f85d 4b04 	ldr.w	r4, [sp], #4
 800554a:	4770      	bx	lr
 800554c:	20000c78 	.word	0x20000c78

08005550 <ESCOOTER_Get_Speed>:

int16_t MOTOR_SPEED = 0;
void ESCOOTER_Get_Speed()
{
	/*Convert Back to RPM since the rotor speed is expressed in tenths of Hz*/
	MOTOR_SPEED = (motorStatus.current_speed*_RPM)/SPEED_UNIT;
 8005550:	4b03      	ldr	r3, [pc, #12]	; (8005560 <ESCOOTER_Get_Speed+0x10>)
 8005552:	4a04      	ldr	r2, [pc, #16]	; (8005564 <ESCOOTER_Get_Speed+0x14>)
 8005554:	881b      	ldrh	r3, [r3, #0]
 8005556:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800555a:	005b      	lsls	r3, r3, #1
 800555c:	8013      	strh	r3, [r2, #0]
	/*RPM -> km/h*/
	//MOTOR_SPEED = 22*MOTOR_SPEED*0.001885;
}
 800555e:	4770      	bx	lr
 8005560:	20000c78 	.word	0x20000c78
 8005564:	20000c5c 	.word	0x20000c5c

08005568 <ESCOOTER_Get_PhaseCurrent>:

float PHASE_CURRENT = 0;
void ESCOOTER_Get_PhaseCurrent()
{
   /*Convert back to Amps from s16A*/
	PHASE_CURRENT = ((motorStatus.phase_current)*3.3) / (65536*20*0.002);
 8005568:	4b0d      	ldr	r3, [pc, #52]	; (80055a0 <ESCOOTER_Get_PhaseCurrent+0x38>)
{
 800556a:	b510      	push	{r4, lr}
	PHASE_CURRENT = ((motorStatus.phase_current)*3.3) / (65536*20*0.002);
 800556c:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
	PHASE_CURRENT = PHASE_CURRENT/1.4142;
 8005570:	4c0c      	ldr	r4, [pc, #48]	; (80055a4 <ESCOOTER_Get_PhaseCurrent+0x3c>)
	PHASE_CURRENT = ((motorStatus.phase_current)*3.3) / (65536*20*0.002);
 8005572:	f7fb f8b1 	bl	80006d8 <__aeabi_i2d>
 8005576:	4b0c      	ldr	r3, [pc, #48]	; (80055a8 <ESCOOTER_Get_PhaseCurrent+0x40>)
 8005578:	2200      	movs	r2, #0
 800557a:	f7fa fe31 	bl	80001e0 <__aeabi_dmul>
 800557e:	f7fb f915 	bl	80007ac <__aeabi_d2f>
	PHASE_CURRENT = PHASE_CURRENT/1.4142;
 8005582:	f7fb f8bb 	bl	80006fc <__aeabi_f2d>
 8005586:	a304      	add	r3, pc, #16	; (adr r3, 8005598 <ESCOOTER_Get_PhaseCurrent+0x30>)
 8005588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800558c:	f7fa fe28 	bl	80001e0 <__aeabi_dmul>
 8005590:	f7fb f90c 	bl	80007ac <__aeabi_d2f>
 8005594:	6020      	str	r0, [r4, #0]
}
 8005596:	bd10      	pop	{r4, pc}
 8005598:	9f275a9f 	.word	0x9f275a9f
 800559c:	3fe6a0ac 	.word	0x3fe6a0ac
 80055a0:	20000c78 	.word	0x20000c78
 80055a4:	20000c60 	.word	0x20000c60
 80055a8:	3f54a000 	.word	0x3f54a000
 80055ac:	00000000 	.word	0x00000000

080055b0 <ESCOOTER_Get_PhaseVoltage>:

float PHASE_VOLTAGE = 0;
void ESCOOTER_Get_PhaseVoltage()
{
   /*Convert back to Volt from s16V*/
	PHASE_VOLTAGE = ((motorStatus.phase_voltage)/(1.7321*32767))*36;
 80055b0:	4b11      	ldr	r3, [pc, #68]	; (80055f8 <ESCOOTER_Get_PhaseVoltage+0x48>)
{
 80055b2:	b510      	push	{r4, lr}
	PHASE_VOLTAGE = ((motorStatus.phase_voltage)/(1.7321*32767))*36;
 80055b4:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
	PHASE_VOLTAGE = PHASE_VOLTAGE/1.4142;
 80055b8:	4c10      	ldr	r4, [pc, #64]	; (80055fc <ESCOOTER_Get_PhaseVoltage+0x4c>)
	PHASE_VOLTAGE = ((motorStatus.phase_voltage)/(1.7321*32767))*36;
 80055ba:	f7fb f88d 	bl	80006d8 <__aeabi_i2d>
 80055be:	a30a      	add	r3, pc, #40	; (adr r3, 80055e8 <ESCOOTER_Get_PhaseVoltage+0x38>)
 80055c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c4:	f7fa fe0c 	bl	80001e0 <__aeabi_dmul>
 80055c8:	f7fb f8f0 	bl	80007ac <__aeabi_d2f>
	PHASE_VOLTAGE = PHASE_VOLTAGE/1.4142;
 80055cc:	f7fb f896 	bl	80006fc <__aeabi_f2d>
 80055d0:	a307      	add	r3, pc, #28	; (adr r3, 80055f0 <ESCOOTER_Get_PhaseVoltage+0x40>)
 80055d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d6:	f7fa fe03 	bl	80001e0 <__aeabi_dmul>
 80055da:	f7fb f8e7 	bl	80007ac <__aeabi_d2f>
 80055de:	6020      	str	r0, [r4, #0]
}
 80055e0:	bd10      	pop	{r4, pc}
 80055e2:	bf00      	nop
 80055e4:	f3af 8000 	nop.w
 80055e8:	1089c3bb 	.word	0x1089c3bb
 80055ec:	3f44c8df 	.word	0x3f44c8df
 80055f0:	9f275a9f 	.word	0x9f275a9f
 80055f4:	3fe6a0ac 	.word	0x3fe6a0ac
 80055f8:	20000c78 	.word	0x20000c78
 80055fc:	20000c64 	.word	0x20000c64

08005600 <ESCOOTER_Driving_Start>:

#undef POWER_SUPPLY
bool connect_failed = false;
bool motor_failed = false;
void ESCOOTER_Driving_Start()
{
 8005600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    throttle_Current = modeControl.TARGET_IQ;
 8005602:	4b35      	ldr	r3, [pc, #212]	; (80056d8 <ESCOOTER_Driving_Start+0xd8>)
    speedLimit = modeControl.SPEED_LIMIT;
    AMPMAX = modeControl.IQ_LIMIT;
    acceleration = modeControl.RAMP_DURATION;
    /*Acceleration Mode*/
    if(connect_failed == false && motor_failed == false){
 8005604:	4d35      	ldr	r5, [pc, #212]	; (80056dc <ESCOOTER_Driving_Start+0xdc>)
    speedLimit = modeControl.SPEED_LIMIT;
 8005606:	4f36      	ldr	r7, [pc, #216]	; (80056e0 <ESCOOTER_Driving_Start+0xe0>)
 8005608:	f8b3 c004 	ldrh.w	ip, [r3, #4]
    AMPMAX = modeControl.IQ_LIMIT;
 800560c:	4c35      	ldr	r4, [pc, #212]	; (80056e4 <ESCOOTER_Driving_Start+0xe4>)
    throttle_Current = modeControl.TARGET_IQ;
 800560e:	4e36      	ldr	r6, [pc, #216]	; (80056e8 <ESCOOTER_Driving_Start+0xe8>)
    acceleration = modeControl.RAMP_DURATION;
 8005610:	4936      	ldr	r1, [pc, #216]	; (80056ec <ESCOOTER_Driving_Start+0xec>)
    if(connect_failed == false && motor_failed == false){
 8005612:	782a      	ldrb	r2, [r5, #0]
    throttle_Current = modeControl.TARGET_IQ;
 8005614:	f9b3 0000 	ldrsh.w	r0, [r3]
    speedLimit = modeControl.SPEED_LIMIT;
 8005618:	f8a7 c000 	strh.w	ip, [r7]
    AMPMAX = modeControl.IQ_LIMIT;
 800561c:	f8b3 c002 	ldrh.w	ip, [r3, #2]
    acceleration = modeControl.RAMP_DURATION;
 8005620:	88db      	ldrh	r3, [r3, #6]
    AMPMAX = modeControl.IQ_LIMIT;
 8005622:	f8a4 c000 	strh.w	ip, [r4]
    throttle_Current = modeControl.TARGET_IQ;
 8005626:	8030      	strh	r0, [r6, #0]
    if(connect_failed == false && motor_failed == false){
 8005628:	4c31      	ldr	r4, [pc, #196]	; (80056f0 <ESCOOTER_Driving_Start+0xf0>)
    acceleration = modeControl.RAMP_DURATION;
 800562a:	800b      	strh	r3, [r1, #0]
    if(connect_failed == false && motor_failed == false){
 800562c:	b99a      	cbnz	r2, 8005656 <ESCOOTER_Driving_Start+0x56>
 800562e:	7821      	ldrb	r1, [r4, #0]
 8005630:	bb09      	cbnz	r1, 8005676 <ESCOOTER_Driving_Start+0x76>
    	if(throttle_Current != 0) /*Try to modify when Speed == 0 or Speed <= 3 km/h then shutdown*/
 8005632:	bb38      	cbnz	r0, 8005684 <ESCOOTER_Driving_Start+0x84>
    	{
            MC_ProgramTorqueRampMotor1(throttle_Current,0);
            run = MC_StartMotor1();
    	}

    	if(MOTOR_SPEED <= 10 && throttle_Current == 0)
 8005634:	4b2f      	ldr	r3, [pc, #188]	; (80056f4 <ESCOOTER_Driving_Start+0xf4>)
 8005636:	f9b3 3000 	ldrsh.w	r3, [r3]
 800563a:	2b0a      	cmp	r3, #10
 800563c:	dd3b      	ble.n	80056b6 <ESCOOTER_Driving_Start+0xb6>
        	MC_AcknowledgeFaultMotor1();
        }
#endif

        /*System Does Error Handling (Just for System Debug)*/
        if (ESCOOTER_GetReportStatus() == true)
 800563e:	f000 f8a9 	bl	8005794 <ESCOOTER_GetReportStatus>
 8005642:	bb78      	cbnz	r0, 80056a4 <ESCOOTER_Driving_Start+0xa4>
        {
        	/*JUMP OUT OF THIS LOOP*/
        	connect_failed = true;
        }

        if(motorStatus.previous_error != 0)
 8005644:	4b2c      	ldr	r3, [pc, #176]	; (80056f8 <ESCOOTER_Driving_Start+0xf8>)
        }
    	go = 1;
    }

    /*HANDLE ONE MORE CASE: --> TAKE STM32 ERROR CODE in case motor errors*/
    if(connect_failed == true) /*Emergency Stop the Motor in case heartbeat loses*/
 8005646:	7829      	ldrb	r1, [r5, #0]
        if(motorStatus.previous_error != 0)
 8005648:	89db      	ldrh	r3, [r3, #14]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d141      	bne.n	80056d2 <ESCOOTER_Driving_Start+0xd2>
    	go = 1;
 800564e:	4b2b      	ldr	r3, [pc, #172]	; (80056fc <ESCOOTER_Driving_Start+0xfc>)
 8005650:	2201      	movs	r2, #1
 8005652:	701a      	strb	r2, [r3, #0]
    if(connect_failed == true) /*Emergency Stop the Motor in case heartbeat loses*/
 8005654:	b161      	cbz	r1, 8005670 <ESCOOTER_Driving_Start+0x70>
    {
    	MC_ProgramTorqueRampMotor1(0,0);
 8005656:	2100      	movs	r1, #0
 8005658:	4608      	mov	r0, r1
 800565a:	f7fb fdf5 	bl	8001248 <MC_ProgramTorqueRampMotor1>
    	MC_StartMotor1();
 800565e:	f7fb fde7 	bl	8001230 <MC_StartMotor1>
    	MC_StopMotor1();
 8005662:	f7fb fdeb 	bl	800123c <MC_StopMotor1>
	  Driving_State = state;
 8005666:	4b26      	ldr	r3, [pc, #152]	; (8005700 <ESCOOTER_Driving_Start+0x100>)
 8005668:	2003      	movs	r0, #3
 800566a:	7018      	strb	r0, [r3, #0]
    	ESCOOTER_saveStatus(3);
    	ESCOOTER_UpdateDrivingState(3);
 800566c:	f000 f898 	bl	80057a0 <ESCOOTER_UpdateDrivingState>
    	//Send Error Codes
    	//ERROR_HANDLE_MSG(CONNECTION_FAIL);
    }

    if(motor_failed == true)
 8005670:	7823      	ldrb	r3, [r4, #0]
 8005672:	b903      	cbnz	r3, 8005676 <ESCOOTER_Driving_Start+0x76>
    	ESCOOTER_saveStatus(3);
    	ESCOOTER_UpdateDrivingState(3);
    	//Send Error Codes
    	//ERROR_HANDLE_MSG(HALL_SENSOR_FAIL);
    }
}
 8005674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  Driving_State = state;
 8005676:	4b22      	ldr	r3, [pc, #136]	; (8005700 <ESCOOTER_Driving_Start+0x100>)
 8005678:	2003      	movs	r0, #3
 800567a:	7018      	strb	r0, [r3, #0]
}
 800567c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    	ESCOOTER_UpdateDrivingState(3);
 8005680:	f000 b88e 	b.w	80057a0 <ESCOOTER_UpdateDrivingState>
            MC_ProgramTorqueRampMotor1(throttle_Current,0);
 8005684:	f7fb fde0 	bl	8001248 <MC_ProgramTorqueRampMotor1>
            run = MC_StartMotor1();
 8005688:	f7fb fdd2 	bl	8001230 <MC_StartMotor1>
    	if(MOTOR_SPEED <= 10 && throttle_Current == 0)
 800568c:	4b19      	ldr	r3, [pc, #100]	; (80056f4 <ESCOOTER_Driving_Start+0xf4>)
            run = MC_StartMotor1();
 800568e:	4f1d      	ldr	r7, [pc, #116]	; (8005704 <ESCOOTER_Driving_Start+0x104>)
    	if(MOTOR_SPEED <= 10 && throttle_Current == 0)
 8005690:	f9b3 3000 	ldrsh.w	r3, [r3]
            run = MC_StartMotor1();
 8005694:	7038      	strb	r0, [r7, #0]
    	if(MOTOR_SPEED <= 10 && throttle_Current == 0)
 8005696:	2b0a      	cmp	r3, #10
 8005698:	dcd1      	bgt.n	800563e <ESCOOTER_Driving_Start+0x3e>
 800569a:	f9b6 3000 	ldrsh.w	r3, [r6]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1cd      	bne.n	800563e <ESCOOTER_Driving_Start+0x3e>
 80056a2:	e009      	b.n	80056b8 <ESCOOTER_Driving_Start+0xb8>
        if(motorStatus.previous_error != 0)
 80056a4:	4a14      	ldr	r2, [pc, #80]	; (80056f8 <ESCOOTER_Driving_Start+0xf8>)
 80056a6:	89d2      	ldrh	r2, [r2, #14]
        	connect_failed = true;
 80056a8:	2301      	movs	r3, #1
 80056aa:	702b      	strb	r3, [r5, #0]
        if(motorStatus.previous_error != 0)
 80056ac:	b172      	cbz	r2, 80056cc <ESCOOTER_Driving_Start+0xcc>
    	go = 1;
 80056ae:	4a13      	ldr	r2, [pc, #76]	; (80056fc <ESCOOTER_Driving_Start+0xfc>)
            motor_failed = true;
 80056b0:	7023      	strb	r3, [r4, #0]
    	go = 1;
 80056b2:	7013      	strb	r3, [r2, #0]
    if(connect_failed == true) /*Emergency Stop the Motor in case heartbeat loses*/
 80056b4:	e7cf      	b.n	8005656 <ESCOOTER_Driving_Start+0x56>
 80056b6:	4f13      	ldr	r7, [pc, #76]	; (8005704 <ESCOOTER_Driving_Start+0x104>)
    		MC_ProgramTorqueRampMotor1(throttle_Current,0);
 80056b8:	2100      	movs	r1, #0
 80056ba:	4608      	mov	r0, r1
 80056bc:	f7fb fdc4 	bl	8001248 <MC_ProgramTorqueRampMotor1>
    		run = MC_StartMotor1();
 80056c0:	f7fb fdb6 	bl	8001230 <MC_StartMotor1>
 80056c4:	7038      	strb	r0, [r7, #0]
    		MC_StopMotor1();
 80056c6:	f7fb fdb9 	bl	800123c <MC_StopMotor1>
 80056ca:	e7b8      	b.n	800563e <ESCOOTER_Driving_Start+0x3e>
    	go = 1;
 80056cc:	4a0b      	ldr	r2, [pc, #44]	; (80056fc <ESCOOTER_Driving_Start+0xfc>)
 80056ce:	7013      	strb	r3, [r2, #0]
    if(connect_failed == true) /*Emergency Stop the Motor in case heartbeat loses*/
 80056d0:	e7c1      	b.n	8005656 <ESCOOTER_Driving_Start+0x56>
            motor_failed = true;
 80056d2:	2301      	movs	r3, #1
 80056d4:	7023      	strb	r3, [r4, #0]
 80056d6:	e7ba      	b.n	800564e <ESCOOTER_Driving_Start+0x4e>
 80056d8:	20000c6c 	.word	0x20000c6c
 80056dc:	20000c6a 	.word	0x20000c6a
 80056e0:	20000c8a 	.word	0x20000c8a
 80056e4:	20000c58 	.word	0x20000c58
 80056e8:	20000c8e 	.word	0x20000c8e
 80056ec:	20000c68 	.word	0x20000c68
 80056f0:	20000c88 	.word	0x20000c88
 80056f4:	20000c5c 	.word	0x20000c5c
 80056f8:	20000c78 	.word	0x20000c78
 80056fc:	20000c6b 	.word	0x20000c6b
 8005700:	20000c5a 	.word	0x20000c5a
 8005704:	20000c89 	.word	0x20000c89

08005708 <ESCOOTER_Driving_Stop>:

uint8_t stop = 0;
void ESCOOTER_Driving_Stop()
{
	stop = 1;
 8005708:	4b01      	ldr	r3, [pc, #4]	; (8005710 <ESCOOTER_Driving_Stop+0x8>)
 800570a:	2201      	movs	r2, #1
 800570c:	701a      	strb	r2, [r3, #0]
}
 800570e:	4770      	bx	lr
 8005710:	20000c8c 	.word	0x20000c8c

08005714 <ESboot>:
ESCOOTER_Physical_State_t pstateHandle; //Monitor the Escooter's Electrical & Mechanical Parameters
ESCOOTER_BrakeANDThrottleInput_t inputHandle;

/*ESboot() must be called when the E-Scooter is turned-on！*/
void ESboot()
{
 8005714:	b510      	push	{r4, lr}
	tempHandle.bDrivingState    = DRIVING_IDLE;
 8005716:	4b0a      	ldr	r3, [pc, #40]	; (8005740 <ESboot+0x2c>)

    /*Save the current driving status. IDLE Mode is set in Default*/
    ESCOOTER_saveStatus(tempHandle.bDrivingState);

    /*Initialize the E-Scooter in Ambler Mode*/
    ESCOOTER_DrivingModeSetDefault(&inputHandle);
 8005718:	4c0a      	ldr	r4, [pc, #40]	; (8005744 <ESboot+0x30>)
	tempHandle.bDrivingState    = DRIVING_IDLE;
 800571a:	2000      	movs	r0, #0
	tempHandle.BRAKE_Trigger    = false;
 800571c:	f8a3 0001 	strh.w	r0, [r3, #1]
	tempHandle.bDrivingState    = DRIVING_IDLE;
 8005720:	7018      	strb	r0, [r3, #0]
	tempHandle.systemError      = false;
 8005722:	7158      	strb	r0, [r3, #5]
    ESCOOTER_saveStatus(tempHandle.bDrivingState);
 8005724:	f7ff fef4 	bl	8005510 <ESCOOTER_saveStatus>
    ESCOOTER_DrivingModeSetDefault(&inputHandle);
 8005728:	4620      	mov	r0, r4
 800572a:	f000 f8c5 	bl	80058b8 <ESCOOTER_DrivingModeSetDefault>
    ESCOOTER_DetermineDrivingMode(&inputHandle);
 800572e:	4620      	mov	r0, r4
 8005730:	f000 f908 	bl	8005944 <ESCOOTER_DetermineDrivingMode>

    /*Initialize the Motor Parameters*/
    ESCOOTER_PhysicalParameterInit(&pstateHandle);


}
 8005734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ESCOOTER_PhysicalParameterInit(&pstateHandle);
 8005738:	4803      	ldr	r0, [pc, #12]	; (8005748 <ESboot+0x34>)
 800573a:	f000 b89b 	b.w	8005874 <ESCOOTER_PhysicalParameterInit>
 800573e:	bf00      	nop
 8005740:	20000cb4 	.word	0x20000cb4
 8005744:	20000c94 	.word	0x20000c94
 8005748:	20000ca0 	.word	0x20000ca0

0800574c <ESCOOTER_DriveModeConfig>:
/*Triggered by Dashboard's commands! Configure the driving mode by adjusting the current, speed and acceleration ramp limits*/
/*Save those parameters in form of &inputHandle pointer*/
/*Input some dummy commands -> check it*/
/*It's assumed that the E-Scooter is in IDLE State*/
void ESCOOTER_DriveModeConfig(int16_t max_IQ, int16_t allowable_rpm, uint16_t acceleration_ramp)
{
 800574c:	4684      	mov	ip, r0
 800574e:	4613      	mov	r3, r2
	ESCOOTER_ConfigDrivingMode(&inputHandle,max_IQ,allowable_rpm,acceleration_ramp);
 8005750:	4802      	ldr	r0, [pc, #8]	; (800575c <ESCOOTER_DriveModeConfig+0x10>)
 8005752:	460a      	mov	r2, r1
 8005754:	4661      	mov	r1, ip
 8005756:	f000 b8bb 	b.w	80058d0 <ESCOOTER_ConfigDrivingMode>
 800575a:	bf00      	nop
 800575c:	20000c94 	.word	0x20000c94

08005760 <ESCOOTER_InputThrottleSignal>:

/**To be called by motor control protocol**/
/**Before running the Main Task, please verify this function carefully**/
/*Input some dummy commands -> check it*/
void ESCOOTER_InputThrottleSignal(int16_t targetCurrent)
{
 8005760:	b510      	push	{r4, lr}
	inputHandle.TARGET_IQ = targetCurrent;
 8005762:	4c07      	ldr	r4, [pc, #28]	; (8005780 <ESCOOTER_InputThrottleSignal+0x20>)
{
 8005764:	4603      	mov	r3, r0

	/*to give the message if the throttle is pressed or not ! */
	tempHandle.THROTTLE_Pressed = ESCOOTER_ThrottleSignalTrigger(&inputHandle);
 8005766:	4620      	mov	r0, r4
	inputHandle.TARGET_IQ = targetCurrent;
 8005768:	8023      	strh	r3, [r4, #0]
	tempHandle.THROTTLE_Pressed = ESCOOTER_ThrottleSignalTrigger(&inputHandle);
 800576a:	f7ff fecb 	bl	8005504 <ESCOOTER_ThrottleSignalTrigger>
 800576e:	4b05      	ldr	r3, [pc, #20]	; (8005784 <ESCOOTER_InputThrottleSignal+0x24>)
 8005770:	4602      	mov	r2, r0

	/*Send the Iq signal to the ESCOOTER_DRIVING (?)*/
	ESCOOTER_Set_Limit(&inputHandle);
 8005772:	4620      	mov	r0, r4

}
 8005774:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tempHandle.THROTTLE_Pressed = ESCOOTER_ThrottleSignalTrigger(&inputHandle);
 8005778:	709a      	strb	r2, [r3, #2]
	ESCOOTER_Set_Limit(&inputHandle);
 800577a:	f7ff bed5 	b.w	8005528 <ESCOOTER_Set_Limit>
 800577e:	bf00      	nop
 8005780:	20000c94 	.word	0x20000c94
 8005784:	20000cb4 	.word	0x20000cb4

08005788 <ESCOOTER_SendReportStatus>:

void ESCOOTER_SendReportStatus(bool error)
{
	tempHandle.systemError = error;
 8005788:	4b01      	ldr	r3, [pc, #4]	; (8005790 <ESCOOTER_SendReportStatus+0x8>)
 800578a:	7158      	strb	r0, [r3, #5]
}
 800578c:	4770      	bx	lr
 800578e:	bf00      	nop
 8005790:	20000cb4 	.word	0x20000cb4

08005794 <ESCOOTER_GetReportStatus>:

bool ESCOOTER_GetReportStatus()
{
    return tempHandle.systemError;
 8005794:	4b01      	ldr	r3, [pc, #4]	; (800579c <ESCOOTER_GetReportStatus+0x8>)
}
 8005796:	7958      	ldrb	r0, [r3, #5]
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop
 800579c:	20000cb4 	.word	0x20000cb4

080057a0 <ESCOOTER_UpdateDrivingState>:

void ESCOOTER_UpdateDrivingState(uint8_t state)
{
     tempHandle.bDrivingState = state;
 80057a0:	4b01      	ldr	r3, [pc, #4]	; (80057a8 <ESCOOTER_UpdateDrivingState+0x8>)
 80057a2:	7018      	strb	r0, [r3, #0]
}
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop
 80057a8:	20000cb4 	.word	0x20000cb4

080057ac <ESCOOTER_StateMachineHighFrequencyTask>:
/**Control The E-Scooter's Main Task**/
/*Please check all the functionalities e.g. brake,throttle,parameter inputs carefully before running the High Frequency Task*/
/*Input some dummy commands -> check it*/
uint16_t error = 0;
__weak void ESCOOTER_StateMachineHighFrequencyTask(void const *argument)
{
 80057ac:	b508      	push	{r3, lr}
     for(;;)
     {
    	 ESCOOTER_saveStatus(DRIVING_START);
 80057ae:	2001      	movs	r0, #1
 80057b0:	f7ff feae 	bl	8005510 <ESCOOTER_saveStatus>
	if(ESCOOTER_getStatus() == DRIVING_IDLE)
 80057b4:	f7ff feb2 	bl	800551c <ESCOOTER_getStatus>
 80057b8:	b158      	cbz	r0, 80057d2 <ESCOOTER_StateMachineHighFrequencyTask+0x26>
	else if (ESCOOTER_getStatus() == DRIVING_START)
 80057ba:	f7ff feaf 	bl	800551c <ESCOOTER_getStatus>
 80057be:	2801      	cmp	r0, #1
 80057c0:	d00a      	beq.n	80057d8 <ESCOOTER_StateMachineHighFrequencyTask+0x2c>
	else if(ESCOOTER_getStatus() == DRIVING_STOP)
 80057c2:	f7ff feab 	bl	800551c <ESCOOTER_getStatus>
 80057c6:	2802      	cmp	r0, #2
 80057c8:	d003      	beq.n	80057d2 <ESCOOTER_StateMachineHighFrequencyTask+0x26>
	else if(ESCOOTER_getStatus() == EMERGENCY_STOP)
 80057ca:	f7ff fea7 	bl	800551c <ESCOOTER_getStatus>
 80057ce:	2803      	cmp	r0, #3
 80057d0:	d1ed      	bne.n	80057ae <ESCOOTER_StateMachineHighFrequencyTask+0x2>
		ESCOOTER_Driving_Stop();
 80057d2:	f7ff ff99 	bl	8005708 <ESCOOTER_Driving_Stop>
 80057d6:	e7ea      	b.n	80057ae <ESCOOTER_StateMachineHighFrequencyTask+0x2>
		ESCOOTER_Driving_Start();
 80057d8:	f7ff ff12 	bl	8005600 <ESCOOTER_Driving_Start>
 80057dc:	e7e7      	b.n	80057ae <ESCOOTER_StateMachineHighFrequencyTask+0x2>
 80057de:	bf00      	nop

080057e0 <ESCOOTER_ParameterMonitoring>:
/*Input some dummy commands -> check it*/
/*It's better to call this task regularly with specific time interval*/
uint16_t timer_interval = PERIODIC_CAPTURE_TIME;
uint16_t task_Counter = 0;
void ESCOOTER_ParameterMonitoring(void const *argument)
{
 80057e0:	b500      	push	{lr}
    for(;;)
    {
    	/*Sample it in every 100 ms*/
    	if((task_Counter % 2) == 0)
 80057e2:	4e10      	ldr	r6, [pc, #64]	; (8005824 <ESCOOTER_ParameterMonitoring+0x44>)
 80057e4:	4c10      	ldr	r4, [pc, #64]	; (8005828 <ESCOOTER_ParameterMonitoring+0x48>)
 80057e6:	8833      	ldrh	r3, [r6, #0]
{
 80057e8:	b085      	sub	sp, #20
 80057ea:	466d      	mov	r5, sp
    	if((task_Counter % 2) == 0)
 80057ec:	07db      	lsls	r3, r3, #31
    	{
        	pstateHandle = ESCOOTER_PhysicalParameterMonitoring(&pstateHandle);
 80057ee:	4621      	mov	r1, r4
 80057f0:	4628      	mov	r0, r5
    	if((task_Counter % 2) == 0)
 80057f2:	d40e      	bmi.n	8005812 <ESCOOTER_ParameterMonitoring+0x32>
        	pstateHandle = ESCOOTER_PhysicalParameterMonitoring(&pstateHandle);
 80057f4:	f000 f844 	bl	8005880 <ESCOOTER_PhysicalParameterMonitoring>
 80057f8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80057fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        	ESCOOTER_Set_PhysicalParam(&pstateHandle);
 8005800:	4620      	mov	r0, r4
 8005802:	f7ff fe9b 	bl	800553c <ESCOOTER_Set_PhysicalParam>
        	ESCOOTER_Get_Speed();
 8005806:	f7ff fea3 	bl	8005550 <ESCOOTER_Get_Speed>
        	ESCOOTER_Get_PhaseCurrent();
 800580a:	f7ff fead 	bl	8005568 <ESCOOTER_Get_PhaseCurrent>
        	ESCOOTER_Get_PhaseVoltage();
 800580e:	f7ff fecf 	bl	80055b0 <ESCOOTER_Get_PhaseVoltage>
        	/*If there are any faults detected, the monitor must report the errors by calling ESCOOTER_SendReportStatus() !! */
    	}
    	osDelay(PERIODIC_CAPTURE_TIME);
 8005812:	2064      	movs	r0, #100	; 0x64
 8005814:	f000 f948 	bl	8005aa8 <osDelay>
    	task_Counter ++;
 8005818:	8833      	ldrh	r3, [r6, #0]
 800581a:	3301      	adds	r3, #1
 800581c:	b29b      	uxth	r3, r3
 800581e:	8033      	strh	r3, [r6, #0]
    	if((task_Counter % 2) == 0)
 8005820:	e7e4      	b.n	80057ec <ESCOOTER_ParameterMonitoring+0xc>
 8005822:	bf00      	nop
 8005824:	20000cb0 	.word	0x20000cb0
 8005828:	20000ca0 	.word	0x20000ca0

0800582c <ESCOOTER_Stop_Driving_Task>:
    }
}

void ESCOOTER_Stop_Driving_Task()
{
 800582c:	b538      	push	{r3, r4, r5, lr}
	/*Failure occurs when the E-Scooter is in operation*/
	if((ESCOOTER_getStatus() == DRIVING_START) && (tempHandle.ESCOOTER_MOVE == true))
 800582e:	f7ff fe75 	bl	800551c <ESCOOTER_getStatus>
 8005832:	2801      	cmp	r0, #1
 8005834:	d102      	bne.n	800583c <ESCOOTER_Stop_Driving_Task+0x10>
 8005836:	4c0d      	ldr	r4, [pc, #52]	; (800586c <ESCOOTER_Stop_Driving_Task+0x40>)
 8005838:	7923      	ldrb	r3, [r4, #4]
 800583a:	b91b      	cbnz	r3, 8005844 <ESCOOTER_Stop_Driving_Task+0x18>
		ESCOOTER_Driving_Stop();
	}
	else if (ESCOOTER_getStatus() == DRIVING_IDLE)
	{
	}
}
 800583c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	else if (ESCOOTER_getStatus() == DRIVING_IDLE)
 8005840:	f7ff be6c 	b.w	800551c <ESCOOTER_getStatus>
		failure = 1;
 8005844:	4a0a      	ldr	r2, [pc, #40]	; (8005870 <ESCOOTER_Stop_Driving_Task+0x44>)
		tempHandle.bDrivingState = DRIVING_STOP;
 8005846:	2302      	movs	r3, #2
		tempHandle.BRAKE_Trigger = false;
 8005848:	2500      	movs	r5, #0
		failure = 1;
 800584a:	7010      	strb	r0, [r2, #0]
		ESCOOTER_saveStatus(tempHandle.bDrivingState);
 800584c:	4618      	mov	r0, r3
		tempHandle.bDrivingState = DRIVING_STOP;
 800584e:	7023      	strb	r3, [r4, #0]
		tempHandle.BRAKE_Trigger = false;
 8005850:	f8a4 5001 	strh.w	r5, [r4, #1]
		ESCOOTER_saveStatus(tempHandle.bDrivingState);
 8005854:	f7ff fe5c 	bl	8005510 <ESCOOTER_saveStatus>
		HAL_Delay(1500);
 8005858:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800585c:	f7fe f86c 	bl	8003938 <HAL_Delay>
		tempHandle.bDrivingState = DRIVING_IDLE;
 8005860:	7025      	strb	r5, [r4, #0]
}
 8005862:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ESCOOTER_Driving_Stop();
 8005866:	f7ff bf4f 	b.w	8005708 <ESCOOTER_Driving_Stop>
 800586a:	bf00      	nop
 800586c:	20000cb4 	.word	0x20000cb4
 8005870:	20000c90 	.word	0x20000c90

08005874 <ESCOOTER_PhysicalParameterInit>:
#include "mc_api.h"
#include "main.h"

void ESCOOTER_PhysicalParameterInit(ESCOOTER_Physical_State_t *stateHandle)
{
	stateHandle->current_speed  = 0;
 8005874:	2300      	movs	r3, #0
	stateHandle->phase_current  = 0;
	stateHandle->phase_voltage  = 0;
	stateHandle->motor_status   = 0;
	stateHandle->error_status   = 0;
 8005876:	e9c0 3302 	strd	r3, r3, [r0, #8]
	stateHandle->current_speed  = 0;
 800587a:	6003      	str	r3, [r0, #0]
	stateHandle->phase_voltage  = 0;
 800587c:	8083      	strh	r3, [r0, #4]
	stateHandle->previous_error = 0;
}
 800587e:	4770      	bx	lr

08005880 <ESCOOTER_PhysicalParameterMonitoring>:
 * Software Error:                 0x0080u
 *
 *
 */
ESCOOTER_Physical_State_t ESCOOTER_PhysicalParameterMonitoring(ESCOOTER_Physical_State_t *stateHandle)
{
 8005880:	b538      	push	{r3, r4, r5, lr}
 8005882:	460c      	mov	r4, r1
 8005884:	4605      	mov	r5, r0
	/*You could test it by inputing dummy data */
    stateHandle->current_speed  = MC_GetMecSpeedAverageMotor1();
 8005886:	f7fb fceb 	bl	8001260 <MC_GetMecSpeedAverageMotor1>
 800588a:	8020      	strh	r0, [r4, #0]
    stateHandle->phase_current  = MC_GetPhaseCurrentAmplitudeMotor1();
 800588c:	f7fb fcee 	bl	800126c <MC_GetPhaseCurrentAmplitudeMotor1>
 8005890:	8060      	strh	r0, [r4, #2]
    stateHandle->phase_voltage  = MC_GetPhaseVoltageAmplitudeMotor1();
 8005892:	f7fb fcf1 	bl	8001278 <MC_GetPhaseVoltageAmplitudeMotor1>
 8005896:	80a0      	strh	r0, [r4, #4]
    stateHandle->motor_status   = (int32_t)MC_GetSTMStateMotor1();
 8005898:	f7fb fd00 	bl	800129c <MC_GetSTMStateMotor1>
 800589c:	60a0      	str	r0, [r4, #8]
    stateHandle->error_status   = MC_GetCurrentFaultsMotor1();
 800589e:	f7fb fcf7 	bl	8001290 <MC_GetCurrentFaultsMotor1>
 80058a2:	81a0      	strh	r0, [r4, #12]
    stateHandle->previous_error = MC_GetOccurredFaultsMotor1();
 80058a4:	f7fb fcee 	bl	8001284 <MC_GetOccurredFaultsMotor1>
 80058a8:	81e0      	strh	r0, [r4, #14]
    return *stateHandle;
 80058aa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80058ae:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 80058b2:	4628      	mov	r0, r5
 80058b4:	bd38      	pop	{r3, r4, r5, pc}
 80058b6:	bf00      	nop

080058b8 <ESCOOTER_DrivingModeSetDefault>:
EScooter_Driving_Mode_t driving_mode;

/*Static + Default*/
void ESCOOTER_DrivingModeSetDefault(ESCOOTER_BrakeANDThrottleInput_t *limit)
{
   limit->TARGET_IQ = 0;
 80058b8:	f04f 5c7a 	mov.w	ip, #1048576000	; 0x3e800000
   limit->IQ_LIMIT = 16000;
   limit->SPEED_LIMIT = 663;
 80058bc:	f240 2197 	movw	r1, #663	; 0x297
   limit->RAMP_DURATION = 2000;
 80058c0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   limit->TARGET_IQ = 0;
 80058c4:	f8c0 c000 	str.w	ip, [r0]
   limit->SPEED_LIMIT = 663;
 80058c8:	8081      	strh	r1, [r0, #4]
   limit->RAMP_DURATION = 2000;
 80058ca:	80c2      	strh	r2, [r0, #6]
   ESCOOTER_Set_Limit(limit);
 80058cc:	f7ff be2c 	b.w	8005528 <ESCOOTER_Set_Limit>

080058d0 <ESCOOTER_ConfigDrivingMode>:
}

/*Dynamic*/
void ESCOOTER_ConfigDrivingMode(ESCOOTER_BrakeANDThrottleInput_t *limit,int16_t max_IQ, int16_t allowable_rpm, uint16_t acceleration_ramp)
{
 80058d0:	b500      	push	{lr}
{
	int16_t max_Current[3] = {10400,12800,16000};
	int16_t max_RPM[3]     = {270,480,663};
	int16_t max_Ramp[3]    = {3000,2250,1500};

	if ( ((limit->IQ_LIMIT) == max_Current[0]) && ((limit->SPEED_LIMIT) == max_RPM[0]) && ((limit->RAMP_DURATION) == max_Ramp[0]) )
 80058d2:	f642 0ea0 	movw	lr, #10400	; 0x28a0
	limit->TARGET_IQ = 0;
 80058d6:	f04f 0c00 	mov.w	ip, #0
	if ( ((limit->IQ_LIMIT) == max_Current[0]) && ((limit->SPEED_LIMIT) == max_RPM[0]) && ((limit->RAMP_DURATION) == max_Ramp[0]) )
 80058da:	4571      	cmp	r1, lr
	limit->TARGET_IQ = 0;
 80058dc:	f8a0 c000 	strh.w	ip, [r0]
	limit->IQ_LIMIT = max_IQ;
 80058e0:	8041      	strh	r1, [r0, #2]
	limit->SPEED_LIMIT = allowable_rpm;
 80058e2:	8082      	strh	r2, [r0, #4]
	limit->RAMP_DURATION = acceleration_ramp;
 80058e4:	80c3      	strh	r3, [r0, #6]
	if ( ((limit->IQ_LIMIT) == max_Current[0]) && ((limit->SPEED_LIMIT) == max_RPM[0]) && ((limit->RAMP_DURATION) == max_Ramp[0]) )
 80058e6:	d018      	beq.n	800591a <ESCOOTER_ConfigDrivingMode+0x4a>
	{
       driving_mode = BRAKE_AND_THROTTLE_SPEED_MODE_AMBLE;
	}
	else if ( ((limit->IQ_LIMIT) == max_Current[1]) && ((limit->SPEED_LIMIT) == max_RPM[1]) && ((limit->RAMP_DURATION) == max_Ramp[1]) )
 80058e8:	f5b1 5f48 	cmp.w	r1, #12800	; 0x3200
 80058ec:	d00a      	beq.n	8005904 <ESCOOTER_ConfigDrivingMode+0x34>
	{
	   driving_mode = BRAKE_AND_THROTTLE_SPEED_MODE_LEISURE;
	}
	else if ( ((limit->IQ_LIMIT) == max_Current[2]) && ((limit->SPEED_LIMIT) == max_RPM[2]) && ((limit->RAMP_DURATION) == max_Ramp[2]) )
 80058ee:	f5b1 5f7a 	cmp.w	r1, #16000	; 0x3e80
 80058f2:	d103      	bne.n	80058fc <ESCOOTER_ConfigDrivingMode+0x2c>
 80058f4:	f240 2197 	movw	r1, #663	; 0x297
 80058f8:	428a      	cmp	r2, r1
 80058fa:	d019      	beq.n	8005930 <ESCOOTER_ConfigDrivingMode+0x60>
}
 80058fc:	f85d eb04 	ldr.w	lr, [sp], #4
	ESCOOTER_Set_Limit(limit);
 8005900:	f7ff be12 	b.w	8005528 <ESCOOTER_Set_Limit>
	else if ( ((limit->IQ_LIMIT) == max_Current[1]) && ((limit->SPEED_LIMIT) == max_RPM[1]) && ((limit->RAMP_DURATION) == max_Ramp[1]) )
 8005904:	f5b2 7ff0 	cmp.w	r2, #480	; 0x1e0
 8005908:	d1f8      	bne.n	80058fc <ESCOOTER_ConfigDrivingMode+0x2c>
 800590a:	f640 02ca 	movw	r2, #2250	; 0x8ca
 800590e:	4293      	cmp	r3, r2
 8005910:	d1f4      	bne.n	80058fc <ESCOOTER_ConfigDrivingMode+0x2c>
	   driving_mode = BRAKE_AND_THROTTLE_SPEED_MODE_LEISURE;
 8005912:	4b0b      	ldr	r3, [pc, #44]	; (8005940 <ESCOOTER_ConfigDrivingMode+0x70>)
 8005914:	2201      	movs	r2, #1
 8005916:	701a      	strb	r2, [r3, #0]
 8005918:	e7f0      	b.n	80058fc <ESCOOTER_ConfigDrivingMode+0x2c>
	if ( ((limit->IQ_LIMIT) == max_Current[0]) && ((limit->SPEED_LIMIT) == max_RPM[0]) && ((limit->RAMP_DURATION) == max_Ramp[0]) )
 800591a:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
 800591e:	d1ed      	bne.n	80058fc <ESCOOTER_ConfigDrivingMode+0x2c>
 8005920:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8005924:	4293      	cmp	r3, r2
 8005926:	d1e9      	bne.n	80058fc <ESCOOTER_ConfigDrivingMode+0x2c>
       driving_mode = BRAKE_AND_THROTTLE_SPEED_MODE_AMBLE;
 8005928:	4b05      	ldr	r3, [pc, #20]	; (8005940 <ESCOOTER_ConfigDrivingMode+0x70>)
 800592a:	f883 c000 	strb.w	ip, [r3]
 800592e:	e7e5      	b.n	80058fc <ESCOOTER_ConfigDrivingMode+0x2c>
	else if ( ((limit->IQ_LIMIT) == max_Current[2]) && ((limit->SPEED_LIMIT) == max_RPM[2]) && ((limit->RAMP_DURATION) == max_Ramp[2]) )
 8005930:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005934:	4293      	cmp	r3, r2
 8005936:	d1e1      	bne.n	80058fc <ESCOOTER_ConfigDrivingMode+0x2c>
	{
	   driving_mode = BRAKE_AND_THROTTLE_SPEED_MODE_SPORTS;
 8005938:	4b01      	ldr	r3, [pc, #4]	; (8005940 <ESCOOTER_ConfigDrivingMode+0x70>)
 800593a:	2202      	movs	r2, #2
 800593c:	701a      	strb	r2, [r3, #0]
 800593e:	e7dd      	b.n	80058fc <ESCOOTER_ConfigDrivingMode+0x2c>
 8005940:	20000cc0 	.word	0x20000cc0

08005944 <ESCOOTER_DetermineDrivingMode>:
	if ( ((limit->IQ_LIMIT) == max_Current[0]) && ((limit->SPEED_LIMIT) == max_RPM[0]) && ((limit->RAMP_DURATION) == max_Ramp[0]) )
 8005944:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8005948:	f642 02a0 	movw	r2, #10400	; 0x28a0
 800594c:	4293      	cmp	r3, r2
 800594e:	d01a      	beq.n	8005986 <ESCOOTER_DetermineDrivingMode+0x42>
	else if ( ((limit->IQ_LIMIT) == max_Current[1]) && ((limit->SPEED_LIMIT) == max_RPM[1]) && ((limit->RAMP_DURATION) == max_Ramp[1]) )
 8005950:	f5b3 5f48 	cmp.w	r3, #12800	; 0x3200
 8005954:	d009      	beq.n	800596a <ESCOOTER_DetermineDrivingMode+0x26>
	else if ( ((limit->IQ_LIMIT) == max_Current[2]) && ((limit->SPEED_LIMIT) == max_RPM[2]) && ((limit->RAMP_DURATION) == max_Ramp[2]) )
 8005956:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800595a:	d105      	bne.n	8005968 <ESCOOTER_DetermineDrivingMode+0x24>
 800595c:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8005960:	f240 2397 	movw	r3, #663	; 0x297
 8005964:	429a      	cmp	r2, r3
 8005966:	d01c      	beq.n	80059a2 <ESCOOTER_DetermineDrivingMode+0x5e>
	}
	else
	{
		driving_mode = driving_mode;
	}
}
 8005968:	4770      	bx	lr
	else if ( ((limit->IQ_LIMIT) == max_Current[1]) && ((limit->SPEED_LIMIT) == max_RPM[1]) && ((limit->RAMP_DURATION) == max_Ramp[1]) )
 800596a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800596e:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8005972:	d1f9      	bne.n	8005968 <ESCOOTER_DetermineDrivingMode+0x24>
 8005974:	88c2      	ldrh	r2, [r0, #6]
 8005976:	f640 03ca 	movw	r3, #2250	; 0x8ca
 800597a:	429a      	cmp	r2, r3
 800597c:	d1f4      	bne.n	8005968 <ESCOOTER_DetermineDrivingMode+0x24>
	   driving_mode = BRAKE_AND_THROTTLE_SPEED_MODE_LEISURE;
 800597e:	4b0d      	ldr	r3, [pc, #52]	; (80059b4 <ESCOOTER_DetermineDrivingMode+0x70>)
 8005980:	2201      	movs	r2, #1
 8005982:	701a      	strb	r2, [r3, #0]
 8005984:	4770      	bx	lr
	if ( ((limit->IQ_LIMIT) == max_Current[0]) && ((limit->SPEED_LIMIT) == max_RPM[0]) && ((limit->RAMP_DURATION) == max_Ramp[0]) )
 8005986:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800598a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800598e:	d1eb      	bne.n	8005968 <ESCOOTER_DetermineDrivingMode+0x24>
 8005990:	88c2      	ldrh	r2, [r0, #6]
 8005992:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8005996:	429a      	cmp	r2, r3
 8005998:	d1e6      	bne.n	8005968 <ESCOOTER_DetermineDrivingMode+0x24>
       driving_mode = BRAKE_AND_THROTTLE_SPEED_MODE_AMBLE;
 800599a:	4b06      	ldr	r3, [pc, #24]	; (80059b4 <ESCOOTER_DetermineDrivingMode+0x70>)
 800599c:	2200      	movs	r2, #0
 800599e:	701a      	strb	r2, [r3, #0]
 80059a0:	4770      	bx	lr
	else if ( ((limit->IQ_LIMIT) == max_Current[2]) && ((limit->SPEED_LIMIT) == max_RPM[2]) && ((limit->RAMP_DURATION) == max_Ramp[2]) )
 80059a2:	88c2      	ldrh	r2, [r0, #6]
 80059a4:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d1dd      	bne.n	8005968 <ESCOOTER_DetermineDrivingMode+0x24>
	   driving_mode = BRAKE_AND_THROTTLE_SPEED_MODE_SPORTS;
 80059ac:	4b01      	ldr	r3, [pc, #4]	; (80059b4 <ESCOOTER_DetermineDrivingMode+0x70>)
 80059ae:	2202      	movs	r2, #2
 80059b0:	701a      	strb	r2, [r3, #0]
}
 80059b2:	e7d9      	b.n	8005968 <ESCOOTER_DetermineDrivingMode+0x24>
 80059b4:	20000cc0 	.word	0x20000cc0

080059b8 <ESCOOTER_init>:
osThreadId EScooterMonitorHandle;


__weak void ESCOOTER_init()
{
   ESboot();
 80059b8:	f7ff beac 	b.w	8005714 <ESboot>

080059bc <ESCOOTER_RunCoreTask>:
}

__weak void ESCOOTER_RunCoreTask(void)
{
 80059bc:	b510      	push	{r4, lr}
	/*Controls the E-Scooter's main operation*/
    osThreadDef(stateMachine,ESCOOTER_StateMachineHighFrequencyTask,osPriorityBelowNormal,0,128);
 80059be:	4c12      	ldr	r4, [pc, #72]	; (8005a08 <ESCOOTER_RunCoreTask+0x4c>)
 80059c0:	46a6      	mov	lr, r4
 80059c2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
{
 80059c6:	b08e      	sub	sp, #56	; 0x38
    osThreadDef(stateMachine,ESCOOTER_StateMachineHighFrequencyTask,osPriorityBelowNormal,0,128);
 80059c8:	46ec      	mov	ip, sp
 80059ca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80059ce:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80059d2:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    EScooterStateMachineHandle = osThreadCreate(osThread(stateMachine), NULL);
 80059d6:	2100      	movs	r1, #0
 80059d8:	4668      	mov	r0, sp
 80059da:	f000 f833 	bl	8005a44 <osThreadCreate>
 80059de:	4b0b      	ldr	r3, [pc, #44]	; (8005a0c <ESCOOTER_RunCoreTask+0x50>)

    /*Might be it's not necessary (?) */
    osThreadDef(motorParameter,ESCOOTER_ParameterMonitoring,osPriorityBelowNormal,0,128);
 80059e0:	f104 0c1c 	add.w	ip, r4, #28
    EScooterStateMachineHandle = osThreadCreate(osThread(stateMachine), NULL);
 80059e4:	6018      	str	r0, [r3, #0]
    osThreadDef(motorParameter,ESCOOTER_ParameterMonitoring,osPriorityBelowNormal,0,128);
 80059e6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80059ea:	ac07      	add	r4, sp, #28
 80059ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80059ee:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80059f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    EScooterMonitorHandle = osThreadCreate(osThread(motorParameter), NULL);
 80059f6:	2100      	movs	r1, #0
 80059f8:	a807      	add	r0, sp, #28
 80059fa:	f000 f823 	bl	8005a44 <osThreadCreate>
 80059fe:	4b04      	ldr	r3, [pc, #16]	; (8005a10 <ESCOOTER_RunCoreTask+0x54>)
 8005a00:	6018      	str	r0, [r3, #0]

}
 8005a02:	b00e      	add	sp, #56	; 0x38
 8005a04:	bd10      	pop	{r4, pc}
 8005a06:	bf00      	nop
 8005a08:	08009028 	.word	0x08009028
 8005a0c:	20000cc8 	.word	0x20000cc8
 8005a10:	20000cc4 	.word	0x20000cc4

08005a14 <ESCOOTER_StopCoreTask>:

__weak void ESCOOTER_StopCoreTask(void)
{
 8005a14:	b508      	push	{r3, lr}
    /*Stops the E-Scooter's main application*/
	ESCOOTER_Stop_Driving_Task();
 8005a16:	f7ff ff09 	bl	800582c <ESCOOTER_Stop_Driving_Task>
	vTaskSuspend(EScooterStateMachineHandle);
 8005a1a:	4b05      	ldr	r3, [pc, #20]	; (8005a30 <ESCOOTER_StopCoreTask+0x1c>)
 8005a1c:	6818      	ldr	r0, [r3, #0]
 8005a1e:	f000 ffdf 	bl	80069e0 <vTaskSuspend>
	vTaskSuspend(EScooterMonitorHandle);
 8005a22:	4b04      	ldr	r3, [pc, #16]	; (8005a34 <ESCOOTER_StopCoreTask+0x20>)
 8005a24:	6818      	ldr	r0, [r3, #0]
}
 8005a26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	vTaskSuspend(EScooterMonitorHandle);
 8005a2a:	f000 bfd9 	b.w	80069e0 <vTaskSuspend>
 8005a2e:	bf00      	nop
 8005a30:	20000cc8 	.word	0x20000cc8
 8005a34:	20000cc4 	.word	0x20000cc4

08005a38 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005a38:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8005a3a:	f000 fed3 	bl	80067e4 <vTaskStartScheduler>
  
  return osOK;
}
 8005a3e:	2000      	movs	r0, #0
 8005a40:	bd08      	pop	{r3, pc}
 8005a42:	bf00      	nop

08005a44 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005a44:	b570      	push	{r4, r5, r6, lr}
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005a46:	6944      	ldr	r4, [r0, #20]
{
 8005a48:	b086      	sub	sp, #24
 8005a4a:	4684      	mov	ip, r0
 8005a4c:	460b      	mov	r3, r1
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005a4e:	b1ac      	cbz	r4, 8005a7c <osThreadCreate+0x38>
 8005a50:	6986      	ldr	r6, [r0, #24]
 8005a52:	b19e      	cbz	r6, 8005a7c <osThreadCreate+0x38>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a54:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8005a58:	f8dc 1000 	ldr.w	r1, [ip]
 8005a5c:	f8dc 2010 	ldr.w	r2, [ip, #16]
 8005a60:	6840      	ldr	r0, [r0, #4]
  if (priority != osPriorityError) {
 8005a62:	f1be 0f84 	cmp.w	lr, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8005a66:	bf14      	ite	ne
 8005a68:	f10e 0503 	addne.w	r5, lr, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005a6c:	2500      	moveq	r5, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a6e:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8005a72:	9500      	str	r5, [sp, #0]
 8005a74:	f000 fe1a 	bl	80066ac <xTaskCreateStatic>
    return NULL;
  }     
#endif
  
  return handle;
}
 8005a78:	b006      	add	sp, #24
 8005a7a:	bd70      	pop	{r4, r5, r6, pc}
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a7c:	f9bc 4008 	ldrsh.w	r4, [ip, #8]
 8005a80:	f8bc 2010 	ldrh.w	r2, [ip, #16]
  if (priority != osPriorityError) {
 8005a84:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8005a86:	bf14      	ite	ne
 8005a88:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005a8a:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a8c:	e9dc 1000 	ldrd	r1, r0, [ip]
 8005a90:	9400      	str	r4, [sp, #0]
 8005a92:	ac05      	add	r4, sp, #20
 8005a94:	9401      	str	r4, [sp, #4]
 8005a96:	f000 fe43 	bl	8006720 <xTaskCreate>
 8005a9a:	2801      	cmp	r0, #1
  return handle;
 8005a9c:	bf0c      	ite	eq
 8005a9e:	9805      	ldreq	r0, [sp, #20]
      return NULL;
 8005aa0:	2000      	movne	r0, #0
}
 8005aa2:	b006      	add	sp, #24
 8005aa4:	bd70      	pop	{r4, r5, r6, pc}
 8005aa6:	bf00      	nop

08005aa8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005aa8:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005aaa:	2801      	cmp	r0, #1
 8005aac:	bf38      	it	cc
 8005aae:	2001      	movcc	r0, #1
 8005ab0:	f000 fe68 	bl	8006784 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005ab4:	2000      	movs	r0, #0
 8005ab6:	bd08      	pop	{r3, pc}

08005ab8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005abc:	4606      	mov	r6, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
 8005abe:	f000 ff29 	bl	8006914 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005ac2:	4b52      	ldr	r3, [pc, #328]	; (8005c0c <pvPortMalloc+0x154>)
 8005ac4:	681d      	ldr	r5, [r3, #0]
 8005ac6:	2d00      	cmp	r5, #0
 8005ac8:	d06e      	beq.n	8005ba8 <pvPortMalloc+0xf0>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005aca:	4b51      	ldr	r3, [pc, #324]	; (8005c10 <pvPortMalloc+0x158>)
 8005acc:	681f      	ldr	r7, [r3, #0]
 8005ace:	423e      	tst	r6, r7
 8005ad0:	d12e      	bne.n	8005b30 <pvPortMalloc+0x78>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005ad2:	b36e      	cbz	r6, 8005b30 <pvPortMalloc+0x78>
			{
				xWantedSize += xHeapStructSize;
 8005ad4:	f106 0408 	add.w	r4, r6, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005ad8:	0776      	lsls	r6, r6, #29
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005ada:	bf1c      	itt	ne
 8005adc:	f024 0407 	bicne.w	r4, r4, #7
 8005ae0:	3408      	addne	r4, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005ae2:	b32c      	cbz	r4, 8005b30 <pvPortMalloc+0x78>
 8005ae4:	f8df c13c 	ldr.w	ip, [pc, #316]	; 8005c24 <pvPortMalloc+0x16c>
 8005ae8:	f8dc 6000 	ldr.w	r6, [ip]
 8005aec:	42a6      	cmp	r6, r4
 8005aee:	d31f      	bcc.n	8005b30 <pvPortMalloc+0x78>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 8005af0:	4848      	ldr	r0, [pc, #288]	; (8005c14 <pvPortMalloc+0x15c>)
 8005af2:	6803      	ldr	r3, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005af4:	e003      	b.n	8005afe <pvPortMalloc+0x46>
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	b122      	cbz	r2, 8005b04 <pvPortMalloc+0x4c>
 8005afa:	4618      	mov	r0, r3
 8005afc:	4613      	mov	r3, r2
 8005afe:	6859      	ldr	r1, [r3, #4]
 8005b00:	42a1      	cmp	r1, r4
 8005b02:	d3f8      	bcc.n	8005af6 <pvPortMalloc+0x3e>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005b04:	42ab      	cmp	r3, r5
 8005b06:	d013      	beq.n	8005b30 <pvPortMalloc+0x78>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005b08:	4698      	mov	r8, r3
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005b0a:	1b0a      	subs	r2, r1, r4
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005b0c:	f858 eb08 	ldr.w	lr, [r8], #8
 8005b10:	f8c0 e000 	str.w	lr, [r0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005b14:	2a10      	cmp	r2, #16
 8005b16:	d929      	bls.n	8005b6c <pvPortMalloc+0xb4>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005b18:	1919      	adds	r1, r3, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b1a:	0748      	lsls	r0, r1, #29
 8005b1c:	d00f      	beq.n	8005b3e <pvPortMalloc+0x86>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b22:	f383 8811 	msr	BASEPRI, r3
 8005b26:	f3bf 8f6f 	isb	sy
 8005b2a:	f3bf 8f4f 	dsb	sy
 8005b2e:	e7fe      	b.n	8005b2e <pvPortMalloc+0x76>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005b30:	f000 fef8 	bl	8006924 <xTaskResumeAll>
 8005b34:	f04f 0800 	mov.w	r8, #0
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
 8005b38:	4640      	mov	r0, r8
 8005b3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005b3e:	604a      	str	r2, [r1, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005b40:	4a34      	ldr	r2, [pc, #208]	; (8005c14 <pvPortMalloc+0x15c>)
						pxBlock->xBlockSize = xWantedSize;
 8005b42:	605c      	str	r4, [r3, #4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005b44:	4614      	mov	r4, r2
 8005b46:	6812      	ldr	r2, [r2, #0]
 8005b48:	4291      	cmp	r1, r2
 8005b4a:	d8fb      	bhi.n	8005b44 <pvPortMalloc+0x8c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005b4c:	6860      	ldr	r0, [r4, #4]
 8005b4e:	eb04 0e00 	add.w	lr, r4, r0
 8005b52:	4571      	cmp	r1, lr
 8005b54:	d04a      	beq.n	8005bec <pvPortMalloc+0x134>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005b56:	f8d1 e004 	ldr.w	lr, [r1, #4]
 8005b5a:	eb01 000e 	add.w	r0, r1, lr
 8005b5e:	4282      	cmp	r2, r0
 8005b60:	d04b      	beq.n	8005bfa <pvPortMalloc+0x142>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005b62:	600a      	str	r2, [r1, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005b64:	428c      	cmp	r4, r1
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005b66:	bf18      	it	ne
 8005b68:	6021      	strne	r1, [r4, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005b6a:	6859      	ldr	r1, [r3, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005b6c:	4a2a      	ldr	r2, [pc, #168]	; (8005c18 <pvPortMalloc+0x160>)
 8005b6e:	6810      	ldr	r0, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005b70:	1a76      	subs	r6, r6, r1
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005b72:	4286      	cmp	r6, r0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005b74:	bf38      	it	cc
 8005b76:	6016      	strcc	r6, [r2, #0]
					xNumberOfSuccessfulAllocations++;
 8005b78:	4a28      	ldr	r2, [pc, #160]	; (8005c1c <pvPortMalloc+0x164>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005b7a:	f8cc 6000 	str.w	r6, [ip]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005b7e:	4339      	orrs	r1, r7
					pxBlock->pxNextFreeBlock = NULL;
 8005b80:	2000      	movs	r0, #0
 8005b82:	e9c3 0100 	strd	r0, r1, [r3]
					xNumberOfSuccessfulAllocations++;
 8005b86:	6813      	ldr	r3, [r2, #0]
 8005b88:	3301      	adds	r3, #1
 8005b8a:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 8005b8c:	f000 feca 	bl	8006924 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b90:	f018 0f07 	tst.w	r8, #7
 8005b94:	d0d0      	beq.n	8005b38 <pvPortMalloc+0x80>
 8005b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b9a:	f383 8811 	msr	BASEPRI, r3
 8005b9e:	f3bf 8f6f 	isb	sy
 8005ba2:	f3bf 8f4f 	dsb	sy
 8005ba6:	e7fe      	b.n	8005ba6 <pvPortMalloc+0xee>
	uxAddress = ( size_t ) ucHeap;
 8005ba8:	491d      	ldr	r1, [pc, #116]	; (8005c20 <pvPortMalloc+0x168>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005baa:	4c19      	ldr	r4, [pc, #100]	; (8005c10 <pvPortMalloc+0x158>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005bac:	074f      	lsls	r7, r1, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005bae:	bf14      	ite	ne
 8005bb0:	1dca      	addne	r2, r1, #7
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005bb2:	460a      	moveq	r2, r1
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005bb4:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
	uxAddress -= xHeapStructSize;
 8005bb8:	f1a1 0508 	sub.w	r5, r1, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005bbc:	f025 0507 	bic.w	r5, r5, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005bc0:	bf18      	it	ne
 8005bc2:	f022 0207 	bicne.w	r2, r2, #7
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005bc6:	4914      	ldr	r1, [pc, #80]	; (8005c18 <pvPortMalloc+0x160>)
	pxEnd = ( void * ) uxAddress;
 8005bc8:	601d      	str	r5, [r3, #0]
	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005bca:	4610      	mov	r0, r2
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005bcc:	1aab      	subs	r3, r5, r2
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005bce:	4a15      	ldr	r2, [pc, #84]	; (8005c24 <pvPortMalloc+0x16c>)
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005bd0:	600b      	str	r3, [r1, #0]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005bd2:	4910      	ldr	r1, [pc, #64]	; (8005c14 <pvPortMalloc+0x15c>)
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005bd4:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005bd6:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
	xStart.xBlockSize = ( size_t ) 0;
 8005bda:	2200      	movs	r2, #0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005bdc:	6008      	str	r0, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005bde:	604a      	str	r2, [r1, #4]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005be0:	6027      	str	r7, [r4, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8005be2:	e9c5 2200 	strd	r2, r2, [r5]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005be6:	e9c0 5300 	strd	r5, r3, [r0]
}
 8005bea:	e770      	b.n	8005ace <pvPortMalloc+0x16>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005bec:	6849      	ldr	r1, [r1, #4]
 8005bee:	eb00 0e01 	add.w	lr, r0, r1
 8005bf2:	f8c4 e004 	str.w	lr, [r4, #4]
		pxBlockToInsert = pxIterator;
 8005bf6:	4621      	mov	r1, r4
 8005bf8:	e7af      	b.n	8005b5a <pvPortMalloc+0xa2>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005bfa:	42aa      	cmp	r2, r5
 8005bfc:	d0b1      	beq.n	8005b62 <pvPortMalloc+0xaa>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005bfe:	6850      	ldr	r0, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005c00:	6812      	ldr	r2, [r2, #0]
 8005c02:	600a      	str	r2, [r1, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005c04:	4470      	add	r0, lr
 8005c06:	6048      	str	r0, [r1, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005c08:	e7ac      	b.n	8005b64 <pvPortMalloc+0xac>
 8005c0a:	bf00      	nop
 8005c0c:	20000ccc 	.word	0x20000ccc
 8005c10:	200048d0 	.word	0x200048d0
 8005c14:	200048e4 	.word	0x200048e4
 8005c18:	200048d8 	.word	0x200048d8
 8005c1c:	200048dc 	.word	0x200048dc
 8005c20:	20000cd0 	.word	0x20000cd0
 8005c24:	200048d4 	.word	0x200048d4

08005c28 <vPortFree>:
	if( pv != NULL )
 8005c28:	b1d0      	cbz	r0, 8005c60 <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005c2a:	4a2b      	ldr	r2, [pc, #172]	; (8005cd8 <vPortFree+0xb0>)
 8005c2c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8005c30:	6812      	ldr	r2, [r2, #0]
 8005c32:	4213      	tst	r3, r2
 8005c34:	d00b      	beq.n	8005c4e <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005c36:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8005c3a:	b191      	cbz	r1, 8005c62 <vPortFree+0x3a>
 8005c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c40:	f383 8811 	msr	BASEPRI, r3
 8005c44:	f3bf 8f6f 	isb	sy
 8005c48:	f3bf 8f4f 	dsb	sy
 8005c4c:	e7fe      	b.n	8005c4c <vPortFree+0x24>
 8005c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c52:	f383 8811 	msr	BASEPRI, r3
 8005c56:	f3bf 8f6f 	isb	sy
 8005c5a:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005c5e:	e7fe      	b.n	8005c5e <vPortFree+0x36>
 8005c60:	4770      	bx	lr
{
 8005c62:	b510      	push	{r4, lr}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005c64:	ea23 0302 	bic.w	r3, r3, r2
{
 8005c68:	b082      	sub	sp, #8
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005c6a:	f840 3c04 	str.w	r3, [r0, #-4]
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005c6e:	4c1b      	ldr	r4, [pc, #108]	; (8005cdc <vPortFree+0xb4>)
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005c70:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
 8005c72:	f000 fe4f 	bl	8006914 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005c76:	9801      	ldr	r0, [sp, #4]
 8005c78:	6822      	ldr	r2, [r4, #0]
 8005c7a:	f850 1c04 	ldr.w	r1, [r0, #-4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005c7e:	4b18      	ldr	r3, [pc, #96]	; (8005ce0 <vPortFree+0xb8>)
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005c80:	440a      	add	r2, r1
		puc -= xHeapStructSize;
 8005c82:	3808      	subs	r0, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005c84:	6022      	str	r2, [r4, #0]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005c86:	461a      	mov	r2, r3
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4298      	cmp	r0, r3
 8005c8c:	d8fb      	bhi.n	8005c86 <vPortFree+0x5e>
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005c8e:	6854      	ldr	r4, [r2, #4]
 8005c90:	eb02 0e04 	add.w	lr, r2, r4
 8005c94:	4570      	cmp	r0, lr
 8005c96:	d01a      	beq.n	8005cce <vPortFree+0xa6>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005c98:	eb00 0c01 	add.w	ip, r0, r1
 8005c9c:	4563      	cmp	r3, ip
 8005c9e:	d00c      	beq.n	8005cba <vPortFree+0x92>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005ca0:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 8005ca2:	4282      	cmp	r2, r0
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005ca4:	bf18      	it	ne
 8005ca6:	6010      	strne	r0, [r2, #0]
					xNumberOfSuccessfulFrees++;
 8005ca8:	4a0e      	ldr	r2, [pc, #56]	; (8005ce4 <vPortFree+0xbc>)
 8005caa:	6813      	ldr	r3, [r2, #0]
 8005cac:	3301      	adds	r3, #1
 8005cae:	6013      	str	r3, [r2, #0]
}
 8005cb0:	b002      	add	sp, #8
 8005cb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8005cb6:	f000 be35 	b.w	8006924 <xTaskResumeAll>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005cba:	4c0b      	ldr	r4, [pc, #44]	; (8005ce8 <vPortFree+0xc0>)
 8005cbc:	6824      	ldr	r4, [r4, #0]
 8005cbe:	42a3      	cmp	r3, r4
 8005cc0:	d0ee      	beq.n	8005ca0 <vPortFree+0x78>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005cc2:	e9d3 3400 	ldrd	r3, r4, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005cc6:	4421      	add	r1, r4
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005cc8:	e9c0 3100 	strd	r3, r1, [r0]
 8005ccc:	e7e9      	b.n	8005ca2 <vPortFree+0x7a>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005cce:	4421      	add	r1, r4
 8005cd0:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 8005cd2:	4610      	mov	r0, r2
 8005cd4:	e7e0      	b.n	8005c98 <vPortFree+0x70>
 8005cd6:	bf00      	nop
 8005cd8:	200048d0 	.word	0x200048d0
 8005cdc:	200048d4 	.word	0x200048d4
 8005ce0:	200048e4 	.word	0x200048e4
 8005ce4:	200048e0 	.word	0x200048e0
 8005ce8:	20000ccc 	.word	0x20000ccc

08005cec <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005cec:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005cf0:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005cf4:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005cf6:	e9c0 3101 	strd	r3, r1, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005cfa:	e9c0 3303 	strd	r3, r3, [r0, #12]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005cfe:	6002      	str	r2, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005d00:	4770      	bx	lr
 8005d02:	bf00      	nop

08005d04 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005d04:	2300      	movs	r3, #0
 8005d06:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005d08:	4770      	bx	lr
 8005d0a:	bf00      	nop

08005d0c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8005d0c:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005d0e:	689a      	ldr	r2, [r3, #8]
 8005d10:	608a      	str	r2, [r1, #8]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8005d12:	6802      	ldr	r2, [r0, #0]
{
 8005d14:	b410      	push	{r4}
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005d16:	689c      	ldr	r4, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8005d18:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 8005d1a:	3201      	adds	r2, #1
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005d1c:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005d1e:	6099      	str	r1, [r3, #8]
}
 8005d20:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 8005d24:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8005d26:	6002      	str	r2, [r0, #0]
}
 8005d28:	4770      	bx	lr
 8005d2a:	bf00      	nop

08005d2c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d2c:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005d2e:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005d30:	1c6b      	adds	r3, r5, #1
 8005d32:	d010      	beq.n	8005d56 <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005d34:	f100 0308 	add.w	r3, r0, #8
 8005d38:	461c      	mov	r4, r3
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	42aa      	cmp	r2, r5
 8005d40:	d9fa      	bls.n	8005d38 <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8005d42:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8005d44:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 8005d46:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005d48:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005d4a:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8005d4c:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 8005d4e:	6108      	str	r0, [r1, #16]
}
 8005d50:	bc30      	pop	{r4, r5}
	( pxList->uxNumberOfItems )++;
 8005d52:	6002      	str	r2, [r0, #0]
}
 8005d54:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8005d56:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8005d58:	6863      	ldr	r3, [r4, #4]
 8005d5a:	e7f2      	b.n	8005d42 <vListInsert+0x16>

08005d5c <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005d5c:	6903      	ldr	r3, [r0, #16]
{
 8005d5e:	b410      	push	{r4}

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005d60:	e9d0 1201 	ldrd	r1, r2, [r0, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005d64:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005d66:	608a      	str	r2, [r1, #8]
	if( pxList->pxIndex == pxItemToRemove )
 8005d68:	4284      	cmp	r4, r0
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005d6a:	6051      	str	r1, [r2, #4]
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005d6c:	bf08      	it	eq
 8005d6e:	605a      	streq	r2, [r3, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;
 8005d70:	681a      	ldr	r2, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8005d72:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxContainer = NULL;
 8005d76:	2100      	movs	r1, #0
	( pxList->uxNumberOfItems )--;
 8005d78:	3a01      	subs	r2, #1
	pxItemToRemove->pxContainer = NULL;
 8005d7a:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8005d7c:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 8005d7e:	6818      	ldr	r0, [r3, #0]
}
 8005d80:	4770      	bx	lr
 8005d82:	bf00      	nop

08005d84 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005d84:	4808      	ldr	r0, [pc, #32]	; (8005da8 <prvPortStartFirstTask+0x24>)
 8005d86:	6800      	ldr	r0, [r0, #0]
 8005d88:	6800      	ldr	r0, [r0, #0]
 8005d8a:	f380 8808 	msr	MSP, r0
 8005d8e:	f04f 0000 	mov.w	r0, #0
 8005d92:	f380 8814 	msr	CONTROL, r0
 8005d96:	b662      	cpsie	i
 8005d98:	b661      	cpsie	f
 8005d9a:	f3bf 8f4f 	dsb	sy
 8005d9e:	f3bf 8f6f 	isb	sy
 8005da2:	df00      	svc	0
 8005da4:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005da6:	0000      	.short	0x0000
 8005da8:	e000ed08 	.word	0xe000ed08

08005dac <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005dac:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005dbc <vPortEnableVFP+0x10>
 8005db0:	6801      	ldr	r1, [r0, #0]
 8005db2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005db6:	6001      	str	r1, [r0, #0]
 8005db8:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005dba:	0000      	.short	0x0000
 8005dbc:	e000ed88 	.word	0xe000ed88

08005dc0 <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
 8005dc0:	4b0e      	ldr	r3, [pc, #56]	; (8005dfc <prvTaskExitError+0x3c>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
{
 8005dc4:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8005dc6:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 8005dc8:	3301      	adds	r3, #1
volatile uint32_t ulDummy = 0;
 8005dca:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8005dcc:	d008      	beq.n	8005de0 <prvTaskExitError+0x20>
 8005dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd2:	f383 8811 	msr	BASEPRI, r3
 8005dd6:	f3bf 8f6f 	isb	sy
 8005dda:	f3bf 8f4f 	dsb	sy
 8005dde:	e7fe      	b.n	8005dde <prvTaskExitError+0x1e>
 8005de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de4:	f383 8811 	msr	BASEPRI, r3
 8005de8:	f3bf 8f6f 	isb	sy
 8005dec:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8005df0:	9b01      	ldr	r3, [sp, #4]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d0fc      	beq.n	8005df0 <prvTaskExitError+0x30>
}
 8005df6:	b002      	add	sp, #8
 8005df8:	4770      	bx	lr
 8005dfa:	bf00      	nop
 8005dfc:	20000584 	.word	0x20000584

08005e00 <pxPortInitialiseStack>:
{
 8005e00:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005e02:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005e06:	4c07      	ldr	r4, [pc, #28]	; (8005e24 <pxPortInitialiseStack+0x24>)
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005e08:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005e0c:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005e10:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005e14:	e940 4103 	strd	r4, r1, [r0, #-12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005e18:	e940 3209 	strd	r3, r2, [r0, #-36]	; 0x24
}
 8005e1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e20:	3844      	subs	r0, #68	; 0x44
 8005e22:	4770      	bx	lr
 8005e24:	08005dc1 	.word	0x08005dc1
	...

08005e30 <SVC_Handler>:
	__asm volatile (
 8005e30:	4b07      	ldr	r3, [pc, #28]	; (8005e50 <pxCurrentTCBConst2>)
 8005e32:	6819      	ldr	r1, [r3, #0]
 8005e34:	6808      	ldr	r0, [r1, #0]
 8005e36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e3a:	f380 8809 	msr	PSP, r0
 8005e3e:	f3bf 8f6f 	isb	sy
 8005e42:	f04f 0000 	mov.w	r0, #0
 8005e46:	f380 8811 	msr	BASEPRI, r0
 8005e4a:	4770      	bx	lr
 8005e4c:	f3af 8000 	nop.w

08005e50 <pxCurrentTCBConst2>:
 8005e50:	200048f4 	.word	0x200048f4

08005e54 <vPortEnterCritical>:
 8005e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e58:	f383 8811 	msr	BASEPRI, r3
 8005e5c:	f3bf 8f6f 	isb	sy
 8005e60:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8005e64:	4a0b      	ldr	r2, [pc, #44]	; (8005e94 <vPortEnterCritical+0x40>)
 8005e66:	6813      	ldr	r3, [r2, #0]
 8005e68:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8005e6a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8005e6c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8005e6e:	d000      	beq.n	8005e72 <vPortEnterCritical+0x1e>
}
 8005e70:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005e72:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005e76:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d0f7      	beq.n	8005e70 <vPortEnterCritical+0x1c>
 8005e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e84:	f383 8811 	msr	BASEPRI, r3
 8005e88:	f3bf 8f6f 	isb	sy
 8005e8c:	f3bf 8f4f 	dsb	sy
 8005e90:	e7fe      	b.n	8005e90 <vPortEnterCritical+0x3c>
 8005e92:	bf00      	nop
 8005e94:	20000584 	.word	0x20000584

08005e98 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8005e98:	4a08      	ldr	r2, [pc, #32]	; (8005ebc <vPortExitCritical+0x24>)
 8005e9a:	6813      	ldr	r3, [r2, #0]
 8005e9c:	b943      	cbnz	r3, 8005eb0 <vPortExitCritical+0x18>
 8005e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea2:	f383 8811 	msr	BASEPRI, r3
 8005ea6:	f3bf 8f6f 	isb	sy
 8005eaa:	f3bf 8f4f 	dsb	sy
 8005eae:	e7fe      	b.n	8005eae <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8005eb0:	3b01      	subs	r3, #1
 8005eb2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005eb4:	b90b      	cbnz	r3, 8005eba <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005eb6:	f383 8811 	msr	BASEPRI, r3
}
 8005eba:	4770      	bx	lr
 8005ebc:	20000584 	.word	0x20000584

08005ec0 <PendSV_Handler>:
	__asm volatile
 8005ec0:	f3ef 8009 	mrs	r0, PSP
 8005ec4:	f3bf 8f6f 	isb	sy
 8005ec8:	4b15      	ldr	r3, [pc, #84]	; (8005f20 <pxCurrentTCBConst>)
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	f01e 0f10 	tst.w	lr, #16
 8005ed0:	bf08      	it	eq
 8005ed2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005ed6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eda:	6010      	str	r0, [r2, #0]
 8005edc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005ee0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005ee4:	f380 8811 	msr	BASEPRI, r0
 8005ee8:	f3bf 8f4f 	dsb	sy
 8005eec:	f3bf 8f6f 	isb	sy
 8005ef0:	f000 fd38 	bl	8006964 <vTaskSwitchContext>
 8005ef4:	f04f 0000 	mov.w	r0, #0
 8005ef8:	f380 8811 	msr	BASEPRI, r0
 8005efc:	bc09      	pop	{r0, r3}
 8005efe:	6819      	ldr	r1, [r3, #0]
 8005f00:	6808      	ldr	r0, [r1, #0]
 8005f02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f06:	f01e 0f10 	tst.w	lr, #16
 8005f0a:	bf08      	it	eq
 8005f0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005f10:	f380 8809 	msr	PSP, r0
 8005f14:	f3bf 8f6f 	isb	sy
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	f3af 8000 	nop.w

08005f20 <pxCurrentTCBConst>:
 8005f20:	200048f4 	.word	0x200048f4

08005f24 <SysTick_Handler>:
{
 8005f24:	b508      	push	{r3, lr}
	__asm volatile
 8005f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f2a:	f383 8811 	msr	BASEPRI, r3
 8005f2e:	f3bf 8f6f 	isb	sy
 8005f32:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8005f36:	f000 fd05 	bl	8006944 <xTaskIncrementTick>
 8005f3a:	b128      	cbz	r0, 8005f48 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005f3c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005f40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f44:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8005f48:	2300      	movs	r3, #0
 8005f4a:	f383 8811 	msr	BASEPRI, r3
}
 8005f4e:	bd08      	pop	{r3, pc}

08005f50 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005f50:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005f54:	4a48      	ldr	r2, [pc, #288]	; (8006078 <xPortStartScheduler+0x128>)
 8005f56:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
 8005f5a:	4291      	cmp	r1, r2
 8005f5c:	d041      	beq.n	8005fe2 <xPortStartScheduler+0x92>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005f5e:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8005f62:	4b46      	ldr	r3, [pc, #280]	; (800607c <xPortStartScheduler+0x12c>)
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d033      	beq.n	8005fd0 <xPortStartScheduler+0x80>
{
 8005f68:	b570      	push	{r4, r5, r6, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005f6a:	4b45      	ldr	r3, [pc, #276]	; (8006080 <xPortStartScheduler+0x130>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005f6c:	4c45      	ldr	r4, [pc, #276]	; (8006084 <xPortStartScheduler+0x134>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005f6e:	781a      	ldrb	r2, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005f70:	4845      	ldr	r0, [pc, #276]	; (8006088 <xPortStartScheduler+0x138>)
{
 8005f72:	b084      	sub	sp, #16
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005f74:	21ff      	movs	r1, #255	; 0xff
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005f76:	b2d2      	uxtb	r2, r2
 8005f78:	9202      	str	r2, [sp, #8]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005f7a:	7019      	strb	r1, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	f88d 3007 	strb.w	r3, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005f84:	f89d 3007 	ldrb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f88:	f89d 2007 	ldrb.w	r2, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005f8c:	f003 0350 	and.w	r3, r3, #80	; 0x50
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005f90:	2107      	movs	r1, #7
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f92:	0612      	lsls	r2, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005f94:	7023      	strb	r3, [r4, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005f96:	6001      	str	r1, [r0, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f98:	bf48      	it	mi
 8005f9a:	2206      	movmi	r2, #6
 8005f9c:	d50f      	bpl.n	8005fbe <xPortStartScheduler+0x6e>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005f9e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005fa2:	005b      	lsls	r3, r3, #1
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	f88d 3007 	strb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005faa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005fae:	061b      	lsls	r3, r3, #24
 8005fb0:	4611      	mov	r1, r2
 8005fb2:	f102 32ff 	add.w	r2, r2, #4294967295
 8005fb6:	d4f2      	bmi.n	8005f9e <xPortStartScheduler+0x4e>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005fb8:	2903      	cmp	r1, #3
 8005fba:	d01b      	beq.n	8005ff4 <xPortStartScheduler+0xa4>
 8005fbc:	6001      	str	r1, [r0, #0]
	__asm volatile
 8005fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc2:	f383 8811 	msr	BASEPRI, r3
 8005fc6:	f3bf 8f6f 	isb	sy
 8005fca:	f3bf 8f4f 	dsb	sy
 8005fce:	e7fe      	b.n	8005fce <xPortStartScheduler+0x7e>
 8005fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd4:	f383 8811 	msr	BASEPRI, r3
 8005fd8:	f3bf 8f6f 	isb	sy
 8005fdc:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005fe0:	e7fe      	b.n	8005fe0 <xPortStartScheduler+0x90>
 8005fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe6:	f383 8811 	msr	BASEPRI, r3
 8005fea:	f3bf 8f6f 	isb	sy
 8005fee:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005ff2:	e7fe      	b.n	8005ff2 <xPortStartScheduler+0xa2>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005ff4:	9b02      	ldr	r3, [sp, #8]
 8005ff6:	4a22      	ldr	r2, [pc, #136]	; (8006080 <xPortStartScheduler+0x130>)
	uxCriticalNesting = 0;
 8005ff8:	4d24      	ldr	r5, [pc, #144]	; (800608c <xPortStartScheduler+0x13c>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005ffa:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005ffe:	f44f 7140 	mov.w	r1, #768	; 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006002:	b2db      	uxtb	r3, r3
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006004:	6001      	str	r1, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006006:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006008:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 800600c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006010:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006014:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8006018:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800601c:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	uxCriticalNesting = 0;
 8006020:	2600      	movs	r6, #0
	vPortSetupTimerInterrupt();
 8006022:	f7fc fc71 	bl	8002908 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8006026:	602e      	str	r6, [r5, #0]
	vPortEnableVFP();
 8006028:	f7ff fec0 	bl	8005dac <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800602c:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 8006030:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006034:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 8006038:	f7ff fea4 	bl	8005d84 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800603c:	f000 fc92 	bl	8006964 <vTaskSwitchContext>
	configASSERT( uxCriticalNesting == ~0UL );
 8006040:	682b      	ldr	r3, [r5, #0]
volatile uint32_t ulDummy = 0;
 8006042:	9603      	str	r6, [sp, #12]
	configASSERT( uxCriticalNesting == ~0UL );
 8006044:	3301      	adds	r3, #1
 8006046:	d008      	beq.n	800605a <xPortStartScheduler+0x10a>
 8006048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800604c:	f383 8811 	msr	BASEPRI, r3
 8006050:	f3bf 8f6f 	isb	sy
 8006054:	f3bf 8f4f 	dsb	sy
 8006058:	e7fe      	b.n	8006058 <xPortStartScheduler+0x108>
 800605a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800605e:	f383 8811 	msr	BASEPRI, r3
 8006062:	f3bf 8f6f 	isb	sy
 8006066:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800606a:	9b03      	ldr	r3, [sp, #12]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d0fc      	beq.n	800606a <xPortStartScheduler+0x11a>
}
 8006070:	2000      	movs	r0, #0
 8006072:	b004      	add	sp, #16
 8006074:	bd70      	pop	{r4, r5, r6, pc}
 8006076:	bf00      	nop
 8006078:	410fc271 	.word	0x410fc271
 800607c:	410fc270 	.word	0x410fc270
 8006080:	e000e400 	.word	0xe000e400
 8006084:	200048ec 	.word	0x200048ec
 8006088:	200048f0 	.word	0x200048f0
 800608c:	20000584 	.word	0x20000584

08006090 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006094:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006096:	f7ff fedd 	bl	8005e54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800609a:	4a34      	ldr	r2, [pc, #208]	; (800616c <prvAddNewTaskToReadyList+0xdc>)
		if( pxCurrentTCB == NULL )
 800609c:	4d34      	ldr	r5, [pc, #208]	; (8006170 <prvAddNewTaskToReadyList+0xe0>)
		uxCurrentNumberOfTasks++;
 800609e:	6813      	ldr	r3, [r2, #0]
 80060a0:	3301      	adds	r3, #1
 80060a2:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80060a4:	682b      	ldr	r3, [r5, #0]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d032      	beq.n	8006110 <prvAddNewTaskToReadyList+0x80>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80060aa:	4e32      	ldr	r6, [pc, #200]	; (8006174 <prvAddNewTaskToReadyList+0xe4>)
 80060ac:	6833      	ldr	r3, [r6, #0]
 80060ae:	b33b      	cbz	r3, 8006100 <prvAddNewTaskToReadyList+0x70>
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80060b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80060b2:	4f31      	ldr	r7, [pc, #196]	; (8006178 <prvAddNewTaskToReadyList+0xe8>)
		uxTaskNumber++;
 80060b4:	4831      	ldr	r0, [pc, #196]	; (800617c <prvAddNewTaskToReadyList+0xec>)
		prvAddTaskToReadyList( pxNewTCB );
 80060b6:	4932      	ldr	r1, [pc, #200]	; (8006180 <prvAddNewTaskToReadyList+0xf0>)
		uxTaskNumber++;
 80060b8:	6802      	ldr	r2, [r0, #0]
 80060ba:	3201      	adds	r2, #1
 80060bc:	6002      	str	r2, [r0, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80060be:	6808      	ldr	r0, [r1, #0]
 80060c0:	2201      	movs	r2, #1
 80060c2:	409a      	lsls	r2, r3
 80060c4:	4302      	orrs	r2, r0
 80060c6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80060ca:	600a      	str	r2, [r1, #0]
 80060cc:	eb07 0083 	add.w	r0, r7, r3, lsl #2
 80060d0:	1d21      	adds	r1, r4, #4
 80060d2:	f7ff fe1b 	bl	8005d0c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80060d6:	f7ff fedf 	bl	8005e98 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80060da:	6833      	ldr	r3, [r6, #0]
 80060dc:	b173      	cbz	r3, 80060fc <prvAddNewTaskToReadyList+0x6c>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80060de:	682a      	ldr	r2, [r5, #0]
 80060e0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80060e2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d209      	bcs.n	80060fc <prvAddNewTaskToReadyList+0x6c>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80060e8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80060ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060f0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80060f4:	f3bf 8f4f 	dsb	sy
 80060f8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006100:	682a      	ldr	r2, [r5, #0]
 8006102:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006104:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006106:	4f1c      	ldr	r7, [pc, #112]	; (8006178 <prvAddNewTaskToReadyList+0xe8>)
 8006108:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 800610a:	bf98      	it	ls
 800610c:	602c      	strls	r4, [r5, #0]
 800610e:	e7d1      	b.n	80060b4 <prvAddNewTaskToReadyList+0x24>
			pxCurrentTCB = pxNewTCB;
 8006110:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006112:	6813      	ldr	r3, [r2, #0]
 8006114:	2b01      	cmp	r3, #1
 8006116:	d003      	beq.n	8006120 <prvAddNewTaskToReadyList+0x90>
		prvAddTaskToReadyList( pxNewTCB );
 8006118:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800611a:	4f17      	ldr	r7, [pc, #92]	; (8006178 <prvAddNewTaskToReadyList+0xe8>)
 800611c:	4e15      	ldr	r6, [pc, #84]	; (8006174 <prvAddNewTaskToReadyList+0xe4>)
 800611e:	e7c9      	b.n	80060b4 <prvAddNewTaskToReadyList+0x24>
 8006120:	4f15      	ldr	r7, [pc, #84]	; (8006178 <prvAddNewTaskToReadyList+0xe8>)
 8006122:	463e      	mov	r6, r7
 8006124:	f107 088c 	add.w	r8, r7, #140	; 0x8c
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006128:	4630      	mov	r0, r6
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800612a:	3614      	adds	r6, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800612c:	f7ff fdde 	bl	8005cec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006130:	45b0      	cmp	r8, r6
 8006132:	d1f9      	bne.n	8006128 <prvAddNewTaskToReadyList+0x98>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006134:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8006198 <prvAddNewTaskToReadyList+0x108>
	vListInitialise( &xDelayedTaskList2 );
 8006138:	f8df 8060 	ldr.w	r8, [pc, #96]	; 800619c <prvAddNewTaskToReadyList+0x10c>
 800613c:	4e0d      	ldr	r6, [pc, #52]	; (8006174 <prvAddNewTaskToReadyList+0xe4>)
	vListInitialise( &xDelayedTaskList1 );
 800613e:	4648      	mov	r0, r9
 8006140:	f7ff fdd4 	bl	8005cec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006144:	4640      	mov	r0, r8
 8006146:	f7ff fdd1 	bl	8005cec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800614a:	480e      	ldr	r0, [pc, #56]	; (8006184 <prvAddNewTaskToReadyList+0xf4>)
 800614c:	f7ff fdce 	bl	8005cec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006150:	480d      	ldr	r0, [pc, #52]	; (8006188 <prvAddNewTaskToReadyList+0xf8>)
 8006152:	f7ff fdcb 	bl	8005cec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006156:	480d      	ldr	r0, [pc, #52]	; (800618c <prvAddNewTaskToReadyList+0xfc>)
 8006158:	f7ff fdc8 	bl	8005cec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800615c:	4b0c      	ldr	r3, [pc, #48]	; (8006190 <prvAddNewTaskToReadyList+0x100>)
 800615e:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006162:	4b0c      	ldr	r3, [pc, #48]	; (8006194 <prvAddNewTaskToReadyList+0x104>)
 8006164:	f8c3 8000 	str.w	r8, [r3]
		prvAddTaskToReadyList( pxNewTCB );
 8006168:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
}
 800616a:	e7a3      	b.n	80060b4 <prvAddNewTaskToReadyList+0x24>
 800616c:	2000498c 	.word	0x2000498c
 8006170:	200048f4 	.word	0x200048f4
 8006174:	200049e8 	.word	0x200049e8
 8006178:	20004900 	.word	0x20004900
 800617c:	20004998 	.word	0x20004998
 8006180:	2000499c 	.word	0x2000499c
 8006184:	200049d4 	.word	0x200049d4
 8006188:	20004a00 	.word	0x20004a00
 800618c:	200049ec 	.word	0x200049ec
 8006190:	200048f8 	.word	0x200048f8
 8006194:	200048fc 	.word	0x200048fc
 8006198:	200049a0 	.word	0x200049a0
 800619c:	200049b4 	.word	0x200049b4

080061a0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80061a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80061a2:	4b1b      	ldr	r3, [pc, #108]	; (8006210 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061a4:	4e1b      	ldr	r6, [pc, #108]	; (8006214 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 80061a6:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061a8:	6833      	ldr	r3, [r6, #0]
{
 80061aa:	4605      	mov	r5, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061ac:	1d18      	adds	r0, r3, #4
{
 80061ae:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061b0:	f7ff fdd4 	bl	8005d5c <uxListRemove>
 80061b4:	b948      	cbnz	r0, 80061ca <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80061b6:	6833      	ldr	r3, [r6, #0]
 80061b8:	4917      	ldr	r1, [pc, #92]	; (8006218 <prvAddCurrentTaskToDelayedList+0x78>)
 80061ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061bc:	2301      	movs	r3, #1
 80061be:	fa03 f202 	lsl.w	r2, r3, r2
 80061c2:	680b      	ldr	r3, [r1, #0]
 80061c4:	ea23 0302 	bic.w	r3, r3, r2
 80061c8:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80061ca:	1c6b      	adds	r3, r5, #1
 80061cc:	d017      	beq.n	80061fe <prvAddCurrentTaskToDelayedList+0x5e>
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80061ce:	6833      	ldr	r3, [r6, #0]
 80061d0:	1964      	adds	r4, r4, r5
 80061d2:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80061d4:	d307      	bcc.n	80061e6 <prvAddCurrentTaskToDelayedList+0x46>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061d6:	4b11      	ldr	r3, [pc, #68]	; (800621c <prvAddCurrentTaskToDelayedList+0x7c>)
 80061d8:	6818      	ldr	r0, [r3, #0]
 80061da:	6831      	ldr	r1, [r6, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80061dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061e0:	3104      	adds	r1, #4
 80061e2:	f7ff bda3 	b.w	8005d2c <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061e6:	4b0e      	ldr	r3, [pc, #56]	; (8006220 <prvAddCurrentTaskToDelayedList+0x80>)
 80061e8:	6818      	ldr	r0, [r3, #0]
 80061ea:	6831      	ldr	r1, [r6, #0]
 80061ec:	3104      	adds	r1, #4
 80061ee:	f7ff fd9d 	bl	8005d2c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80061f2:	4b0c      	ldr	r3, [pc, #48]	; (8006224 <prvAddCurrentTaskToDelayedList+0x84>)
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 80061f8:	bf88      	it	hi
 80061fa:	601c      	strhi	r4, [r3, #0]
}
 80061fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80061fe:	2f00      	cmp	r7, #0
 8006200:	d0e5      	beq.n	80061ce <prvAddCurrentTaskToDelayedList+0x2e>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006202:	6831      	ldr	r1, [r6, #0]
 8006204:	4808      	ldr	r0, [pc, #32]	; (8006228 <prvAddCurrentTaskToDelayedList+0x88>)
}
 8006206:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800620a:	3104      	adds	r1, #4
 800620c:	f7ff bd7e 	b.w	8005d0c <vListInsertEnd>
 8006210:	20004a14 	.word	0x20004a14
 8006214:	200048f4 	.word	0x200048f4
 8006218:	2000499c 	.word	0x2000499c
 800621c:	200048fc 	.word	0x200048fc
 8006220:	200048f8 	.word	0x200048f8
 8006224:	200049c8 	.word	0x200049c8
 8006228:	200049ec 	.word	0x200049ec

0800622c <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800622c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006230:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	; 0x24
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006234:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8006238:	6b26      	ldr	r6, [r4, #48]	; 0x30
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800623a:	9d08      	ldr	r5, [sp, #32]
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800623c:	3a01      	subs	r2, #1
 800623e:	eb06 0682 	add.w	r6, r6, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8006242:	4607      	mov	r7, r0
 8006244:	4699      	mov	r9, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006246:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 800624a:	2900      	cmp	r1, #0
 800624c:	f000 8089 	beq.w	8006362 <prvInitialiseNewTask.constprop.0+0x136>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006250:	780b      	ldrb	r3, [r1, #0]
 8006252:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8006256:	780b      	ldrb	r3, [r1, #0]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d04d      	beq.n	80062f8 <prvInitialiseNewTask.constprop.0+0xcc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800625c:	784b      	ldrb	r3, [r1, #1]
 800625e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
			if( pcName[ x ] == ( char ) 0x00 )
 8006262:	784b      	ldrb	r3, [r1, #1]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d047      	beq.n	80062f8 <prvInitialiseNewTask.constprop.0+0xcc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006268:	788b      	ldrb	r3, [r1, #2]
 800626a:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
			if( pcName[ x ] == ( char ) 0x00 )
 800626e:	788b      	ldrb	r3, [r1, #2]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d041      	beq.n	80062f8 <prvInitialiseNewTask.constprop.0+0xcc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006274:	78cb      	ldrb	r3, [r1, #3]
 8006276:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
			if( pcName[ x ] == ( char ) 0x00 )
 800627a:	78cb      	ldrb	r3, [r1, #3]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d03b      	beq.n	80062f8 <prvInitialiseNewTask.constprop.0+0xcc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006280:	790b      	ldrb	r3, [r1, #4]
 8006282:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
			if( pcName[ x ] == ( char ) 0x00 )
 8006286:	790b      	ldrb	r3, [r1, #4]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d035      	beq.n	80062f8 <prvInitialiseNewTask.constprop.0+0xcc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800628c:	794b      	ldrb	r3, [r1, #5]
 800628e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
			if( pcName[ x ] == ( char ) 0x00 )
 8006292:	794b      	ldrb	r3, [r1, #5]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d02f      	beq.n	80062f8 <prvInitialiseNewTask.constprop.0+0xcc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006298:	798b      	ldrb	r3, [r1, #6]
 800629a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
			if( pcName[ x ] == ( char ) 0x00 )
 800629e:	798b      	ldrb	r3, [r1, #6]
 80062a0:	b353      	cbz	r3, 80062f8 <prvInitialiseNewTask.constprop.0+0xcc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80062a2:	79cb      	ldrb	r3, [r1, #7]
 80062a4:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
			if( pcName[ x ] == ( char ) 0x00 )
 80062a8:	79cb      	ldrb	r3, [r1, #7]
 80062aa:	b32b      	cbz	r3, 80062f8 <prvInitialiseNewTask.constprop.0+0xcc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80062ac:	7a0b      	ldrb	r3, [r1, #8]
 80062ae:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
			if( pcName[ x ] == ( char ) 0x00 )
 80062b2:	7a0b      	ldrb	r3, [r1, #8]
 80062b4:	b303      	cbz	r3, 80062f8 <prvInitialiseNewTask.constprop.0+0xcc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80062b6:	7a4b      	ldrb	r3, [r1, #9]
 80062b8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
			if( pcName[ x ] == ( char ) 0x00 )
 80062bc:	7a4b      	ldrb	r3, [r1, #9]
 80062be:	b1db      	cbz	r3, 80062f8 <prvInitialiseNewTask.constprop.0+0xcc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80062c0:	7a8b      	ldrb	r3, [r1, #10]
 80062c2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
			if( pcName[ x ] == ( char ) 0x00 )
 80062c6:	7a8b      	ldrb	r3, [r1, #10]
 80062c8:	b1b3      	cbz	r3, 80062f8 <prvInitialiseNewTask.constprop.0+0xcc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80062ca:	7acb      	ldrb	r3, [r1, #11]
 80062cc:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
			if( pcName[ x ] == ( char ) 0x00 )
 80062d0:	7acb      	ldrb	r3, [r1, #11]
 80062d2:	b18b      	cbz	r3, 80062f8 <prvInitialiseNewTask.constprop.0+0xcc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80062d4:	7b0b      	ldrb	r3, [r1, #12]
 80062d6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
			if( pcName[ x ] == ( char ) 0x00 )
 80062da:	7b0b      	ldrb	r3, [r1, #12]
 80062dc:	b163      	cbz	r3, 80062f8 <prvInitialiseNewTask.constprop.0+0xcc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80062de:	7b4b      	ldrb	r3, [r1, #13]
 80062e0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
			if( pcName[ x ] == ( char ) 0x00 )
 80062e4:	7b4b      	ldrb	r3, [r1, #13]
 80062e6:	b13b      	cbz	r3, 80062f8 <prvInitialiseNewTask.constprop.0+0xcc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80062e8:	7b8b      	ldrb	r3, [r1, #14]
 80062ea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
			if( pcName[ x ] == ( char ) 0x00 )
 80062ee:	7b8b      	ldrb	r3, [r1, #14]
 80062f0:	b113      	cbz	r3, 80062f8 <prvInitialiseNewTask.constprop.0+0xcc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80062f2:	7bcb      	ldrb	r3, [r1, #15]
 80062f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80062f8:	2300      	movs	r3, #0
 80062fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80062fe:	2d06      	cmp	r5, #6
 8006300:	bf28      	it	cs
 8006302:	2506      	movcs	r5, #6
		pxNewTCB->uxMutexesHeld = 0;
 8006304:	f04f 0a00 	mov.w	sl, #0
	pxNewTCB->uxPriority = uxPriority;
 8006308:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800630a:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800630c:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 800630e:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006312:	f7ff fcf7 	bl	8005d04 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006316:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800631a:	f104 0018 	add.w	r0, r4, #24
 800631e:	f7ff fcf1 	bl	8005d04 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8006322:	f8c4 a0ac 	str.w	sl, [r4, #172]	; 0xac
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006326:	4651      	mov	r1, sl
 8006328:	2260      	movs	r2, #96	; 0x60
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800632a:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800632c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800632e:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006330:	f884 a0b0 	strb.w	sl, [r4, #176]	; 0xb0
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006334:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8006338:	f002 fd84 	bl	8008e44 <memset>
 800633c:	4b0a      	ldr	r3, [pc, #40]	; (8006368 <prvInitialiseNewTask.constprop.0+0x13c>)
 800633e:	6523      	str	r3, [r4, #80]	; 0x50
 8006340:	4b0a      	ldr	r3, [pc, #40]	; (800636c <prvInitialiseNewTask.constprop.0+0x140>)
 8006342:	6563      	str	r3, [r4, #84]	; 0x54
 8006344:	4b0a      	ldr	r3, [pc, #40]	; (8006370 <prvInitialiseNewTask.constprop.0+0x144>)
 8006346:	65a3      	str	r3, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006348:	464a      	mov	r2, r9
 800634a:	4639      	mov	r1, r7
 800634c:	4630      	mov	r0, r6
 800634e:	f7ff fd57 	bl	8005e00 <pxPortInitialiseStack>
 8006352:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8006354:	f1b8 0f00 	cmp.w	r8, #0
 8006358:	d001      	beq.n	800635e <prvInitialiseNewTask.constprop.0+0x132>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800635a:	f8c8 4000 	str.w	r4, [r8]
}
 800635e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006362:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 8006366:	e7ca      	b.n	80062fe <prvInitialiseNewTask.constprop.0+0xd2>
 8006368:	08009398 	.word	0x08009398
 800636c:	080093b8 	.word	0x080093b8
 8006370:	08009378 	.word	0x08009378

08006374 <prvIdleTask>:
{
 8006374:	b580      	push	{r7, lr}
 8006376:	4d23      	ldr	r5, [pc, #140]	; (8006404 <prvIdleTask+0x90>)
 8006378:	4f23      	ldr	r7, [pc, #140]	; (8006408 <prvIdleTask+0x94>)
 800637a:	4e24      	ldr	r6, [pc, #144]	; (800640c <prvIdleTask+0x98>)
 800637c:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8006410 <prvIdleTask+0x9c>
				taskYIELD();
 8006380:	f04f 2ae0 	mov.w	sl, #3758153728	; 0xe000e000
 8006384:	f04f 5980 	mov.w	r9, #268435456	; 0x10000000
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006388:	682b      	ldr	r3, [r5, #0]
 800638a:	b35b      	cbz	r3, 80063e4 <prvIdleTask+0x70>
			taskENTER_CRITICAL();
 800638c:	f7ff fd62 	bl	8005e54 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006394:	1d20      	adds	r0, r4, #4
 8006396:	f7ff fce1 	bl	8005d5c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800639a:	6833      	ldr	r3, [r6, #0]
 800639c:	3b01      	subs	r3, #1
 800639e:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 80063a0:	682b      	ldr	r3, [r5, #0]
 80063a2:	3b01      	subs	r3, #1
 80063a4:	602b      	str	r3, [r5, #0]
			taskEXIT_CRITICAL();
 80063a6:	f7ff fd77 	bl	8005e98 <vPortExitCritical>
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80063aa:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 80063ae:	f002 fdab 	bl	8008f08 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80063b2:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
 80063b6:	b163      	cbz	r3, 80063d2 <prvIdleTask+0x5e>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d01e      	beq.n	80063fa <prvIdleTask+0x86>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80063bc:	2b02      	cmp	r3, #2
 80063be:	d0e3      	beq.n	8006388 <prvIdleTask+0x14>
 80063c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c4:	f383 8811 	msr	BASEPRI, r3
 80063c8:	f3bf 8f6f 	isb	sy
 80063cc:	f3bf 8f4f 	dsb	sy
 80063d0:	e7fe      	b.n	80063d0 <prvIdleTask+0x5c>
				vPortFree( pxTCB->pxStack );
 80063d2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80063d4:	f7ff fc28 	bl	8005c28 <vPortFree>
				vPortFree( pxTCB );
 80063d8:	4620      	mov	r0, r4
 80063da:	f7ff fc25 	bl	8005c28 <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80063de:	682b      	ldr	r3, [r5, #0]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d1d3      	bne.n	800638c <prvIdleTask+0x18>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80063e4:	f8d8 3000 	ldr.w	r3, [r8]
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d9cd      	bls.n	8006388 <prvIdleTask+0x14>
				taskYIELD();
 80063ec:	f8ca 9d04 	str.w	r9, [sl, #3332]	; 0xd04
 80063f0:	f3bf 8f4f 	dsb	sy
 80063f4:	f3bf 8f6f 	isb	sy
 80063f8:	e7c6      	b.n	8006388 <prvIdleTask+0x14>
				vPortFree( pxTCB );
 80063fa:	4620      	mov	r0, r4
 80063fc:	f7ff fc14 	bl	8005c28 <vPortFree>
 8006400:	e7c2      	b.n	8006388 <prvIdleTask+0x14>
 8006402:	bf00      	nop
 8006404:	20004990 	.word	0x20004990
 8006408:	20004a00 	.word	0x20004a00
 800640c:	2000498c 	.word	0x2000498c
 8006410:	20004900 	.word	0x20004900

08006414 <xTaskIncrementTick.part.0>:
BaseType_t xTaskIncrementTick( void )
 8006414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006418:	4b4a      	ldr	r3, [pc, #296]	; (8006544 <xTaskIncrementTick.part.0+0x130>)
 800641a:	681d      	ldr	r5, [r3, #0]
 800641c:	3501      	adds	r5, #1
BaseType_t xTaskIncrementTick( void )
 800641e:	b083      	sub	sp, #12
		xTickCount = xConstTickCount;
 8006420:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006422:	2d00      	cmp	r5, #0
 8006424:	d045      	beq.n	80064b2 <xTaskIncrementTick.part.0+0x9e>
 8006426:	4b48      	ldr	r3, [pc, #288]	; (8006548 <xTaskIncrementTick.part.0+0x134>)
 8006428:	9301      	str	r3, [sp, #4]
		if( xConstTickCount >= xNextTaskUnblockTime )
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	429d      	cmp	r5, r3
 800642e:	d34d      	bcc.n	80064cc <xTaskIncrementTick.part.0+0xb8>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006430:	4e46      	ldr	r6, [pc, #280]	; (800654c <xTaskIncrementTick.part.0+0x138>)
 8006432:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8006560 <xTaskIncrementTick.part.0+0x14c>
 8006436:	6833      	ldr	r3, [r6, #0]
 8006438:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8006564 <xTaskIncrementTick.part.0+0x150>
 800643c:	681c      	ldr	r4, [r3, #0]
 800643e:	2c00      	cmp	r4, #0
 8006440:	d07a      	beq.n	8006538 <xTaskIncrementTick.part.0+0x124>
					prvAddTaskToReadyList( pxTCB );
 8006442:	4f43      	ldr	r7, [pc, #268]	; (8006550 <xTaskIncrementTick.part.0+0x13c>)
BaseType_t xSwitchRequired = pdFALSE;
 8006444:	2400      	movs	r4, #0
					prvAddTaskToReadyList( pxTCB );
 8006446:	f04f 0a01 	mov.w	sl, #1
 800644a:	e024      	b.n	8006496 <xTaskIncrementTick.part.0+0x82>
 800644c:	9100      	str	r1, [sp, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800644e:	f7ff fc85 	bl	8005d5c <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006452:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 8006456:	9900      	ldr	r1, [sp, #0]
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006458:	f10b 0018 	add.w	r0, fp, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800645c:	b112      	cbz	r2, 8006464 <xTaskIncrementTick.part.0+0x50>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800645e:	f7ff fc7d 	bl	8005d5c <uxListRemove>
 8006462:	9900      	ldr	r1, [sp, #0]
					prvAddTaskToReadyList( pxTCB );
 8006464:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	fa0a f200 	lsl.w	r2, sl, r0
 800646e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006472:	431a      	orrs	r2, r3
 8006474:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8006478:	603a      	str	r2, [r7, #0]
 800647a:	f7ff fc47 	bl	8005d0c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800647e:	f8d9 2000 	ldr.w	r2, [r9]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006482:	6830      	ldr	r0, [r6, #0]
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006484:	f8db 102c 	ldr.w	r1, [fp, #44]	; 0x2c
 8006488:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800648a:	6803      	ldr	r3, [r0, #0]
							xSwitchRequired = pdTRUE;
 800648c:	4291      	cmp	r1, r2
 800648e:	bf28      	it	cs
 8006490:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006492:	2b00      	cmp	r3, #0
 8006494:	d050      	beq.n	8006538 <xTaskIncrementTick.part.0+0x124>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006496:	6833      	ldr	r3, [r6, #0]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800649e:	f8db 2004 	ldr.w	r2, [fp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064a2:	f10b 0104 	add.w	r1, fp, #4
					if( xConstTickCount < xItemValue )
 80064a6:	4295      	cmp	r5, r2
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064a8:	4608      	mov	r0, r1
					if( xConstTickCount < xItemValue )
 80064aa:	d2cf      	bcs.n	800644c <xTaskIncrementTick.part.0+0x38>
						xNextTaskUnblockTime = xItemValue;
 80064ac:	9b01      	ldr	r3, [sp, #4]
 80064ae:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80064b0:	e011      	b.n	80064d6 <xTaskIncrementTick.part.0+0xc2>
			taskSWITCH_DELAYED_LISTS();
 80064b2:	4b26      	ldr	r3, [pc, #152]	; (800654c <xTaskIncrementTick.part.0+0x138>)
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	6812      	ldr	r2, [r2, #0]
 80064b8:	b30a      	cbz	r2, 80064fe <xTaskIncrementTick.part.0+0xea>
 80064ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064be:	f383 8811 	msr	BASEPRI, r3
 80064c2:	f3bf 8f6f 	isb	sy
 80064c6:	f3bf 8f4f 	dsb	sy
 80064ca:	e7fe      	b.n	80064ca <xTaskIncrementTick.part.0+0xb6>
 80064cc:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8006560 <xTaskIncrementTick.part.0+0x14c>
 80064d0:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8006564 <xTaskIncrementTick.part.0+0x150>
BaseType_t xSwitchRequired = pdFALSE;
 80064d4:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80064d6:	f8d9 3000 	ldr.w	r3, [r9]
			if( xYieldPending != pdFALSE )
 80064da:	491e      	ldr	r1, [pc, #120]	; (8006554 <xTaskIncrementTick.part.0+0x140>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80064dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064de:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80064e2:	009b      	lsls	r3, r3, #2
 80064e4:	f858 2003 	ldr.w	r2, [r8, r3]
			if( xYieldPending != pdFALSE )
 80064e8:	680b      	ldr	r3, [r1, #0]
				xSwitchRequired = pdTRUE;
 80064ea:	2a02      	cmp	r2, #2
 80064ec:	bf28      	it	cs
 80064ee:	2401      	movcs	r4, #1
				xSwitchRequired = pdTRUE;
 80064f0:	2b00      	cmp	r3, #0
}
 80064f2:	bf0c      	ite	eq
 80064f4:	4620      	moveq	r0, r4
 80064f6:	2001      	movne	r0, #1
 80064f8:	b003      	add	sp, #12
 80064fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 80064fe:	4a16      	ldr	r2, [pc, #88]	; (8006558 <xTaskIncrementTick.part.0+0x144>)
 8006500:	6818      	ldr	r0, [r3, #0]
 8006502:	6811      	ldr	r1, [r2, #0]
 8006504:	6019      	str	r1, [r3, #0]
 8006506:	4915      	ldr	r1, [pc, #84]	; (800655c <xTaskIncrementTick.part.0+0x148>)
 8006508:	6010      	str	r0, [r2, #0]
 800650a:	680a      	ldr	r2, [r1, #0]
 800650c:	3201      	adds	r2, #1
 800650e:	600a      	str	r2, [r1, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	6812      	ldr	r2, [r2, #0]
 8006514:	b93a      	cbnz	r2, 8006526 <xTaskIncrementTick.part.0+0x112>
		xNextTaskUnblockTime = portMAX_DELAY;
 8006516:	4b0c      	ldr	r3, [pc, #48]	; (8006548 <xTaskIncrementTick.part.0+0x134>)
 8006518:	9301      	str	r3, [sp, #4]
 800651a:	461a      	mov	r2, r3
 800651c:	f04f 33ff 	mov.w	r3, #4294967295
 8006520:	6013      	str	r3, [r2, #0]
 8006522:	4613      	mov	r3, r2
 8006524:	e781      	b.n	800642a <xTaskIncrementTick.part.0+0x16>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006526:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006528:	4a07      	ldr	r2, [pc, #28]	; (8006548 <xTaskIncrementTick.part.0+0x134>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800652a:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800652c:	9201      	str	r2, [sp, #4]
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	6013      	str	r3, [r2, #0]
 8006534:	4613      	mov	r3, r2
}
 8006536:	e778      	b.n	800642a <xTaskIncrementTick.part.0+0x16>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006538:	9a01      	ldr	r2, [sp, #4]
 800653a:	f04f 33ff 	mov.w	r3, #4294967295
 800653e:	6013      	str	r3, [r2, #0]
					break;
 8006540:	e7c9      	b.n	80064d6 <xTaskIncrementTick.part.0+0xc2>
 8006542:	bf00      	nop
 8006544:	20004a14 	.word	0x20004a14
 8006548:	200049c8 	.word	0x200049c8
 800654c:	200048f8 	.word	0x200048f8
 8006550:	2000499c 	.word	0x2000499c
 8006554:	20004a18 	.word	0x20004a18
 8006558:	200048fc 	.word	0x200048fc
 800655c:	200049cc 	.word	0x200049cc
 8006560:	20004900 	.word	0x20004900
 8006564:	200048f4 	.word	0x200048f4

08006568 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 8006568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		--uxSchedulerSuspended;
 800656c:	4c45      	ldr	r4, [pc, #276]	; (8006684 <xTaskResumeAll.part.0+0x11c>)
BaseType_t xTaskResumeAll( void )
 800656e:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 8006570:	f7ff fc70 	bl	8005e54 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8006574:	6823      	ldr	r3, [r4, #0]
 8006576:	3b01      	subs	r3, #1
 8006578:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800657a:	6823      	ldr	r3, [r4, #0]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d167      	bne.n	8006650 <xTaskResumeAll.part.0+0xe8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006580:	4b41      	ldr	r3, [pc, #260]	; (8006688 <xTaskResumeAll.part.0+0x120>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d063      	beq.n	8006650 <xTaskResumeAll.part.0+0xe8>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006588:	f8df b118 	ldr.w	fp, [pc, #280]	; 80066a4 <xTaskResumeAll.part.0+0x13c>
 800658c:	f8db 3000 	ldr.w	r3, [fp]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d073      	beq.n	800667c <xTaskResumeAll.part.0+0x114>
 8006594:	4b3d      	ldr	r3, [pc, #244]	; (800668c <xTaskResumeAll.part.0+0x124>)
 8006596:	4d3e      	ldr	r5, [pc, #248]	; (8006690 <xTaskResumeAll.part.0+0x128>)
 8006598:	f8df 810c 	ldr.w	r8, [pc, #268]	; 80066a8 <xTaskResumeAll.part.0+0x140>
 800659c:	4f3d      	ldr	r7, [pc, #244]	; (8006694 <xTaskResumeAll.part.0+0x12c>)
 800659e:	9301      	str	r3, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 80065a0:	2601      	movs	r6, #1
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065a2:	f8db 300c 	ldr.w	r3, [fp, #12]
 80065a6:	f8d3 a00c 	ldr.w	sl, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065aa:	f10a 0904 	add.w	r9, sl, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80065ae:	f10a 0018 	add.w	r0, sl, #24
 80065b2:	f7ff fbd3 	bl	8005d5c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065b6:	4648      	mov	r0, r9
 80065b8:	f7ff fbd0 	bl	8005d5c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80065bc:	f8da 002c 	ldr.w	r0, [sl, #44]	; 0x2c
 80065c0:	682a      	ldr	r2, [r5, #0]
 80065c2:	fa06 f300 	lsl.w	r3, r6, r0
 80065c6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80065ca:	4313      	orrs	r3, r2
 80065cc:	4649      	mov	r1, r9
 80065ce:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 80065d2:	602b      	str	r3, [r5, #0]
 80065d4:	f7ff fb9a 	bl	8005d0c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	f8da 202c 	ldr.w	r2, [sl, #44]	; 0x2c
 80065de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d33d      	bcc.n	8006660 <xTaskResumeAll.part.0+0xf8>
						xYieldPending = pdTRUE;
 80065e4:	9b01      	ldr	r3, [sp, #4]
 80065e6:	601e      	str	r6, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80065e8:	f8db 3000 	ldr.w	r3, [fp]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d1d8      	bne.n	80065a2 <xTaskResumeAll.part.0+0x3a>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065f0:	4b29      	ldr	r3, [pc, #164]	; (8006698 <xTaskResumeAll.part.0+0x130>)
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	6812      	ldr	r2, [r2, #0]
 80065f6:	2a00      	cmp	r2, #0
 80065f8:	d03b      	beq.n	8006672 <xTaskResumeAll.part.0+0x10a>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065fa:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80065fc:	4b27      	ldr	r3, [pc, #156]	; (800669c <xTaskResumeAll.part.0+0x134>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065fe:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006600:	68d2      	ldr	r2, [r2, #12]
 8006602:	6852      	ldr	r2, [r2, #4]
 8006604:	601a      	str	r2, [r3, #0]
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006606:	4e26      	ldr	r6, [pc, #152]	; (80066a0 <xTaskResumeAll.part.0+0x138>)
 8006608:	6835      	ldr	r5, [r6, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800660a:	b195      	cbz	r5, 8006632 <xTaskResumeAll.part.0+0xca>
								xYieldPending = pdTRUE;
 800660c:	2701      	movs	r7, #1
 800660e:	e006      	b.n	800661e <xTaskResumeAll.part.0+0xb6>
 8006610:	f7ff ff00 	bl	8006414 <xTaskIncrementTick.part.0>
							if( xTaskIncrementTick() != pdFALSE )
 8006614:	b108      	cbz	r0, 800661a <xTaskResumeAll.part.0+0xb2>
								xYieldPending = pdTRUE;
 8006616:	9b01      	ldr	r3, [sp, #4]
 8006618:	601f      	str	r7, [r3, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800661a:	3d01      	subs	r5, #1
 800661c:	d008      	beq.n	8006630 <xTaskResumeAll.part.0+0xc8>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800661e:	6823      	ldr	r3, [r4, #0]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d0f5      	beq.n	8006610 <xTaskResumeAll.part.0+0xa8>
		++xPendedTicks;
 8006624:	6833      	ldr	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006626:	3d01      	subs	r5, #1
		++xPendedTicks;
 8006628:	f103 0301 	add.w	r3, r3, #1
 800662c:	6033      	str	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800662e:	d1f6      	bne.n	800661e <xTaskResumeAll.part.0+0xb6>
						xPendedTicks = 0;
 8006630:	6035      	str	r5, [r6, #0]
				if( xYieldPending != pdFALSE )
 8006632:	9b01      	ldr	r3, [sp, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	b15b      	cbz	r3, 8006650 <xTaskResumeAll.part.0+0xe8>
					taskYIELD_IF_USING_PREEMPTION();
 8006638:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800663c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006640:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006644:	f3bf 8f4f 	dsb	sy
 8006648:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800664c:	2001      	movs	r0, #1
 800664e:	e000      	b.n	8006652 <xTaskResumeAll.part.0+0xea>
BaseType_t xAlreadyYielded = pdFALSE;
 8006650:	2000      	movs	r0, #0
 8006652:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 8006654:	f7ff fc20 	bl	8005e98 <vPortExitCritical>
}
 8006658:	9801      	ldr	r0, [sp, #4]
 800665a:	b003      	add	sp, #12
 800665c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006660:	f8db 3000 	ldr.w	r3, [fp]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d19c      	bne.n	80065a2 <xTaskResumeAll.part.0+0x3a>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006668:	4b0b      	ldr	r3, [pc, #44]	; (8006698 <xTaskResumeAll.part.0+0x130>)
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	6812      	ldr	r2, [r2, #0]
 800666e:	2a00      	cmp	r2, #0
 8006670:	d1c3      	bne.n	80065fa <xTaskResumeAll.part.0+0x92>
		xNextTaskUnblockTime = portMAX_DELAY;
 8006672:	4b0a      	ldr	r3, [pc, #40]	; (800669c <xTaskResumeAll.part.0+0x134>)
 8006674:	f04f 32ff 	mov.w	r2, #4294967295
 8006678:	601a      	str	r2, [r3, #0]
 800667a:	e7c4      	b.n	8006606 <xTaskResumeAll.part.0+0x9e>
 800667c:	4b03      	ldr	r3, [pc, #12]	; (800668c <xTaskResumeAll.part.0+0x124>)
 800667e:	9301      	str	r3, [sp, #4]
 8006680:	e7c1      	b.n	8006606 <xTaskResumeAll.part.0+0x9e>
 8006682:	bf00      	nop
 8006684:	20004994 	.word	0x20004994
 8006688:	2000498c 	.word	0x2000498c
 800668c:	20004a18 	.word	0x20004a18
 8006690:	2000499c 	.word	0x2000499c
 8006694:	200048f4 	.word	0x200048f4
 8006698:	200048f8 	.word	0x200048f8
 800669c:	200049c8 	.word	0x200049c8
 80066a0:	200049d0 	.word	0x200049d0
 80066a4:	200049d4 	.word	0x200049d4
 80066a8:	20004900 	.word	0x20004900

080066ac <xTaskCreateStatic>:
	{
 80066ac:	b530      	push	{r4, r5, lr}
 80066ae:	b087      	sub	sp, #28
 80066b0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 80066b2:	b1c4      	cbz	r4, 80066e6 <xTaskCreateStatic+0x3a>
		configASSERT( pxTaskBuffer != NULL );
 80066b4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80066b6:	b16d      	cbz	r5, 80066d4 <xTaskCreateStatic+0x28>
			volatile size_t xSize = sizeof( StaticTask_t );
 80066b8:	25b4      	movs	r5, #180	; 0xb4
 80066ba:	9505      	str	r5, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80066bc:	9d05      	ldr	r5, [sp, #20]
 80066be:	2db4      	cmp	r5, #180	; 0xb4
 80066c0:	d01a      	beq.n	80066f8 <xTaskCreateStatic+0x4c>
 80066c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c6:	f383 8811 	msr	BASEPRI, r3
 80066ca:	f3bf 8f6f 	isb	sy
 80066ce:	f3bf 8f4f 	dsb	sy
 80066d2:	e7fe      	b.n	80066d2 <xTaskCreateStatic+0x26>
 80066d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d8:	f383 8811 	msr	BASEPRI, r3
 80066dc:	f3bf 8f6f 	isb	sy
 80066e0:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 80066e4:	e7fe      	b.n	80066e4 <xTaskCreateStatic+0x38>
 80066e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ea:	f383 8811 	msr	BASEPRI, r3
 80066ee:	f3bf 8f6f 	isb	sy
 80066f2:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 80066f6:	e7fe      	b.n	80066f6 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80066f8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80066fa:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80066fc:	2402      	movs	r4, #2
 80066fe:	f885 40b1 	strb.w	r4, [r5, #177]	; 0xb1
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006702:	ac04      	add	r4, sp, #16
 8006704:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8006708:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800670a:	9400      	str	r4, [sp, #0]
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800670c:	9c05      	ldr	r4, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800670e:	f7ff fd8d 	bl	800622c <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006712:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006714:	f7ff fcbc 	bl	8006090 <prvAddNewTaskToReadyList>
	}
 8006718:	9804      	ldr	r0, [sp, #16]
 800671a:	b007      	add	sp, #28
 800671c:	bd30      	pop	{r4, r5, pc}
 800671e:	bf00      	nop

08006720 <xTaskCreate>:
	{
 8006720:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006724:	4607      	mov	r7, r0
 8006726:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006728:	0090      	lsls	r0, r2, #2
	{
 800672a:	4615      	mov	r5, r2
 800672c:	4688      	mov	r8, r1
 800672e:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006730:	f7ff f9c2 	bl	8005ab8 <pvPortMalloc>
			if( pxStack != NULL )
 8006734:	b1d8      	cbz	r0, 800676e <xTaskCreate+0x4e>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006736:	4604      	mov	r4, r0
 8006738:	20b4      	movs	r0, #180	; 0xb4
 800673a:	f7ff f9bd 	bl	8005ab8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800673e:	4606      	mov	r6, r0
 8006740:	b1d0      	cbz	r0, 8006778 <xTaskCreate+0x58>
					pxNewTCB->pxStack = pxStack;
 8006742:	6304      	str	r4, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006744:	2400      	movs	r4, #0
 8006746:	f886 40b1 	strb.w	r4, [r6, #177]	; 0xb1
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800674a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800674c:	9401      	str	r4, [sp, #4]
 800674e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8006750:	9602      	str	r6, [sp, #8]
 8006752:	464b      	mov	r3, r9
 8006754:	462a      	mov	r2, r5
 8006756:	4641      	mov	r1, r8
 8006758:	4638      	mov	r0, r7
 800675a:	9400      	str	r4, [sp, #0]
 800675c:	f7ff fd66 	bl	800622c <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006760:	4630      	mov	r0, r6
 8006762:	f7ff fc95 	bl	8006090 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006766:	2001      	movs	r0, #1
	}
 8006768:	b005      	add	sp, #20
 800676a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800676e:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8006772:	b005      	add	sp, #20
 8006774:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8006778:	4620      	mov	r0, r4
 800677a:	f7ff fa55 	bl	8005c28 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800677e:	f04f 30ff 	mov.w	r0, #4294967295
 8006782:	e7f1      	b.n	8006768 <xTaskCreate+0x48>

08006784 <vTaskDelay>:
	{
 8006784:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006786:	b950      	cbnz	r0, 800679e <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8006788:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800678c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006790:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006794:	f3bf 8f4f 	dsb	sy
 8006798:	f3bf 8f6f 	isb	sy
	}
 800679c:	bd10      	pop	{r4, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800679e:	4c10      	ldr	r4, [pc, #64]	; (80067e0 <vTaskDelay+0x5c>)
 80067a0:	6821      	ldr	r1, [r4, #0]
 80067a2:	b141      	cbz	r1, 80067b6 <vTaskDelay+0x32>
 80067a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a8:	f383 8811 	msr	BASEPRI, r3
 80067ac:	f3bf 8f6f 	isb	sy
 80067b0:	f3bf 8f4f 	dsb	sy
 80067b4:	e7fe      	b.n	80067b4 <vTaskDelay+0x30>
	++uxSchedulerSuspended;
 80067b6:	6823      	ldr	r3, [r4, #0]
 80067b8:	3301      	adds	r3, #1
 80067ba:	6023      	str	r3, [r4, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80067bc:	f7ff fcf0 	bl	80061a0 <prvAddCurrentTaskToDelayedList>
	configASSERT( uxSchedulerSuspended );
 80067c0:	6823      	ldr	r3, [r4, #0]
 80067c2:	b943      	cbnz	r3, 80067d6 <vTaskDelay+0x52>
 80067c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c8:	f383 8811 	msr	BASEPRI, r3
 80067cc:	f3bf 8f6f 	isb	sy
 80067d0:	f3bf 8f4f 	dsb	sy
 80067d4:	e7fe      	b.n	80067d4 <vTaskDelay+0x50>
 80067d6:	f7ff fec7 	bl	8006568 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 80067da:	2800      	cmp	r0, #0
 80067dc:	d0d4      	beq.n	8006788 <vTaskDelay+0x4>
	}
 80067de:	bd10      	pop	{r4, pc}
 80067e0:	20004994 	.word	0x20004994

080067e4 <vTaskStartScheduler>:
{
 80067e4:	b570      	push	{r4, r5, r6, lr}
 80067e6:	b084      	sub	sp, #16
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80067e8:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80067ea:	aa02      	add	r2, sp, #8
 80067ec:	a901      	add	r1, sp, #4
 80067ee:	4668      	mov	r0, sp
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80067f0:	e9cd 4400 	strd	r4, r4, [sp]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80067f4:	f7fa f9d6 	bl	8000ba4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80067f8:	9b01      	ldr	r3, [sp, #4]
		configASSERT( puxStackBuffer != NULL );
 80067fa:	b1cb      	cbz	r3, 8006830 <vTaskStartScheduler+0x4c>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80067fc:	9d00      	ldr	r5, [sp, #0]
		configASSERT( pxTaskBuffer != NULL );
 80067fe:	b175      	cbz	r5, 800681e <vTaskStartScheduler+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8006800:	22b4      	movs	r2, #180	; 0xb4
 8006802:	9203      	str	r2, [sp, #12]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006804:	9903      	ldr	r1, [sp, #12]
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006806:	9a02      	ldr	r2, [sp, #8]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006808:	29b4      	cmp	r1, #180	; 0xb4
 800680a:	d01a      	beq.n	8006842 <vTaskStartScheduler+0x5e>
 800680c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006810:	f383 8811 	msr	BASEPRI, r3
 8006814:	f3bf 8f6f 	isb	sy
 8006818:	f3bf 8f4f 	dsb	sy
 800681c:	e7fe      	b.n	800681c <vTaskStartScheduler+0x38>
 800681e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006822:	f383 8811 	msr	BASEPRI, r3
 8006826:	f3bf 8f6f 	isb	sy
 800682a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 800682e:	e7fe      	b.n	800682e <vTaskStartScheduler+0x4a>
 8006830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006834:	f383 8811 	msr	BASEPRI, r3
 8006838:	f3bf 8f6f 	isb	sy
 800683c:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8006840:	e7fe      	b.n	8006840 <vTaskStartScheduler+0x5c>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006842:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8006846:	3a01      	subs	r2, #1
 8006848:	eb03 0282 	add.w	r2, r3, r2, lsl #2
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800684c:	2102      	movs	r1, #2
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800684e:	632b      	str	r3, [r5, #48]	; 0x30
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006850:	4b26      	ldr	r3, [pc, #152]	; (80068ec <vTaskStartScheduler+0x108>)
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006852:	f885 10b1 	strb.w	r1, [r5, #177]	; 0xb1
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006856:	1d28      	adds	r0, r5, #4
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006858:	636b      	str	r3, [r5, #52]	; 0x34
		pxNewTCB->uxMutexesHeld = 0;
 800685a:	e9c5 4411 	strd	r4, r4, [r5, #68]	; 0x44
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800685e:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006862:	f885 4043 	strb.w	r4, [r5, #67]	; 0x43
	pxNewTCB->uxPriority = uxPriority;
 8006866:	62ec      	str	r4, [r5, #44]	; 0x2c
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006868:	f022 0607 	bic.w	r6, r2, #7
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800686c:	9b03      	ldr	r3, [sp, #12]
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800686e:	f7ff fa49 	bl	8005d04 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006872:	f105 0018 	add.w	r0, r5, #24
 8006876:	f7ff fa45 	bl	8005d04 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800687a:	2307      	movs	r3, #7
		pxNewTCB->ulNotifiedValue = 0;
 800687c:	f8c5 40ac 	str.w	r4, [r5, #172]	; 0xac
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006880:	4621      	mov	r1, r4
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006882:	61ab      	str	r3, [r5, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006884:	612d      	str	r5, [r5, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006886:	626d      	str	r5, [r5, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006888:	f885 40b0 	strb.w	r4, [r5, #176]	; 0xb0
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800688c:	2260      	movs	r2, #96	; 0x60
 800688e:	f105 004c 	add.w	r0, r5, #76	; 0x4c
 8006892:	f002 fad7 	bl	8008e44 <memset>
 8006896:	4a16      	ldr	r2, [pc, #88]	; (80068f0 <vTaskStartScheduler+0x10c>)
 8006898:	4b16      	ldr	r3, [pc, #88]	; (80068f4 <vTaskStartScheduler+0x110>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800689a:	4917      	ldr	r1, [pc, #92]	; (80068f8 <vTaskStartScheduler+0x114>)
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800689c:	e9c5 2314 	strd	r2, r3, [r5, #80]	; 0x50
 80068a0:	4b16      	ldr	r3, [pc, #88]	; (80068fc <vTaskStartScheduler+0x118>)
 80068a2:	65ab      	str	r3, [r5, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80068a4:	4622      	mov	r2, r4
 80068a6:	4630      	mov	r0, r6
 80068a8:	f7ff faaa 	bl	8005e00 <pxPortInitialiseStack>
 80068ac:	6028      	str	r0, [r5, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
 80068ae:	4628      	mov	r0, r5
 80068b0:	f7ff fbee 	bl	8006090 <prvAddNewTaskToReadyList>
 80068b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b8:	f383 8811 	msr	BASEPRI, r3
 80068bc:	f3bf 8f6f 	isb	sy
 80068c0:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80068c4:	4a0e      	ldr	r2, [pc, #56]	; (8006900 <vTaskStartScheduler+0x11c>)
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80068c6:	4b0f      	ldr	r3, [pc, #60]	; (8006904 <vTaskStartScheduler+0x120>)
 80068c8:	490f      	ldr	r1, [pc, #60]	; (8006908 <vTaskStartScheduler+0x124>)
 80068ca:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 80068cc:	f04f 30ff 	mov.w	r0, #4294967295
 80068d0:	6010      	str	r0, [r2, #0]
		xSchedulerRunning = pdTRUE;
 80068d2:	4a0e      	ldr	r2, [pc, #56]	; (800690c <vTaskStartScheduler+0x128>)
 80068d4:	2001      	movs	r0, #1
 80068d6:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80068d8:	4a0d      	ldr	r2, [pc, #52]	; (8006910 <vTaskStartScheduler+0x12c>)
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80068da:	334c      	adds	r3, #76	; 0x4c
 80068dc:	600b      	str	r3, [r1, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80068de:	6014      	str	r4, [r2, #0]
}
 80068e0:	b004      	add	sp, #16
 80068e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		if( xPortStartScheduler() != pdFALSE )
 80068e6:	f7ff bb33 	b.w	8005f50 <xPortStartScheduler>
 80068ea:	bf00      	nop
 80068ec:	454c4449 	.word	0x454c4449
 80068f0:	08009398 	.word	0x08009398
 80068f4:	080093b8 	.word	0x080093b8
 80068f8:	08006375 	.word	0x08006375
 80068fc:	08009378 	.word	0x08009378
 8006900:	200049c8 	.word	0x200049c8
 8006904:	200048f4 	.word	0x200048f4
 8006908:	200005ac 	.word	0x200005ac
 800690c:	200049e8 	.word	0x200049e8
 8006910:	20004a14 	.word	0x20004a14

08006914 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8006914:	4a02      	ldr	r2, [pc, #8]	; (8006920 <vTaskSuspendAll+0xc>)
 8006916:	6813      	ldr	r3, [r2, #0]
 8006918:	3301      	adds	r3, #1
 800691a:	6013      	str	r3, [r2, #0]
}
 800691c:	4770      	bx	lr
 800691e:	bf00      	nop
 8006920:	20004994 	.word	0x20004994

08006924 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 8006924:	4b06      	ldr	r3, [pc, #24]	; (8006940 <xTaskResumeAll+0x1c>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	b943      	cbnz	r3, 800693c <xTaskResumeAll+0x18>
 800692a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800692e:	f383 8811 	msr	BASEPRI, r3
 8006932:	f3bf 8f6f 	isb	sy
 8006936:	f3bf 8f4f 	dsb	sy
 800693a:	e7fe      	b.n	800693a <xTaskResumeAll+0x16>
 800693c:	f7ff be14 	b.w	8006568 <xTaskResumeAll.part.0>
 8006940:	20004994 	.word	0x20004994

08006944 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006944:	4b05      	ldr	r3, [pc, #20]	; (800695c <xTaskIncrementTick+0x18>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	b90b      	cbnz	r3, 800694e <xTaskIncrementTick+0xa>
 800694a:	f7ff bd63 	b.w	8006414 <xTaskIncrementTick.part.0>
		++xPendedTicks;
 800694e:	4a04      	ldr	r2, [pc, #16]	; (8006960 <xTaskIncrementTick+0x1c>)
 8006950:	6813      	ldr	r3, [r2, #0]
 8006952:	3301      	adds	r3, #1
}
 8006954:	2000      	movs	r0, #0
		++xPendedTicks;
 8006956:	6013      	str	r3, [r2, #0]
}
 8006958:	4770      	bx	lr
 800695a:	bf00      	nop
 800695c:	20004994 	.word	0x20004994
 8006960:	200049d0 	.word	0x200049d0

08006964 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006964:	4b18      	ldr	r3, [pc, #96]	; (80069c8 <vTaskSwitchContext+0x64>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	b11b      	cbz	r3, 8006972 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 800696a:	4b18      	ldr	r3, [pc, #96]	; (80069cc <vTaskSwitchContext+0x68>)
 800696c:	2201      	movs	r2, #1
 800696e:	601a      	str	r2, [r3, #0]
 8006970:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8006972:	4916      	ldr	r1, [pc, #88]	; (80069cc <vTaskSwitchContext+0x68>)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006974:	4a16      	ldr	r2, [pc, #88]	; (80069d0 <vTaskSwitchContext+0x6c>)
		xYieldPending = pdFALSE;
 8006976:	600b      	str	r3, [r1, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006978:	6813      	ldr	r3, [r2, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800697a:	fab3 f383 	clz	r3, r3
 800697e:	b2db      	uxtb	r3, r3
 8006980:	f1c3 031f 	rsb	r3, r3, #31
 8006984:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006988:	4a12      	ldr	r2, [pc, #72]	; (80069d4 <vTaskSwitchContext+0x70>)
 800698a:	0099      	lsls	r1, r3, #2
 800698c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006990:	5850      	ldr	r0, [r2, r1]
 8006992:	b940      	cbnz	r0, 80069a6 <vTaskSwitchContext+0x42>
	__asm volatile
 8006994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006998:	f383 8811 	msr	BASEPRI, r3
 800699c:	f3bf 8f6f 	isb	sy
 80069a0:	f3bf 8f4f 	dsb	sy
 80069a4:	e7fe      	b.n	80069a4 <vTaskSwitchContext+0x40>
 80069a6:	6858      	ldr	r0, [r3, #4]
 80069a8:	3108      	adds	r1, #8
 80069aa:	6840      	ldr	r0, [r0, #4]
 80069ac:	6058      	str	r0, [r3, #4]
 80069ae:	440a      	add	r2, r1
 80069b0:	4290      	cmp	r0, r2
 80069b2:	bf04      	itt	eq
 80069b4:	6840      	ldreq	r0, [r0, #4]
 80069b6:	6058      	streq	r0, [r3, #4]
 80069b8:	4b07      	ldr	r3, [pc, #28]	; (80069d8 <vTaskSwitchContext+0x74>)
 80069ba:	68c2      	ldr	r2, [r0, #12]
 80069bc:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a06      	ldr	r2, [pc, #24]	; (80069dc <vTaskSwitchContext+0x78>)
 80069c2:	334c      	adds	r3, #76	; 0x4c
 80069c4:	6013      	str	r3, [r2, #0]
}
 80069c6:	4770      	bx	lr
 80069c8:	20004994 	.word	0x20004994
 80069cc:	20004a18 	.word	0x20004a18
 80069d0:	2000499c 	.word	0x2000499c
 80069d4:	20004900 	.word	0x20004900
 80069d8:	200048f4 	.word	0x200048f4
 80069dc:	200005ac 	.word	0x200005ac

080069e0 <vTaskSuspend>:
	{
 80069e0:	b570      	push	{r4, r5, r6, lr}
 80069e2:	4604      	mov	r4, r0
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80069e4:	4e37      	ldr	r6, [pc, #220]	; (8006ac4 <vTaskSuspend+0xe4>)
		taskENTER_CRITICAL();
 80069e6:	f7ff fa35 	bl	8005e54 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80069ea:	2c00      	cmp	r4, #0
 80069ec:	d04b      	beq.n	8006a86 <vTaskSuspend+0xa6>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80069ee:	1d25      	adds	r5, r4, #4
 80069f0:	4628      	mov	r0, r5
 80069f2:	f7ff f9b3 	bl	8005d5c <uxListRemove>
 80069f6:	b930      	cbnz	r0, 8006a06 <vTaskSuspend+0x26>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80069f8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80069fa:	4933      	ldr	r1, [pc, #204]	; (8006ac8 <vTaskSuspend+0xe8>)
 80069fc:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	58cb      	ldr	r3, [r1, r3]
 8006a04:	b343      	cbz	r3, 8006a58 <vTaskSuspend+0x78>
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006a06:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006a08:	b11b      	cbz	r3, 8006a12 <vTaskSuspend+0x32>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a0a:	f104 0018 	add.w	r0, r4, #24
 8006a0e:	f7ff f9a5 	bl	8005d5c <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8006a12:	4629      	mov	r1, r5
 8006a14:	482d      	ldr	r0, [pc, #180]	; (8006acc <vTaskSuspend+0xec>)
		if( xSchedulerRunning != pdFALSE )
 8006a16:	4d2e      	ldr	r5, [pc, #184]	; (8006ad0 <vTaskSuspend+0xf0>)
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8006a18:	f7ff f978 	bl	8005d0c <vListInsertEnd>
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8006a1c:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
 8006a20:	2b01      	cmp	r3, #1
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006a22:	bf04      	itt	eq
 8006a24:	2300      	moveq	r3, #0
 8006a26:	f884 30b0 	strbeq.w	r3, [r4, #176]	; 0xb0
		taskEXIT_CRITICAL();
 8006a2a:	f7ff fa35 	bl	8005e98 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 8006a2e:	682b      	ldr	r3, [r5, #0]
 8006a30:	b9d3      	cbnz	r3, 8006a68 <vTaskSuspend+0x88>
		if( pxTCB == pxCurrentTCB )
 8006a32:	6833      	ldr	r3, [r6, #0]
 8006a34:	42a3      	cmp	r3, r4
 8006a36:	d000      	beq.n	8006a3a <vTaskSuspend+0x5a>
	}
 8006a38:	bd70      	pop	{r4, r5, r6, pc}
			if( xSchedulerRunning != pdFALSE )
 8006a3a:	682b      	ldr	r3, [r5, #0]
 8006a3c:	b353      	cbz	r3, 8006a94 <vTaskSuspend+0xb4>
				configASSERT( uxSchedulerSuspended == 0 );
 8006a3e:	4b25      	ldr	r3, [pc, #148]	; (8006ad4 <vTaskSuspend+0xf4>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d02e      	beq.n	8006aa4 <vTaskSuspend+0xc4>
 8006a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a4a:	f383 8811 	msr	BASEPRI, r3
 8006a4e:	f3bf 8f6f 	isb	sy
 8006a52:	f3bf 8f4f 	dsb	sy
 8006a56:	e7fe      	b.n	8006a56 <vTaskSuspend+0x76>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006a58:	491f      	ldr	r1, [pc, #124]	; (8006ad8 <vTaskSuspend+0xf8>)
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	4093      	lsls	r3, r2
 8006a5e:	680a      	ldr	r2, [r1, #0]
 8006a60:	ea22 0203 	bic.w	r2, r2, r3
 8006a64:	600a      	str	r2, [r1, #0]
 8006a66:	e7ce      	b.n	8006a06 <vTaskSuspend+0x26>
			taskENTER_CRITICAL();
 8006a68:	f7ff f9f4 	bl	8005e54 <vPortEnterCritical>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a6c:	4b1b      	ldr	r3, [pc, #108]	; (8006adc <vTaskSuspend+0xfc>)
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	6812      	ldr	r2, [r2, #0]
 8006a72:	b152      	cbz	r2, 8006a8a <vTaskSuspend+0xaa>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a74:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006a76:	4b1a      	ldr	r3, [pc, #104]	; (8006ae0 <vTaskSuspend+0x100>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a78:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006a7a:	68d2      	ldr	r2, [r2, #12]
 8006a7c:	6852      	ldr	r2, [r2, #4]
 8006a7e:	601a      	str	r2, [r3, #0]
			taskEXIT_CRITICAL();
 8006a80:	f7ff fa0a 	bl	8005e98 <vPortExitCritical>
 8006a84:	e7d5      	b.n	8006a32 <vTaskSuspend+0x52>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8006a86:	6834      	ldr	r4, [r6, #0]
 8006a88:	e7b1      	b.n	80069ee <vTaskSuspend+0xe>
		xNextTaskUnblockTime = portMAX_DELAY;
 8006a8a:	4b15      	ldr	r3, [pc, #84]	; (8006ae0 <vTaskSuspend+0x100>)
 8006a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8006a90:	601a      	str	r2, [r3, #0]
 8006a92:	e7f5      	b.n	8006a80 <vTaskSuspend+0xa0>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8006a94:	490d      	ldr	r1, [pc, #52]	; (8006acc <vTaskSuspend+0xec>)
 8006a96:	4a13      	ldr	r2, [pc, #76]	; (8006ae4 <vTaskSuspend+0x104>)
 8006a98:	6809      	ldr	r1, [r1, #0]
 8006a9a:	6812      	ldr	r2, [r2, #0]
 8006a9c:	4291      	cmp	r1, r2
 8006a9e:	d10c      	bne.n	8006aba <vTaskSuspend+0xda>
					pxCurrentTCB = NULL;
 8006aa0:	6033      	str	r3, [r6, #0]
	}
 8006aa2:	bd70      	pop	{r4, r5, r6, pc}
				portYIELD_WITHIN_API();
 8006aa4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006aa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006aac:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006ab0:	f3bf 8f4f 	dsb	sy
 8006ab4:	f3bf 8f6f 	isb	sy
	}
 8006ab8:	bd70      	pop	{r4, r5, r6, pc}
 8006aba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					vTaskSwitchContext();
 8006abe:	f7ff bf51 	b.w	8006964 <vTaskSwitchContext>
 8006ac2:	bf00      	nop
 8006ac4:	200048f4 	.word	0x200048f4
 8006ac8:	20004900 	.word	0x20004900
 8006acc:	200049ec 	.word	0x200049ec
 8006ad0:	200049e8 	.word	0x200049e8
 8006ad4:	20004994 	.word	0x20004994
 8006ad8:	2000499c 	.word	0x2000499c
 8006adc:	200048f8 	.word	0x200048f8
 8006ae0:	200049c8 	.word	0x200049c8
 8006ae4:	2000498c 	.word	0x2000498c

08006ae8 <VBS_GetAvBusVoltage_V>:
  */
__weak uint16_t VBS_GetAvBusVoltage_V( BusVoltageSensor_Handle_t * pHandle )
{
  uint32_t temp;

  temp = ( uint32_t )( pHandle->AvBusVoltage_d );
 8006ae8:	88c3      	ldrh	r3, [r0, #6]
  temp *= pHandle->ConversionFactor;
 8006aea:	8840      	ldrh	r0, [r0, #2]
 8006aec:	fb03 f000 	mul.w	r0, r3, r0
  temp /= 65536u;

  return ( ( uint16_t )temp );
}
 8006af0:	0c00      	lsrs	r0, r0, #16
 8006af2:	4770      	bx	lr

08006af4 <Circle_Limitation>:
  * @param  pHandle pointer on the related component instance
  * @param  Vqd Voltage in qd reference frame
  * @retval qd_t Limited Vqd vector
  */
__weak qd_t Circle_Limitation( CircleLimitation_Handle_t * pHandle, qd_t Vqd )
{
 8006af4:	140b      	asrs	r3, r1, #16
            ( int32_t )( Vqd.d ) * Vqd.d;

  uw_temp = ( uint32_t ) sw_temp;

  /* uw_temp min value 0, max value 32767*32767 */
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8006af6:	8802      	ldrh	r2, [r0, #0]
 8006af8:	b209      	sxth	r1, r1
            ( int32_t )( Vqd.d ) * Vqd.d;
 8006afa:	fb03 fc03 	mul.w	ip, r3, r3
  sw_temp = ( int32_t )( Vqd.q ) * Vqd.q +
 8006afe:	fb01 cc01 	mla	ip, r1, r1, ip
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8006b02:	fb02 f202 	mul.w	r2, r2, r2
 8006b06:	4562      	cmp	r2, ip
{
 8006b08:	b084      	sub	sp, #16
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8006b0a:	d21a      	bcs.n	8006b42 <Circle_Limitation+0x4e>
  {

    uw_temp /= ( uint32_t )( 16777216 );

    /* wtemp min value pHandle->Start_index, max value 127 */
    uw_temp -= pHandle->Start_index;
 8006b0c:	f890 20b2 	ldrb.w	r2, [r0, #178]	; 0xb2
 8006b10:	ebc2 6c1c 	rsb	ip, r2, ip, lsr #24

    /* uw_temp min value 0, max value 127 - pHandle->Start_index */
    table_element = pHandle->Circle_limit_table[( uint8_t )uw_temp];
 8006b14:	fa5f fc8c 	uxtb.w	ip, ip
 8006b18:	eb00 004c 	add.w	r0, r0, ip, lsl #1

    sw_temp = Vqd.q * ( int32_t )table_element;
 8006b1c:	8882      	ldrh	r2, [r0, #4]
 8006b1e:	fb02 f101 	mul.w	r1, r2, r1
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 8006b22:	2900      	cmp	r1, #0

    sw_temp = Vqd.d * ( int32_t )( table_element );
 8006b24:	fb02 f303 	mul.w	r3, r2, r3
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 8006b28:	bfbc      	itt	lt
 8006b2a:	f501 41ff 	addlt.w	r1, r1, #32640	; 0x7f80
 8006b2e:	317f      	addlt	r1, #127	; 0x7f
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	bfbc      	itt	lt
 8006b34:	f503 43ff 	addlt.w	r3, r3, #32640	; 0x7f80
 8006b38:	337f      	addlt	r3, #127	; 0x7f
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 8006b3a:	f341 31cf 	sbfx	r1, r1, #15, #16
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 8006b3e:	f343 33cf 	sbfx	r3, r3, #15, #16
  }

  return ( local_vqd );
 8006b42:	b289      	uxth	r1, r1
 8006b44:	2000      	movs	r0, #0
 8006b46:	f361 000f 	bfi	r0, r1, #0, #16
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	f363 401f 	bfi	r0, r3, #16, #16
}
 8006b50:	b004      	add	sp, #16
 8006b52:	4770      	bx	lr

08006b54 <FCP_Init>:
 * @{
 */

__weak void FCP_Init( FCP_Handle_t * pHandle )
{
  pHandle->RxTimeoutCountdown = 0;
 8006b54:	2300      	movs	r3, #0
 8006b56:	8243      	strh	r3, [r0, #18]

  pHandle->TxFrame.Code = 0x0;
 8006b58:	8283      	strh	r3, [r0, #20]
  pHandle->TxFrame.Size = 0;
  pHandle->TxFrame.FrameCRC = 0;
 8006b5a:	f8c0 3096 	str.w	r3, [r0, #150]	; 0x96
  pHandle->TxFrameState = FCP_TRANSFER_IDLE;
  pHandle->TxFrameLevel = 0;

  pHandle->RxFrame.Code = 0x0;
  pHandle->RxFrame.Size = 0;
 8006b5e:	f880 309a 	strb.w	r3, [r0, #154]	; 0x9a
  pHandle->RxFrame.FrameCRC = 0;
 8006b62:	f8a0 311b 	strh.w	r3, [r0, #283]	; 0x11b
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
  pHandle->RxFrameLevel = 0;
 8006b66:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
}
 8006b6a:	4770      	bx	lr

08006b6c <FCP_SetClient>:
                    struct MCP_Handle_s * pClient,
                    FCP_SentFrameCallback_t pSentFrameCb,
                    FCP_ReceivedFrameCallback_t pReceviedFrameCb,
                    FCP_RxTimeoutCallback_t pRxTimeoutCb )
{
  if ( MC_NULL != pHandle )
 8006b6c:	b120      	cbz	r0, 8006b78 <FCP_SetClient+0xc>
  {
    pHandle->ClientEntity = pClient;
    pHandle->ClientFrameSentCallback = pSentFrameCb;
 8006b6e:	e9c0 1200 	strd	r1, r2, [r0]
    pHandle->ClientFrameReceivedCallback = pReceviedFrameCb;
 8006b72:	6083      	str	r3, [r0, #8]
    pHandle->ClientRxTimeoutCallback = pRxTimeoutCb;
 8006b74:	9b00      	ldr	r3, [sp, #0]
 8006b76:	60c3      	str	r3, [r0, #12]
  }
}
 8006b78:	4770      	bx	lr
 8006b7a:	bf00      	nop

08006b7c <FCP_CalcCRC>:
{
  uint8_t nCRC = 0;
  uint16_t nSum = 0;
  uint8_t idx;

  if( MC_NULL != pFrame )
 8006b7c:	b190      	cbz	r0, 8006ba4 <FCP_CalcCRC+0x28>
  {
    nSum += pFrame->Code;
    nSum += pFrame->Size;
 8006b7e:	7841      	ldrb	r1, [r0, #1]
    nSum += pFrame->Code;
 8006b80:	7802      	ldrb	r2, [r0, #0]
    nSum += pFrame->Size;
 8006b82:	1853      	adds	r3, r2, r1

    for ( idx = 0; idx < pFrame->Size; idx++ )
 8006b84:	b151      	cbz	r1, 8006b9c <FCP_CalcCRC+0x20>
 8006b86:	1c82      	adds	r2, r0, #2
 8006b88:	3901      	subs	r1, #1
 8006b8a:	3001      	adds	r0, #1
 8006b8c:	fa52 f181 	uxtab	r1, r2, r1
    {
      nSum += pFrame->Buffer[idx];
 8006b90:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8006b94:	4413      	add	r3, r2
    for ( idx = 0; idx < pFrame->Size; idx++ )
 8006b96:	4281      	cmp	r1, r0
      nSum += pFrame->Buffer[idx];
 8006b98:	b29b      	uxth	r3, r3
    for ( idx = 0; idx < pFrame->Size; idx++ )
 8006b9a:	d1f9      	bne.n	8006b90 <FCP_CalcCRC+0x14>
    }

    nCRC = (uint8_t)(nSum & 0xFF) ; // Low Byte of nSum
    nCRC += (uint8_t) (nSum >> 8) ; // High Byte of nSum
 8006b9c:	eb03 2013 	add.w	r0, r3, r3, lsr #8
 8006ba0:	f000 00ff 	and.w	r0, r0, #255	; 0xff
  }

  return nCRC ;
}
 8006ba4:	4770      	bx	lr
 8006ba6:	bf00      	nop

08006ba8 <HALL_Init>:
            sensors.
  * @param  pHandle: handler of the current instance of the hall_speed_pos_fdbk component
  * @retval none
  */
__weak void HALL_Init( HALL_Handle_t * pHandle )
{
 8006ba8:	b530      	push	{r4, r5, lr}
  TIM_TypeDef * TIMx = pHandle->TIMx;

  uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit *
 8006baa:	f8b0 c016 	ldrh.w	ip, [r0, #22]
                                     pHandle->_Super.bElToMecRatio;
 8006bae:	7843      	ldrb	r3, [r0, #1]
  reliable speed */
  hMinReliableElSpeedUnit /= 4u;

  /* Adjustment factor: maximum measurable speed is x time greater than the
  maximum reliable speed */
  hMaxReliableElSpeedUnit *= 2u;
 8006bb0:	f8b0 e014 	ldrh.w	lr, [r0, #20]

  pHandle->OvfFreq = ( uint16_t )( pHandle->TIMClockFreq / 65536u );
 8006bb4:	6a82      	ldr	r2, [r0, #40]	; 0x28
  uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit *
 8006bb6:	fb1c fc03 	smulbb	ip, ip, r3
  hMaxReliableElSpeedUnit *= 2u;
 8006bba:	fb1e fe03 	smulbb	lr, lr, r3
  uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit *
 8006bbe:	fa1f fc8c 	uxth.w	ip, ip
  hMaxReliableElSpeedUnit *= 2u;
 8006bc2:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
  pHandle->OvfFreq = ( uint16_t )( pHandle->TIMClockFreq / 65536u );
 8006bc6:	0c11      	lsrs	r1, r2, #16

  /* SW Init */
  if ( hMinReliableElSpeedUnit == 0u )
 8006bc8:	f1bc 0f03 	cmp.w	ip, #3
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8006bcc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  pHandle->OvfFreq = ( uint16_t )( pHandle->TIMClockFreq / 65536u );
 8006bce:	f8a0 10c2 	strh.w	r1, [r0, #194]	; 0xc2
  hMaxReliableElSpeedUnit *= 2u;
 8006bd2:	fa1f fe8e 	uxth.w	lr, lr
  if ( hMinReliableElSpeedUnit == 0u )
 8006bd6:	d96d      	bls.n	8006cb4 <HALL_Init+0x10c>
  else
  {
    /* Set accordingly the min reliable speed */
    /* 1000 comes from mS 
    * 6 comes from the fact that sensors are toggling each 60 deg = 360/6 deg */
    pHandle->HallTimeout = 1000*SPEED_UNIT / ( 6u * hMinReliableElSpeedUnit );
 8006bd8:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
 8006bdc:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8006be0:	f242 7410 	movw	r4, #10000	; 0x2710
 8006be4:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8006be8:	fbb4 fcfc 	udiv	ip, r4, ip
 8006bec:	fa1f f48c 	uxth.w	r4, ip
 8006bf0:	f8a0 40c0 	strh.w	r4, [r0, #192]	; 0xc0
  }

  /* Compute the prescaler to the closet value of the TimeOut (in mS )*/
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 8006bf4:	4c31      	ldr	r4, [pc, #196]	; (8006cbc <HALL_Init+0x114>)
  pHandle->MaxPeriod = ( pHandle->HALLMaxRatio ) * 65536uL;

  pHandle->SatSpeed = hMaxReliableElSpeedUnit;

  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
                              / ( pHandle->_Super.hMeasurementFrequency ) ) * ( pHandle->_Super.DPPConvFactor);
 8006bf6:	69c5      	ldr	r5, [r0, #28]
  pHandle->SatSpeed = hMaxReliableElSpeedUnit;
 8006bf8:	f8a0 e0b0 	strh.w	lr, [r0, #176]	; 0xb0
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 8006bfc:	fb0c f101 	mul.w	r1, ip, r1
 8006c00:	fba4 4101 	umull	r4, r1, r4, r1
  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 8006c04:	4c2e      	ldr	r4, [pc, #184]	; (8006cc0 <HALL_Init+0x118>)
                              / ( pHandle->_Super.hMeasurementFrequency ) ) * ( pHandle->_Super.DPPConvFactor);
 8006c06:	f8b0 c01a 	ldrh.w	ip, [r0, #26]
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 8006c0a:	0989      	lsrs	r1, r1, #6
  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 8006c0c:	fba4 4202 	umull	r4, r2, r4, r2
 8006c10:	0892      	lsrs	r2, r2, #2
  pHandle->MaxPeriod = ( pHandle->HALLMaxRatio ) * 65536uL;
 8006c12:	040c      	lsls	r4, r1, #16
 8006c14:	f8c0 40b8 	str.w	r4, [r0, #184]	; 0xb8

  pHandle->MinPeriod = ( ( SPEED_UNIT * ( pHandle->TIMClockFreq /6uL) ) 
 8006c18:	eb02 0482 	add.w	r4, r2, r2, lsl #2
                              / ( pHandle->_Super.hMeasurementFrequency ) ) * ( pHandle->_Super.DPPConvFactor);
 8006c1c:	fbb2 f2fc 	udiv	r2, r2, ip
 8006c20:	fb05 f202 	mul.w	r2, r5, r2
  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 8006c24:	f8c0 20b4 	str.w	r2, [r0, #180]	; 0xb4
                       / hMaxReliableElSpeedUnit);

  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8006c28:	f890 20c6 	ldrb.w	r2, [r0, #198]	; 0xc6
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 8006c2c:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
  pHandle->MinPeriod = ( ( SPEED_UNIT * ( pHandle->TIMClockFreq /6uL) ) 
 8006c30:	0064      	lsls	r4, r4, #1
                       / hMaxReliableElSpeedUnit);
 8006c32:	fbb4 f4fe 	udiv	r4, r4, lr
  pHandle->MinPeriod = ( ( SPEED_UNIT * ( pHandle->TIMClockFreq /6uL) ) 
 8006c36:	f8c0 40bc 	str.w	r4, [r0, #188]	; 0xbc
  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8006c3a:	fb0c f202 	mul.w	r2, ip, r2
                                   pHandle->SpeedSamplingFreqHz ) - 1u;
 8006c3e:	8c84      	ldrh	r4, [r0, #36]	; 0x24
  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8006c40:	fbb2 f2f4 	udiv	r2, r2, r4
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8006c44:	699c      	ldr	r4, [r3, #24]
                                   pHandle->SpeedSamplingFreqHz ) - 1u;
 8006c46:	3a01      	subs	r2, #1
  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8006c48:	f8a0 20c4 	strh.w	r2, [r0, #196]	; 0xc4

  /* Reset speed reliability */
  pHandle->SensorIsReliable = true;

  /* Set IC filter for Channel 1 (ICF1) */
  LL_TIM_IC_SetFilter(TIMx, LL_TIM_CHANNEL_CH1, ( uint32_t )(pHandle->ICx_Filter) << 20);
 8006c4c:	f890 2048 	ldrb.w	r2, [r0, #72]	; 0x48
 8006c50:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
  pHandle->MaxPeriod = ( pHandle->HALLMaxRatio ) * 65536uL;
 8006c54:	b289      	uxth	r1, r1
  pHandle->SensorIsReliable = true;
 8006c56:	2401      	movs	r4, #1
 8006c58:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4
 8006c5c:	f880 4049 	strb.w	r4, [r0, #73]	; 0x49
 8006c60:	619a      	str	r2, [r3, #24]
  WRITE_REG(TIMx->PSC, Prescaler);
 8006c62:	6299      	str	r1, [r3, #40]	; 0x28
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8006c64:	695a      	ldr	r2, [r3, #20]
  LL_TIM_SetPrescaler ( TIMx, pHandle->HALLMaxRatio );
  LL_TIM_GenerateEvent_UPDATE ( TIMx );


  /* Clear the TIMx's pending flags */
  WRITE_REG (TIMx->SR, 0);
 8006c66:	2100      	movs	r1, #0
 8006c68:	4322      	orrs	r2, r4
 8006c6a:	615a      	str	r2, [r3, #20]
 8006c6c:	6119      	str	r1, [r3, #16]
  MODIFY_REG(TIMx->CR1, TIM_CR1_URS, UpdateSource);
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	f042 0204 	orr.w	r2, r2, #4
 8006c74:	601a      	str	r2, [r3, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8006c76:	68da      	ldr	r2, [r3, #12]
 8006c78:	f042 0202 	orr.w	r2, r2, #2
 8006c7c:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8006c7e:	68da      	ldr	r2, [r3, #12]
 8006c80:	4322      	orrs	r2, r4
 8006c82:	60da      	str	r2, [r3, #12]
  WRITE_REG(TIMx->CNT, Counter);
 8006c84:	6259      	str	r1, [r3, #36]	; 0x24
  SET_BIT(TIMx->CCER, Channels);
 8006c86:	6a1a      	ldr	r2, [r3, #32]
 8006c88:	4322      	orrs	r2, r4
 8006c8a:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8006c8c:	681a      	ldr	r2, [r3, #0]
 8006c8e:	4322      	orrs	r2, r4
 8006c90:	601a      	str	r2, [r3, #0]
  LL_TIM_CC_EnableChannel  ( TIMx, LL_TIM_CHANNEL_CH1 );
  LL_TIM_EnableCounter ( TIMx );


  /* Erase speed buffer */
  bSpeedBufferSize = pHandle->SpeedBufferSize;
 8006c92:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26

  for ( bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++ )
 8006c96:	b163      	cbz	r3, 8006cb2 <HALL_Init+0x10a>
 8006c98:	3b01      	subs	r3, #1
 8006c9a:	b2d9      	uxtb	r1, r3
 8006c9c:	f100 0350 	add.w	r3, r0, #80	; 0x50
  {
    pHandle->SensorPeriod[bIndex]  = pHandle->MaxPeriod;
 8006ca0:	f8d0 20b8 	ldr.w	r2, [r0, #184]	; 0xb8
 8006ca4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8006ca8:	304c      	adds	r0, #76	; 0x4c
 8006caa:	f840 2f04 	str.w	r2, [r0, #4]!
  for ( bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++ )
 8006cae:	4298      	cmp	r0, r3
 8006cb0:	d1fb      	bne.n	8006caa <HALL_Init+0x102>
  }
}
 8006cb2:	bd30      	pop	{r4, r5, pc}
 8006cb4:	f04f 0c96 	mov.w	ip, #150	; 0x96
    pHandle->HallTimeout = 150u;
 8006cb8:	4664      	mov	r4, ip
 8006cba:	e799      	b.n	8006bf0 <HALL_Init+0x48>
 8006cbc:	10624dd3 	.word	0x10624dd3
 8006cc0:	aaaaaaab 	.word	0xaaaaaaab

08006cc4 <HALL_Clear>:
* @param  pHandle: handler of the current instance of the hall_speed_pos_fdbk component*
* @retval none
*/
__weak void HALL_Clear( HALL_Handle_t * pHandle )
{
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8006cc4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  CLEAR_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8006cc6:	68d1      	ldr	r1, [r2, #12]
 8006cc8:	f021 0102 	bic.w	r1, r1, #2

  /* Mask interrupts to insure a clean intialization */
  LL_TIM_DisableIT_CC1 ( TIMx );

  pHandle->RatioDec = false;
 8006ccc:	2300      	movs	r3, #0
{
 8006cce:	b430      	push	{r4, r5}

  /* Clear speed error counter */
  pHandle->_Super.bSpeedErrorNumber = 0;
  
  /* Re-initialize partly the timer */
  LL_TIM_SetPrescaler ( TIMx, pHandle->HALLMaxRatio );
 8006cd0:	f8b0 40ae 	ldrh.w	r4, [r0, #174]	; 0xae
 8006cd4:	60d1      	str	r1, [r2, #12]
  pHandle->SensorIsReliable = true;
 8006cd6:	2101      	movs	r1, #1
  pHandle->RatioDec = false;
 8006cd8:	f880 304a 	strb.w	r3, [r0, #74]	; 0x4a
  pHandle->Direction = POSITIVE;
 8006cdc:	f880 10a2 	strb.w	r1, [r0, #162]	; 0xa2
  pHandle->RatioInc = false;
 8006ce0:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
  pHandle->SpeedFIFOIdx = 0u;
 8006ce4:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98
  pHandle->FirstCapt = 0u;
 8006ce8:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
  pHandle->_Super.bSpeedErrorNumber = 0;
 8006cec:	7003      	strb	r3, [r0, #0]
  pHandle->BufferFilled = 0u;
 8006cee:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
  pHandle->_Super.hMecAccelUnitP = 0;
 8006cf2:	8243      	strh	r3, [r0, #18]
  pHandle->OVFCounter = 0u;
 8006cf4:	f880 304e 	strb.w	r3, [r0, #78]	; 0x4e
  pHandle->CompSpeed = 0;
 8006cf8:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
  pHandle->SensorIsReliable = true;
 8006cfc:	f880 1049 	strb.w	r1, [r0, #73]	; 0x49
  WRITE_REG(TIMx->PSC, Prescaler);
 8006d00:	6294      	str	r4, [r2, #40]	; 0x28
  WRITE_REG(TIMx->CNT, Counter);
 8006d02:	6253      	str	r3, [r2, #36]	; 0x24
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8006d04:	6813      	ldr	r3, [r2, #0]
 8006d06:	430b      	orrs	r3, r1
 8006d08:	6013      	str	r3, [r2, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8006d0a:	68d3      	ldr	r3, [r2, #12]
 8006d0c:	f043 0302 	orr.w	r3, r3, #2
 8006d10:	60d3      	str	r3, [r2, #12]
* @retval none
*/
static void HALL_Init_Electrical_Angle( HALL_Handle_t * pHandle )
{

  if ( pHandle->SensorPlacement == DEGREES_120 )
 8006d12:	f890 3020 	ldrb.w	r3, [r0, #32]
 8006d16:	bb0b      	cbnz	r3, 8006d5c <HALL_Clear+0x98>
  {
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 8006d18:	6c02      	ldr	r2, [r0, #64]	; 0x40
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 8006d1a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8006d1c:	6911      	ldr	r1, [r2, #16]
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 8006d1e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006d20:	691d      	ldr	r5, [r3, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 8006d22:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8006d24:	438a      	bics	r2, r1
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8006d26:	e9d0 120c 	ldrd	r1, r2, [r0, #48]	; 0x30
 8006d2a:	bf0c      	ite	eq
 8006d2c:	2401      	moveq	r4, #1
 8006d2e:	2400      	movne	r4, #0
 8006d30:	43ab      	bics	r3, r5
 8006d32:	bf0c      	ite	eq
 8006d34:	2301      	moveq	r3, #1
 8006d36:	2300      	movne	r3, #0
 8006d38:	6909      	ldr	r1, [r1, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 8006d3a:	005b      	lsls	r3, r3, #1
 8006d3c:	ea43 0384 	orr.w	r3, r3, r4, lsl #2
 8006d40:	438a      	bics	r2, r1
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8006d42:	bf08      	it	eq
 8006d44:	f043 0301 	orreq.w	r3, r3, #1
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
  }

  switch ( pHandle->HallState )
 8006d48:	1e5a      	subs	r2, r3, #1
 8006d4a:	f880 30a6 	strb.w	r3, [r0, #166]	; 0xa6
 8006d4e:	2a05      	cmp	r2, #5
 8006d50:	d85c      	bhi.n	8006e0c <HALL_Clear+0x148>
 8006d52:	e8df f002 	tbb	[pc, r2]
 8006d56:	3329      	.short	0x3329
 8006d58:	1f51473d 	.word	0x1f51473d
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 8006d5c:	6b82      	ldr	r2, [r0, #56]	; 0x38
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
 8006d5e:	6c01      	ldr	r1, [r0, #64]	; 0x40
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8006d60:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8006d62:	6914      	ldr	r4, [r2, #16]
 8006d64:	6909      	ldr	r1, [r1, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
 8006d66:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006d68:	691d      	ldr	r5, [r3, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8006d6a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006d6c:	438a      	bics	r2, r1
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 8006d6e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006d70:	bf0c      	ite	eq
 8006d72:	2101      	moveq	r1, #1
 8006d74:	2100      	movne	r1, #0
 8006d76:	43ab      	bics	r3, r5
 8006d78:	bf0c      	ite	eq
 8006d7a:	2301      	moveq	r3, #1
 8006d7c:	2300      	movne	r3, #0
 8006d7e:	43a2      	bics	r2, r4
 8006d80:	bf0c      	ite	eq
 8006d82:	2201      	moveq	r2, #1
 8006d84:	2200      	movne	r2, #0
 8006d86:	0092      	lsls	r2, r2, #2
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8006d88:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 8006d8c:	f082 0204 	eor.w	r2, r2, #4
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8006d90:	4313      	orrs	r3, r2
 8006d92:	e7d9      	b.n	8006d48 <HALL_Clear+0x84>
    case STATE_2:
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
                                              S16_60_PHASE_SHIFT / 2 );
      break;
    case STATE_6:
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT -
 8006d94:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8006d96:	f5a3 537f 	sub.w	r3, r3, #16320	; 0x3fc0
 8006d9a:	3b3f      	subs	r3, #63	; 0x3f
 8006d9c:	b21b      	sxth	r3, r3
 8006d9e:	8083      	strh	r3, [r0, #4]
}
 8006da0:	bc30      	pop	{r4, r5}
      pHandle->SensorIsReliable = false;
      break;
  }

  /* Initialize the measured angle */
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8006da2:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 8006da6:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT +
 8006da8:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8006daa:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8006dae:	333f      	adds	r3, #63	; 0x3f
 8006db0:	b21b      	sxth	r3, r3
}
 8006db2:	bc30      	pop	{r4, r5}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT +
 8006db4:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8006db6:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 8006dba:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
 8006dbc:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8006dbe:	f5a3 43d5 	sub.w	r3, r3, #27264	; 0x6a80
 8006dc2:	3b2a      	subs	r3, #42	; 0x2a
 8006dc4:	b21b      	sxth	r3, r3
}
 8006dc6:	bc30      	pop	{r4, r5}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
 8006dc8:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8006dca:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 8006dce:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 8006dd0:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8006dd2:	f503 43d5 	add.w	r3, r3, #27264	; 0x6a80
 8006dd6:	332a      	adds	r3, #42	; 0x2a
 8006dd8:	b21b      	sxth	r3, r3
}
 8006dda:	bc30      	pop	{r4, r5}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 8006ddc:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8006dde:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 8006de2:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT / 2 );
 8006de4:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8006de6:	f5a3 53aa 	sub.w	r3, r3, #5440	; 0x1540
 8006dea:	3b15      	subs	r3, #21
 8006dec:	b21b      	sxth	r3, r3
}
 8006dee:	bc30      	pop	{r4, r5}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT / 2 );
 8006df0:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8006df2:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 8006df6:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT / 2 );
 8006df8:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8006dfa:	f503 53aa 	add.w	r3, r3, #5440	; 0x1540
 8006dfe:	3315      	adds	r3, #21
 8006e00:	b21b      	sxth	r3, r3
}
 8006e02:	bc30      	pop	{r4, r5}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT / 2 );
 8006e04:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8006e06:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 8006e0a:	4770      	bx	lr
      pHandle->SensorIsReliable = false;
 8006e0c:	2200      	movs	r2, #0
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8006e0e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
      pHandle->SensorIsReliable = false;
 8006e12:	f880 2049 	strb.w	r2, [r0, #73]	; 0x49
      break;
 8006e16:	e7c3      	b.n	8006da0 <HALL_Clear+0xdc>

08006e18 <HALL_CalcElAngle>:
  if ( pHandle->_Super.hElSpeedDpp != HALL_MAX_PSEUDO_SPEED )
 8006e18:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
 8006e1c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8006e20:	429a      	cmp	r2, r3
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8006e22:	8883      	ldrh	r3, [r0, #4]
  if ( pHandle->_Super.hElSpeedDpp != HALL_MAX_PSEUDO_SPEED )
 8006e24:	d00f      	beq.n	8006e46 <HALL_CalcElAngle+0x2e>
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8006e26:	f8b0 c0aa 	ldrh.w	ip, [r0, #170]	; 0xaa
    pHandle->PrevRotorFreq = pHandle->_Super.hElSpeedDpp;
 8006e2a:	f8a0 20a0 	strh.w	r2, [r0, #160]	; 0xa0
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8006e2e:	b291      	uxth	r1, r2
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8006e30:	440b      	add	r3, r1
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8006e32:	4461      	add	r1, ip
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8006e34:	f8b0 c0ac 	ldrh.w	ip, [r0, #172]	; 0xac
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8006e38:	f8a0 10aa 	strh.w	r1, [r0, #170]	; 0xaa
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8006e3c:	4463      	add	r3, ip
 8006e3e:	b21b      	sxth	r3, r3
    pHandle->PrevRotorFreq = pHandle->_Super.hElSpeedDpp;
 8006e40:	8083      	strh	r3, [r0, #4]
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	4770      	bx	lr
    pHandle->_Super.hElAngle += pHandle->PrevRotorFreq;
 8006e46:	f8b0 20a0 	ldrh.w	r2, [r0, #160]	; 0xa0
 8006e4a:	4413      	add	r3, r2
 8006e4c:	b21b      	sxth	r3, r3
 8006e4e:	8083      	strh	r3, [r0, #4]
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	4770      	bx	lr

08006e54 <HALL_CalcAvrgMecSpeedUnit>:
{
 8006e54:	b538      	push	{r3, r4, r5, lr}
 8006e56:	4604      	mov	r4, r0
  if ( pHandle->SensorIsReliable )
 8006e58:	f890 0049 	ldrb.w	r0, [r0, #73]	; 0x49
{
 8006e5c:	460d      	mov	r5, r1
  if ( pHandle->SensorIsReliable )
 8006e5e:	b180      	cbz	r0, 8006e82 <HALL_CalcAvrgMecSpeedUnit+0x2e>
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8006e60:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if ( LL_TIM_GetPrescaler ( TIMx ) >= pHandle->HALLMaxRatio )
 8006e62:	f8b4 20ae 	ldrh.w	r2, [r4, #174]	; 0xae
  return (uint32_t)(READ_REG(TIMx->PSC));
 8006e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d811      	bhi.n	8006e90 <HALL_CalcAvrgMecSpeedUnit+0x3c>
      pHandle->_Super.hElSpeedDpp = 0;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	81e3      	strh	r3, [r4, #14]
      *hMecSpeedUnit = 0;
 8006e70:	800b      	strh	r3, [r1, #0]
    bReliability = SPD_IsMecSpeedReliable( &pHandle->_Super, hMecSpeedUnit );
 8006e72:	4629      	mov	r1, r5
 8006e74:	4620      	mov	r0, r4
 8006e76:	f001 fb0b 	bl	8008490 <SPD_IsMecSpeedReliable>
  pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8006e7a:	f9b5 3000 	ldrsh.w	r3, [r5]
 8006e7e:	81a3      	strh	r3, [r4, #12]
}
 8006e80:	bd38      	pop	{r3, r4, r5, pc}
    pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8006e82:	78e3      	ldrb	r3, [r4, #3]
 8006e84:	7023      	strb	r3, [r4, #0]
    *hMecSpeedUnit = 0;
 8006e86:	4603      	mov	r3, r0
    pHandle->_Super.hElSpeedDpp = 0;
 8006e88:	81e0      	strh	r0, [r4, #14]
    *hMecSpeedUnit = 0;
 8006e8a:	8008      	strh	r0, [r1, #0]
  pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8006e8c:	81a3      	strh	r3, [r4, #12]
}
 8006e8e:	bd38      	pop	{r3, r4, r5, pc}
      pHandle->_Super.hElSpeedDpp =  pHandle->AvrElSpeedDpp;
 8006e90:	f9b4 30a4 	ldrsh.w	r3, [r4, #164]	; 0xa4
 8006e94:	81e3      	strh	r3, [r4, #14]
      if (  pHandle->AvrElSpeedDpp == 0 )
 8006e96:	b31b      	cbz	r3, 8006ee0 <HALL_CalcAvrgMecSpeedUnit+0x8c>
        if (  pHandle->AvrElSpeedDpp != HALL_MAX_PSEUDO_SPEED )
 8006e98:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d01d      	beq.n	8006edc <HALL_CalcAvrgMecSpeedUnit+0x88>
          if (pHandle->HallMtpa == true)
 8006ea0:	f894 20c7 	ldrb.w	r2, [r4, #199]	; 0xc7
 8006ea4:	b9f2      	cbnz	r2, 8006ee4 <HALL_CalcAvrgMecSpeedUnit+0x90>
            pHandle->DeltaAngle = pHandle->MeasuredElAngle - pHandle->_Super.hElAngle;
 8006ea6:	88a2      	ldrh	r2, [r4, #4]
 8006ea8:	f8b4 10aa 	ldrh.w	r1, [r4, #170]	; 0xaa
 8006eac:	1a89      	subs	r1, r1, r2
 8006eae:	b209      	sxth	r1, r1
              ( int32_t )( pHandle->PWMNbrPSamplingFreq ) );
 8006eb0:	f8b4 20c4 	ldrh.w	r2, [r4, #196]	; 0xc4
            pHandle->DeltaAngle = pHandle->MeasuredElAngle - pHandle->_Super.hElAngle;
 8006eb4:	f8a4 10a8 	strh.w	r1, [r4, #168]	; 0xa8
            pHandle->CompSpeed = ( int16_t )
 8006eb8:	fb91 f1f2 	sdiv	r1, r1, r2
                                        ( int32_t )pHandle->_Super.hMeasurementFrequency * (int32_t) SPEED_UNIT ) /
 8006ebc:	8b62      	ldrh	r2, [r4, #26]
 8006ebe:	f8a4 10ac 	strh.w	r1, [r4, #172]	; 0xac
          *hMecSpeedUnit = ( int16_t )( (  pHandle->AvrElSpeedDpp * 
 8006ec2:	fb02 f303 	mul.w	r3, r2, r3
                                        (( int32_t ) pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 8006ec6:	69e1      	ldr	r1, [r4, #28]
 8006ec8:	7862      	ldrb	r2, [r4, #1]
                                        ( int32_t )pHandle->_Super.hMeasurementFrequency * (int32_t) SPEED_UNIT ) /
 8006eca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006ece:	005b      	lsls	r3, r3, #1
                                        (( int32_t ) pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 8006ed0:	fb01 f202 	mul.w	r2, r1, r2
                                        ( int32_t )pHandle->_Super.hMeasurementFrequency * (int32_t) SPEED_UNIT ) /
 8006ed4:	fb93 f3f2 	sdiv	r3, r3, r2
          *hMecSpeedUnit = ( int16_t )( (  pHandle->AvrElSpeedDpp * 
 8006ed8:	802b      	strh	r3, [r5, #0]
 8006eda:	e7ca      	b.n	8006e72 <HALL_CalcAvrgMecSpeedUnit+0x1e>
          *hMecSpeedUnit = ( int16_t )pHandle->SatSpeed;
 8006edc:	f8b4 30b0 	ldrh.w	r3, [r4, #176]	; 0xb0
 8006ee0:	802b      	strh	r3, [r5, #0]
 8006ee2:	e7c6      	b.n	8006e72 <HALL_CalcAvrgMecSpeedUnit+0x1e>
            pHandle->CompSpeed = 0;
 8006ee4:	2100      	movs	r1, #0
 8006ee6:	e7e9      	b.n	8006ebc <HALL_CalcAvrgMecSpeedUnit+0x68>

08006ee8 <HALL_TIMx_CC_IRQHandler>:
  if ( pHandle->SensorIsReliable )
 8006ee8:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d047      	beq.n	8006f80 <HALL_TIMx_CC_IRQHandler+0x98>
{
 8006ef0:	b570      	push	{r4, r5, r6, lr}
    if ( pHandle->SensorPlacement == DEGREES_120 )
 8006ef2:	f890 3020 	ldrb.w	r3, [r0, #32]
    bPrevHallState = pHandle->HallState;
 8006ef6:	f890 c0a6 	ldrb.w	ip, [r0, #166]	; 0xa6
    PrevDirection = pHandle->Direction;
 8006efa:	f990 10a2 	ldrsb.w	r1, [r0, #162]	; 0xa2
    if ( pHandle->SensorPlacement == DEGREES_120 )
 8006efe:	b333      	cbz	r3, 8006f4e <HALL_TIMx_CC_IRQHandler+0x66>
      pHandle->HallState  = (uint8_t) ((( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2)
 8006f00:	e9d0 340e 	ldrd	r3, r4, [r0, #56]	; 0x38
 8006f04:	691d      	ldr	r5, [r3, #16]
                            | (LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1)
 8006f06:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006f08:	691a      	ldr	r2, [r3, #16]
                            | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin ) );
 8006f0a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8006f0c:	691e      	ldr	r6, [r3, #16]
                            | (LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1)
 8006f0e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006f10:	4393      	bics	r3, r2
                            | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin ) );
 8006f12:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006f14:	bf0c      	ite	eq
 8006f16:	2201      	moveq	r2, #1
 8006f18:	2200      	movne	r2, #0
 8006f1a:	43b3      	bics	r3, r6
 8006f1c:	bf0c      	ite	eq
 8006f1e:	2301      	moveq	r3, #1
 8006f20:	2300      	movne	r3, #0
 8006f22:	43ac      	bics	r4, r5
      pHandle->HallState  = (uint8_t) ((( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2)
 8006f24:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 8006f28:	bf0c      	ite	eq
 8006f2a:	2201      	moveq	r2, #1
 8006f2c:	2200      	movne	r2, #0
 8006f2e:	0092      	lsls	r2, r2, #2
 8006f30:	f082 0204 	eor.w	r2, r2, #4
 8006f34:	4313      	orrs	r3, r2
 8006f36:	f880 30a6 	strb.w	r3, [r0, #166]	; 0xa6
    switch ( pHandle->HallState )
 8006f3a:	3b01      	subs	r3, #1
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8006f3c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    switch ( pHandle->HallState )
 8006f3e:	2b05      	cmp	r3, #5
 8006f40:	f200 8174 	bhi.w	800722c <HALL_TIMx_CC_IRQHandler+0x344>
 8006f44:	e8df f003 	tbb	[pc, r3]
 8006f48:	4d5c6e80 	.word	0x4d5c6e80
 8006f4c:	1e3b      	.short	0x1e3b
      pHandle->HallState  =(uint8_t) ((LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2)
 8006f4e:	e9d0 2310 	ldrd	r2, r3, [r0, #64]	; 0x40
 8006f52:	6912      	ldr	r2, [r2, #16]
 8006f54:	4393      	bics	r3, r2
                            | (LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1)
 8006f56:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006f58:	691c      	ldr	r4, [r3, #16]
 8006f5a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8006f5c:	bf0c      	ite	eq
 8006f5e:	2201      	moveq	r2, #1
 8006f60:	2200      	movne	r2, #0
 8006f62:	43a3      	bics	r3, r4
 8006f64:	bf0c      	ite	eq
 8006f66:	2301      	moveq	r3, #1
 8006f68:	2300      	movne	r3, #0
 8006f6a:	005b      	lsls	r3, r3, #1
 8006f6c:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
                            | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin ) );
 8006f70:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8006f72:	6914      	ldr	r4, [r2, #16]
 8006f74:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8006f76:	43a2      	bics	r2, r4
      pHandle->HallState  =(uint8_t) ((LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2)
 8006f78:	bf08      	it	eq
 8006f7a:	f043 0301 	orreq.w	r3, r3, #1
 8006f7e:	e7da      	b.n	8006f36 <HALL_TIMx_CC_IRQHandler+0x4e>
}
 8006f80:	2000      	movs	r0, #0
 8006f82:	4770      	bx	lr
        if ( bPrevHallState == STATE_2 )
 8006f84:	f1bc 0f02 	cmp.w	ip, #2
 8006f88:	f000 808b 	beq.w	80070a2 <HALL_TIMx_CC_IRQHandler+0x1ba>
        else if ( bPrevHallState == STATE_4 )
 8006f8c:	f1bc 0f04 	cmp.w	ip, #4
 8006f90:	f000 80ac 	beq.w	80070ec <HALL_TIMx_CC_IRQHandler+0x204>
    PrevDirection = pHandle->Direction;
 8006f94:	460b      	mov	r3, r1
    if (pHandle->HallMtpa == true)
 8006f96:	f890 20c7 	ldrb.w	r2, [r0, #199]	; 0xc7
 8006f9a:	b112      	cbz	r2, 8006fa2 <HALL_TIMx_CC_IRQHandler+0xba>
      pHandle->_Super.hElAngle = pHandle->MeasuredElAngle;
 8006f9c:	f8b0 20aa 	ldrh.w	r2, [r0, #170]	; 0xaa
 8006fa0:	8082      	strh	r2, [r0, #4]
    if ( pHandle->FirstCapt == 0u )
 8006fa2:	f890 204c 	ldrb.w	r2, [r0, #76]	; 0x4c
 8006fa6:	2a00      	cmp	r2, #0
 8006fa8:	f040 80ac 	bne.w	8007104 <HALL_TIMx_CC_IRQHandler+0x21c>
      pHandle->FirstCapt++;
 8006fac:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 8006fb0:	3301      	adds	r3, #1
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
  return (uint32_t)(READ_REG(TIMx->CCR1));
 8006fb8:	6b63      	ldr	r3, [r4, #52]	; 0x34
}
 8006fba:	2000      	movs	r0, #0
 8006fbc:	bd70      	pop	{r4, r5, r6, pc}
        if ( bPrevHallState == STATE_4 )
 8006fbe:	f1bc 0f04 	cmp.w	ip, #4
 8006fc2:	d078      	beq.n	80070b6 <HALL_TIMx_CC_IRQHandler+0x1ce>
        else if ( bPrevHallState == STATE_1 )
 8006fc4:	f1bc 0f01 	cmp.w	ip, #1
 8006fc8:	d1e4      	bne.n	8006f94 <HALL_TIMx_CC_IRQHandler+0xac>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT );
 8006fca:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8006fcc:	f503 532a 	add.w	r3, r3, #10880	; 0x2a80
 8006fd0:	332a      	adds	r3, #42	; 0x2a
          pHandle->Direction = NEGATIVE;
 8006fd2:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT );
 8006fd4:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 8006fd8:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT );
 8006fdc:	f04f 33ff 	mov.w	r3, #4294967295
 8006fe0:	e04d      	b.n	800707e <HALL_TIMx_CC_IRQHandler+0x196>
        if ( bPrevHallState == STATE_6 )
 8006fe2:	f1bc 0f06 	cmp.w	ip, #6
 8006fe6:	d077      	beq.n	80070d8 <HALL_TIMx_CC_IRQHandler+0x1f0>
        else if ( bPrevHallState == STATE_5 )
 8006fe8:	f1bc 0f05 	cmp.w	ip, #5
 8006fec:	d1d2      	bne.n	8006f94 <HALL_TIMx_CC_IRQHandler+0xac>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift );
 8006fee:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8006ff0:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 8006ff4:	22ff      	movs	r2, #255	; 0xff
 8006ff6:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift );
 8006ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8006ffe:	e03e      	b.n	800707e <HALL_TIMx_CC_IRQHandler+0x196>
        if ( bPrevHallState == STATE_1 )
 8007000:	f1bc 0f01 	cmp.w	ip, #1
 8007004:	d05e      	beq.n	80070c4 <HALL_TIMx_CC_IRQHandler+0x1dc>
        else if ( bPrevHallState == STATE_2 )
 8007006:	f1bc 0f02 	cmp.w	ip, #2
 800700a:	d1c3      	bne.n	8006f94 <HALL_TIMx_CC_IRQHandler+0xac>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 800700c:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800700e:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8007012:	337f      	adds	r3, #127	; 0x7f
          pHandle->Direction = NEGATIVE;
 8007014:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 8007016:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 800701a:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 800701e:	f04f 33ff 	mov.w	r3, #4294967295
 8007022:	e02c      	b.n	800707e <HALL_TIMx_CC_IRQHandler+0x196>
        if ( bPrevHallState == STATE_3 )
 8007024:	f1bc 0f03 	cmp.w	ip, #3
 8007028:	d031      	beq.n	800708e <HALL_TIMx_CC_IRQHandler+0x1a6>
        else if ( bPrevHallState == STATE_6 )
 800702a:	f1bc 0f06 	cmp.w	ip, #6
 800702e:	d1b1      	bne.n	8006f94 <HALL_TIMx_CC_IRQHandler+0xac>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 8007030:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8007032:	f5a3 43aa 	sub.w	r3, r3, #21760	; 0x5500
 8007036:	3b55      	subs	r3, #85	; 0x55
          pHandle->Direction = NEGATIVE;
 8007038:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 800703a:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 800703e:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 8007042:	f04f 33ff 	mov.w	r3, #4294967295
 8007046:	e01a      	b.n	800707e <HALL_TIMx_CC_IRQHandler+0x196>
        if ( bPrevHallState == STATE_5 )
 8007048:	f1bc 0f05 	cmp.w	ip, #5
 800704c:	d00e      	beq.n	800706c <HALL_TIMx_CC_IRQHandler+0x184>
        else if ( bPrevHallState == STATE_3 )
 800704e:	f1bc 0f03 	cmp.w	ip, #3
 8007052:	d19f      	bne.n	8006f94 <HALL_TIMx_CC_IRQHandler+0xac>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 8007054:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8007056:	f503 43aa 	add.w	r3, r3, #21760	; 0x5500
 800705a:	3355      	adds	r3, #85	; 0x55
          pHandle->Direction = NEGATIVE;
 800705c:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 800705e:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 8007062:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 8007066:	f04f 33ff 	mov.w	r3, #4294967295
 800706a:	e008      	b.n	800707e <HALL_TIMx_CC_IRQHandler+0x196>
          pHandle->MeasuredElAngle = pHandle->PhaseShift + S16_60_PHASE_SHIFT;
 800706c:	8c42      	ldrh	r2, [r0, #34]	; 0x22
 800706e:	f502 522a 	add.w	r2, r2, #10880	; 0x2a80
          pHandle->Direction = POSITIVE;
 8007072:	2301      	movs	r3, #1
          pHandle->MeasuredElAngle = pHandle->PhaseShift + S16_60_PHASE_SHIFT;
 8007074:	322a      	adds	r2, #42	; 0x2a
          pHandle->Direction = POSITIVE;
 8007076:	f880 30a2 	strb.w	r3, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = pHandle->PhaseShift + S16_60_PHASE_SHIFT;
 800707a:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
    if (pHandle->Direction != PrevDirection)
 800707e:	4299      	cmp	r1, r3
 8007080:	d089      	beq.n	8006f96 <HALL_TIMx_CC_IRQHandler+0xae>
      pHandle->BufferFilled = 0 ;
 8007082:	2200      	movs	r2, #0
 8007084:	f880 204d 	strb.w	r2, [r0, #77]	; 0x4d
      pHandle->SpeedFIFOIdx = 0;
 8007088:	f880 2098 	strb.w	r2, [r0, #152]	; 0x98
 800708c:	e783      	b.n	8006f96 <HALL_TIMx_CC_IRQHandler+0xae>
                                                  + S16_60_PHASE_SHIFT );
 800708e:	8c42      	ldrh	r2, [r0, #34]	; 0x22
 8007090:	f502 42ff 	add.w	r2, r2, #32640	; 0x7f80
          pHandle->Direction = POSITIVE;
 8007094:	2301      	movs	r3, #1
                                                  + S16_60_PHASE_SHIFT );
 8007096:	327f      	adds	r2, #127	; 0x7f
          pHandle->Direction = POSITIVE;
 8007098:	f880 30a2 	strb.w	r3, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT
 800709c:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 80070a0:	e7ed      	b.n	800707e <HALL_TIMx_CC_IRQHandler+0x196>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 80070a2:	8c42      	ldrh	r2, [r0, #34]	; 0x22
 80070a4:	f5a2 42aa 	sub.w	r2, r2, #21760	; 0x5500
          pHandle->Direction = POSITIVE;
 80070a8:	2301      	movs	r3, #1
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 80070aa:	3a55      	subs	r2, #85	; 0x55
          pHandle->Direction = POSITIVE;
 80070ac:	f880 30a2 	strb.w	r3, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 80070b0:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 80070b4:	e7e3      	b.n	800707e <HALL_TIMx_CC_IRQHandler+0x196>
          pHandle->MeasuredElAngle = pHandle->PhaseShift;
 80070b6:	8c42      	ldrh	r2, [r0, #34]	; 0x22
 80070b8:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
          pHandle->Direction = POSITIVE;
 80070bc:	2301      	movs	r3, #1
 80070be:	f880 30a2 	strb.w	r3, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = pHandle->PhaseShift;
 80070c2:	e7dc      	b.n	800707e <HALL_TIMx_CC_IRQHandler+0x196>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 80070c4:	8c43      	ldrh	r3, [r0, #34]	; 0x22
          pHandle->Direction = POSITIVE;
 80070c6:	f880 c0a2 	strb.w	ip, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 80070ca:	f503 43aa 	add.w	r3, r3, #21760	; 0x5500
 80070ce:	3355      	adds	r3, #85	; 0x55
 80070d0:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
 80070d4:	4663      	mov	r3, ip
 80070d6:	e7d2      	b.n	800707e <HALL_TIMx_CC_IRQHandler+0x196>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 80070d8:	8c42      	ldrh	r2, [r0, #34]	; 0x22
 80070da:	f5a2 522a 	sub.w	r2, r2, #10880	; 0x2a80
          pHandle->Direction = POSITIVE;
 80070de:	2301      	movs	r3, #1
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 80070e0:	3a2a      	subs	r2, #42	; 0x2a
          pHandle->Direction = POSITIVE;
 80070e2:	f880 30a2 	strb.w	r3, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 80070e6:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 80070ea:	e7c8      	b.n	800707e <HALL_TIMx_CC_IRQHandler+0x196>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 80070ec:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80070ee:	f5a3 532a 	sub.w	r3, r3, #10880	; 0x2a80
 80070f2:	3b2a      	subs	r3, #42	; 0x2a
          pHandle->Direction = NEGATIVE;
 80070f4:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 80070f6:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 80070fa:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 80070fe:	f04f 33ff 	mov.w	r3, #4294967295
 8007102:	e7bc      	b.n	800707e <HALL_TIMx_CC_IRQHandler+0x196>
      if ( pHandle->BufferFilled < pHandle->SpeedBufferSize )
 8007104:	f890 204d 	ldrb.w	r2, [r0, #77]	; 0x4d
 8007108:	f890 c026 	ldrb.w	ip, [r0, #38]	; 0x26
 800710c:	4562      	cmp	r2, ip
 800710e:	d205      	bcs.n	800711c <HALL_TIMx_CC_IRQHandler+0x234>
        pHandle->BufferFilled++;
 8007110:	f890 204d 	ldrb.w	r2, [r0, #77]	; 0x4d
 8007114:	3201      	adds	r2, #1
 8007116:	b2d2      	uxtb	r2, r2
 8007118:	f880 204d 	strb.w	r2, [r0, #77]	; 0x4d
 800711c:	6b66      	ldr	r6, [r4, #52]	; 0x34
  return (uint32_t)(READ_REG(TIMx->PSC));
 800711e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
      wCaptBuf += ( uint32_t )pHandle->OVFCounter * 0x10000uL;
 8007120:	f890 204e 	ldrb.w	r2, [r0, #78]	; 0x4e
      if ( pHandle->OVFCounter != 0u )
 8007124:	f890 504e 	ldrb.w	r5, [r0, #78]	; 0x4e
      wCaptBuf += ( uint32_t )pHandle->OVFCounter * 0x10000uL;
 8007128:	0412      	lsls	r2, r2, #16
      hPrscBuf =  LL_TIM_GetPrescaler ( TIMx );
 800712a:	b289      	uxth	r1, r1
      wCaptBuf += ( uint32_t )pHandle->OVFCounter * 0x10000uL;
 800712c:	fa12 f286 	uxtah	r2, r2, r6
      if ( pHandle->OVFCounter != 0u )
 8007130:	f005 0eff 	and.w	lr, r5, #255	; 0xff
 8007134:	2d00      	cmp	r5, #0
 8007136:	d043      	beq.n	80071c0 <HALL_TIMx_CC_IRQHandler+0x2d8>
        hAux = hPrscBuf + 1u;
 8007138:	3101      	adds	r1, #1
        wCaptBuf *= hAux;
 800713a:	b289      	uxth	r1, r1
 800713c:	fb01 f202 	mul.w	r2, r1, r2
        if ( pHandle->RatioInc )
 8007140:	f890 104b 	ldrb.w	r1, [r0, #75]	; 0x4b
 8007144:	2900      	cmp	r1, #0
 8007146:	d045      	beq.n	80071d4 <HALL_TIMx_CC_IRQHandler+0x2ec>
          pHandle->RatioInc = false;  /* Previous capture caused overflow */
 8007148:	2100      	movs	r1, #0
 800714a:	f880 104b 	strb.w	r1, [r0, #75]	; 0x4b
        if ( wCaptBuf < pHandle->MinPeriod )
 800714e:	f8d0 10bc 	ldr.w	r1, [r0, #188]	; 0xbc
 8007152:	4291      	cmp	r1, r2
 8007154:	d82f      	bhi.n	80071b6 <HALL_TIMx_CC_IRQHandler+0x2ce>
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 8007156:	f890 1098 	ldrb.w	r1, [r0, #152]	; 0x98
          if ( wCaptBuf >= pHandle->MaxPeriod )
 800715a:	f8d0 50b8 	ldr.w	r5, [r0, #184]	; 0xb8
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 800715e:	f8d0 409c 	ldr.w	r4, [r0, #156]	; 0x9c
 8007162:	eb00 0e81 	add.w	lr, r0, r1, lsl #2
          if ( wCaptBuf >= pHandle->MaxPeriod )
 8007166:	4295      	cmp	r5, r2
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 8007168:	f8de 6050 	ldr.w	r6, [lr, #80]	; 0x50
            pHandle->SensorPeriod[pHandle->SpeedFIFOIdx] *= pHandle->Direction;
 800716c:	bf88      	it	hi
 800716e:	fb03 f502 	mulhi.w	r5, r3, r2
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 8007172:	eba4 0406 	sub.w	r4, r4, r6
          pHandle->SpeedFIFOIdx++;
 8007176:	f101 0101 	add.w	r1, r1, #1
 800717a:	b2c9      	uxtb	r1, r1
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 800717c:	f8c0 409c 	str.w	r4, [r0, #156]	; 0x9c
            pHandle->ElPeriodSum += pHandle->SensorPeriod[pHandle->SpeedFIFOIdx];
 8007180:	bf8a      	itet	hi
 8007182:	1964      	addhi	r4, r4, r5
            pHandle->SensorPeriod[pHandle->SpeedFIFOIdx] = pHandle->MaxPeriod*pHandle->Direction; 
 8007184:	435d      	mulls	r5, r3
            pHandle->ElPeriodSum += pHandle->SensorPeriod[pHandle->SpeedFIFOIdx];
 8007186:	f8c0 409c 	strhi.w	r4, [r0, #156]	; 0x9c
          if ( pHandle->SpeedFIFOIdx == pHandle->SpeedBufferSize )
 800718a:	458c      	cmp	ip, r1
 800718c:	f8ce 5050 	str.w	r5, [lr, #80]	; 0x50
            pHandle->SpeedFIFOIdx = 0u;
 8007190:	bf08      	it	eq
 8007192:	2100      	moveq	r1, #0
 8007194:	f880 1098 	strb.w	r1, [r0, #152]	; 0x98
          if ( pHandle->SensorIsReliable) 
 8007198:	f890 1049 	ldrb.w	r1, [r0, #73]	; 0x49
 800719c:	b331      	cbz	r1, 80071ec <HALL_TIMx_CC_IRQHandler+0x304>
            if ( pHandle->BufferFilled < pHandle->SpeedBufferSize )
 800719e:	f890 104d 	ldrb.w	r1, [r0, #77]	; 0x4d
 80071a2:	458c      	cmp	ip, r1
 80071a4:	d937      	bls.n	8007216 <HALL_TIMx_CC_IRQHandler+0x32e>
              pHandle->AvrElSpeedDpp = ( int16_t ) (( pHandle->PseudoFreqConv / wCaptBuf )*pHandle->Direction);
 80071a6:	f8d0 10b4 	ldr.w	r1, [r0, #180]	; 0xb4
 80071aa:	fbb1 f2f2 	udiv	r2, r1, r2
 80071ae:	fb12 f303 	smulbb	r3, r2, r3
 80071b2:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
      pHandle->OVFCounter = 0u;
 80071b6:	2300      	movs	r3, #0
 80071b8:	f880 304e 	strb.w	r3, [r0, #78]	; 0x4e
}
 80071bc:	2000      	movs	r0, #0
 80071be:	bd70      	pop	{r4, r5, r6, pc}
        if ( pHandle->RatioDec ) /* and don't decrease it again */
 80071c0:	f890 504a 	ldrb.w	r5, [r0, #74]	; 0x4a
 80071c4:	b1ad      	cbz	r5, 80071f2 <HALL_TIMx_CC_IRQHandler+0x30a>
          hAux = hPrscBuf + 2u;
 80071c6:	3102      	adds	r1, #2
          wCaptBuf *= hAux;
 80071c8:	b289      	uxth	r1, r1
          pHandle->RatioDec = false;
 80071ca:	f880 e04a 	strb.w	lr, [r0, #74]	; 0x4a
          wCaptBuf *= hAux;
 80071ce:	fb01 f202 	mul.w	r2, r1, r2
          pHandle->RatioDec = false;
 80071d2:	e7bc      	b.n	800714e <HALL_TIMx_CC_IRQHandler+0x266>
 80071d4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
          if ( LL_TIM_GetPrescaler ( TIMx ) < pHandle->HALLMaxRatio ) /* Avoid OVF w/ very low freq */
 80071d6:	f8b0 50ae 	ldrh.w	r5, [r0, #174]	; 0xae
 80071da:	428d      	cmp	r5, r1
 80071dc:	d9b7      	bls.n	800714e <HALL_TIMx_CC_IRQHandler+0x266>
 80071de:	6aa1      	ldr	r1, [r4, #40]	; 0x28
            LL_TIM_SetPrescaler ( TIMx, LL_TIM_GetPrescaler ( TIMx ) + 1 ); /* To avoid OVF during speed decrease */
 80071e0:	3101      	adds	r1, #1
  WRITE_REG(TIMx->PSC, Prescaler);
 80071e2:	62a1      	str	r1, [r4, #40]	; 0x28
            pHandle->RatioInc = true;   /* new prsc value updated at next capture only */
 80071e4:	2101      	movs	r1, #1
 80071e6:	f880 104b 	strb.w	r1, [r0, #75]	; 0x4b
 80071ea:	e7b0      	b.n	800714e <HALL_TIMx_CC_IRQHandler+0x266>
            pHandle->AvrElSpeedDpp = 0;
 80071ec:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
 80071f0:	e7e1      	b.n	80071b6 <HALL_TIMx_CC_IRQHandler+0x2ce>
          uint16_t hAux = hPrscBuf + 1u;
 80071f2:	3101      	adds	r1, #1
          if ( hHighSpeedCapture < LOW_RES_THRESHOLD ) /* If capture range correct */
 80071f4:	b2b6      	uxth	r6, r6
          wCaptBuf *= hAux;
 80071f6:	b289      	uxth	r1, r1
          if ( hHighSpeedCapture < LOW_RES_THRESHOLD ) /* If capture range correct */
 80071f8:	f5b6 4faa 	cmp.w	r6, #21760	; 0x5500
          wCaptBuf *= hAux;
 80071fc:	fb01 f202 	mul.w	r2, r1, r2
          if ( hHighSpeedCapture < LOW_RES_THRESHOLD ) /* If capture range correct */
 8007200:	d2a5      	bcs.n	800714e <HALL_TIMx_CC_IRQHandler+0x266>
  return (uint32_t)(READ_REG(TIMx->PSC));
 8007202:	6aa1      	ldr	r1, [r4, #40]	; 0x28
            if ( LL_TIM_GetPrescaler ( TIMx ) > 0u ) /* or prescaler cannot be further reduced */
 8007204:	2900      	cmp	r1, #0
 8007206:	d0a2      	beq.n	800714e <HALL_TIMx_CC_IRQHandler+0x266>
 8007208:	6aa1      	ldr	r1, [r4, #40]	; 0x28
              LL_TIM_SetPrescaler ( TIMx, LL_TIM_GetPrescaler ( TIMx ) - 1 ); /* Increase accuracy by decreasing prsc */
 800720a:	3901      	subs	r1, #1
  WRITE_REG(TIMx->PSC, Prescaler);
 800720c:	62a1      	str	r1, [r4, #40]	; 0x28
              pHandle->RatioDec = true;
 800720e:	2101      	movs	r1, #1
 8007210:	f880 104a 	strb.w	r1, [r0, #74]	; 0x4a
 8007214:	e79b      	b.n	800714e <HALL_TIMx_CC_IRQHandler+0x266>
              pHandle->AvrElSpeedDpp = ( int16_t )((int32_t) pHandle->PseudoFreqConv / ( pHandle->ElPeriodSum / pHandle->SpeedBufferSize )); /* Average value */
 8007216:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
 800721a:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
 800721e:	fb92 fcfc 	sdiv	ip, r2, ip
 8007222:	fb93 f3fc 	sdiv	r3, r3, ip
 8007226:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
 800722a:	e7c4      	b.n	80071b6 <HALL_TIMx_CC_IRQHandler+0x2ce>
        pHandle->SensorIsReliable = false;
 800722c:	2300      	movs	r3, #0
 800722e:	f880 3049 	strb.w	r3, [r0, #73]	; 0x49
        break;
 8007232:	e6af      	b.n	8006f94 <HALL_TIMx_CC_IRQHandler+0xac>

08007234 <HALL_TIMx_UP_IRQHandler>:
  if ( pHandle->SensorIsReliable )
 8007234:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
 8007238:	b1e3      	cbz	r3, 8007274 <HALL_TIMx_UP_IRQHandler+0x40>
{
 800723a:	b430      	push	{r4, r5}
    pHandle->OVFCounter++;
 800723c:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8007240:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    pHandle->OVFCounter++;
 8007242:	3301      	adds	r3, #1
 8007244:	b2db      	uxtb	r3, r3
 8007246:	f880 304e 	strb.w	r3, [r0, #78]	; 0x4e
  return (uint32_t)(READ_REG(TIMx->PSC));
 800724a:	6a94      	ldr	r4, [r2, #40]	; 0x28
    hMaxTimerOverflow = ( uint16_t )( ( ( uint32_t )pHandle->HallTimeout * pHandle->OvfFreq )
 800724c:	f8b0 30c0 	ldrh.w	r3, [r0, #192]	; 0xc0
 8007250:	f8b0 20c2 	ldrh.w	r2, [r0, #194]	; 0xc2
    if ( pHandle->OVFCounter >= hMaxTimerOverflow )
 8007254:	f890 104e 	ldrb.w	r1, [r0, #78]	; 0x4e
    hMaxTimerOverflow = ( uint16_t )( ( ( uint32_t )pHandle->HallTimeout * pHandle->OvfFreq )
 8007258:	fb02 f303 	mul.w	r3, r2, r3
                                      / ( ( LL_TIM_GetPrescaler ( TIMx ) + 1 ) * 1000u ) );
 800725c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007260:	fb04 2202 	mla	r2, r4, r2, r2
 8007264:	fbb3 f3f2 	udiv	r3, r3, r2
    if ( pHandle->OVFCounter >= hMaxTimerOverflow )
 8007268:	b29b      	uxth	r3, r3
 800726a:	4299      	cmp	r1, r3
 800726c:	d204      	bcs.n	8007278 <HALL_TIMx_UP_IRQHandler+0x44>
}
 800726e:	2000      	movs	r0, #0
 8007270:	bc30      	pop	{r4, r5}
 8007272:	4770      	bx	lr
 8007274:	2000      	movs	r0, #0
 8007276:	4770      	bx	lr
  if ( pHandle->SensorPlacement == DEGREES_120 )
 8007278:	f890 3020 	ldrb.w	r3, [r0, #32]
      pHandle->_Super.hElSpeedDpp = 0;
 800727c:	2200      	movs	r2, #0
 800727e:	81c2      	strh	r2, [r0, #14]
  if ( pHandle->SensorPlacement == DEGREES_120 )
 8007280:	bb0b      	cbnz	r3, 80072c6 <HALL_TIMx_UP_IRQHandler+0x92>
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 8007282:	6c02      	ldr	r2, [r0, #64]	; 0x40
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 8007284:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007286:	6911      	ldr	r1, [r2, #16]
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 8007288:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800728a:	691d      	ldr	r5, [r3, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 800728c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800728e:	438a      	bics	r2, r1
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8007290:	e9d0 120c 	ldrd	r1, r2, [r0, #48]	; 0x30
 8007294:	bf0c      	ite	eq
 8007296:	2401      	moveq	r4, #1
 8007298:	2400      	movne	r4, #0
 800729a:	43ab      	bics	r3, r5
 800729c:	bf0c      	ite	eq
 800729e:	2301      	moveq	r3, #1
 80072a0:	2300      	movne	r3, #0
 80072a2:	6909      	ldr	r1, [r1, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 80072a4:	005b      	lsls	r3, r3, #1
 80072a6:	ea43 0384 	orr.w	r3, r3, r4, lsl #2
 80072aa:	438a      	bics	r2, r1
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 80072ac:	bf08      	it	eq
 80072ae:	f043 0301 	orreq.w	r3, r3, #1
  switch ( pHandle->HallState )
 80072b2:	1e5a      	subs	r2, r3, #1
 80072b4:	f880 30a6 	strb.w	r3, [r0, #166]	; 0xa6
 80072b8:	2a05      	cmp	r2, #5
 80072ba:	d86f      	bhi.n	800739c <HALL_TIMx_UP_IRQHandler+0x168>
 80072bc:	e8df f002 	tbb	[pc, r2]
 80072c0:	52596067 	.word	0x52596067
 80072c4:	1f4b      	.short	0x1f4b
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 80072c6:	6b82      	ldr	r2, [r0, #56]	; 0x38
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
 80072c8:	6c01      	ldr	r1, [r0, #64]	; 0x40
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 80072ca:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80072cc:	6914      	ldr	r4, [r2, #16]
 80072ce:	6909      	ldr	r1, [r1, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
 80072d0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80072d2:	691d      	ldr	r5, [r3, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 80072d4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80072d6:	438a      	bics	r2, r1
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 80072d8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80072da:	bf0c      	ite	eq
 80072dc:	2101      	moveq	r1, #1
 80072de:	2100      	movne	r1, #0
 80072e0:	43ab      	bics	r3, r5
 80072e2:	bf0c      	ite	eq
 80072e4:	2301      	moveq	r3, #1
 80072e6:	2300      	movne	r3, #0
 80072e8:	43a2      	bics	r2, r4
 80072ea:	bf0c      	ite	eq
 80072ec:	2201      	moveq	r2, #1
 80072ee:	2200      	movne	r2, #0
 80072f0:	0092      	lsls	r2, r2, #2
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 80072f2:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 80072f6:	f082 0204 	eor.w	r2, r2, #4
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 80072fa:	4313      	orrs	r3, r2
 80072fc:	e7d9      	b.n	80072b2 <HALL_TIMx_UP_IRQHandler+0x7e>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT -
 80072fe:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8007300:	f5a3 537f 	sub.w	r3, r3, #16320	; 0x3fc0
 8007304:	3b3f      	subs	r3, #63	; 0x3f
 8007306:	b21b      	sxth	r3, r3
 8007308:	8083      	strh	r3, [r0, #4]
      for ( bIndex = 0u; bIndex < pHandle->SpeedBufferSize; bIndex++ )
 800730a:	f890 4026 	ldrb.w	r4, [r0, #38]	; 0x26
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 800730e:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
      pHandle->OVFCounter = 0u;
 8007312:	2200      	movs	r2, #0
 8007314:	f880 204e 	strb.w	r2, [r0, #78]	; 0x4e
      pHandle->FirstCapt = 0u;
 8007318:	f880 204c 	strb.w	r2, [r0, #76]	; 0x4c
      for ( bIndex = 0u; bIndex < pHandle->SpeedBufferSize; bIndex++ )
 800731c:	b17c      	cbz	r4, 800733e <HALL_TIMx_UP_IRQHandler+0x10a>
 800731e:	1e62      	subs	r2, r4, #1
 8007320:	b2d3      	uxtb	r3, r2
        pHandle->SensorPeriod[bIndex]  = pHandle->MaxPeriod;
 8007322:	f8d0 10b8 	ldr.w	r1, [r0, #184]	; 0xb8
 8007326:	f100 0250 	add.w	r2, r0, #80	; 0x50
 800732a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800732e:	f100 034c 	add.w	r3, r0, #76	; 0x4c
 8007332:	f843 1f04 	str.w	r1, [r3, #4]!
      for ( bIndex = 0u; bIndex < pHandle->SpeedBufferSize; bIndex++ )
 8007336:	429a      	cmp	r2, r3
 8007338:	d1fb      	bne.n	8007332 <HALL_TIMx_UP_IRQHandler+0xfe>
      pHandle->ElPeriodSum =pHandle->MaxPeriod * pHandle->SpeedBufferSize;
 800733a:	fb01 f404 	mul.w	r4, r1, r4
      pHandle->BufferFilled = 0 ;
 800733e:	2300      	movs	r3, #0
 8007340:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
      pHandle->SpeedFIFOIdx = 0;
 8007344:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98
      pHandle->ElPeriodSum =pHandle->MaxPeriod * pHandle->SpeedBufferSize;
 8007348:	f8c0 409c 	str.w	r4, [r0, #156]	; 0x9c
      pHandle->AvrElSpeedDpp = 0;
 800734c:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
}
 8007350:	bc30      	pop	{r4, r5}
 8007352:	2000      	movs	r0, #0
 8007354:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT / 2 );
 8007356:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8007358:	f503 53aa 	add.w	r3, r3, #5440	; 0x1540
 800735c:	3315      	adds	r3, #21
 800735e:	b21b      	sxth	r3, r3
 8007360:	8083      	strh	r3, [r0, #4]
      break;
 8007362:	e7d2      	b.n	800730a <HALL_TIMx_UP_IRQHandler+0xd6>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT / 2 );
 8007364:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8007366:	f5a3 53aa 	sub.w	r3, r3, #5440	; 0x1540
 800736a:	3b15      	subs	r3, #21
 800736c:	b21b      	sxth	r3, r3
 800736e:	8083      	strh	r3, [r0, #4]
      break;
 8007370:	e7cb      	b.n	800730a <HALL_TIMx_UP_IRQHandler+0xd6>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 8007372:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8007374:	f503 43d5 	add.w	r3, r3, #27264	; 0x6a80
 8007378:	332a      	adds	r3, #42	; 0x2a
 800737a:	b21b      	sxth	r3, r3
 800737c:	8083      	strh	r3, [r0, #4]
      break;
 800737e:	e7c4      	b.n	800730a <HALL_TIMx_UP_IRQHandler+0xd6>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
 8007380:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8007382:	f5a3 43d5 	sub.w	r3, r3, #27264	; 0x6a80
 8007386:	3b2a      	subs	r3, #42	; 0x2a
 8007388:	b21b      	sxth	r3, r3
 800738a:	8083      	strh	r3, [r0, #4]
      break;
 800738c:	e7bd      	b.n	800730a <HALL_TIMx_UP_IRQHandler+0xd6>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT +
 800738e:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8007390:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8007394:	333f      	adds	r3, #63	; 0x3f
 8007396:	b21b      	sxth	r3, r3
 8007398:	8083      	strh	r3, [r0, #4]
      break;
 800739a:	e7b6      	b.n	800730a <HALL_TIMx_UP_IRQHandler+0xd6>
      pHandle->SensorIsReliable = false;
 800739c:	2200      	movs	r2, #0
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 800739e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
      pHandle->SensorIsReliable = false;
 80073a2:	f880 2049 	strb.w	r2, [r0, #73]	; 0x49
      break;
 80073a6:	e7b0      	b.n	800730a <HALL_TIMx_UP_IRQHandler+0xd6>

080073a8 <MPM_Clear>:
  *         measurement buffer and initialize the index.
  * @param power handle.
  * @retval none.
  */
__weak void MPM_Clear( MotorPowMeas_Handle_t * pHandle )
{
 80073a8:	b510      	push	{r4, lr}
  uint16_t i;
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    pHandle->hMeasBuffer[i] = 0;
 80073aa:	f44f 7280 	mov.w	r2, #256	; 0x100
{
 80073ae:	4604      	mov	r4, r0
    pHandle->hMeasBuffer[i] = 0;
 80073b0:	2100      	movs	r1, #0
 80073b2:	f001 fd47 	bl	8008e44 <memset>
  }
  pHandle->hNextMeasBufferIndex = 0u;
 80073b6:	2300      	movs	r3, #0
 80073b8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = 0u;

}
 80073bc:	bd10      	pop	{r4, pc}
 80073be:	bf00      	nop

080073c0 <MPM_CalcElMotorPower>:
{
  uint16_t i;
  int32_t wAux = 0;

  /* Store the measured values in the buffer.*/
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 80073c0:	f8b0 2100 	ldrh.w	r2, [r0, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
  pHandle->hNextMeasBufferIndex++;
 80073c4:	1c53      	adds	r3, r2, #1
 80073c6:	b29b      	uxth	r3, r3
  if ( pHandle->hNextMeasBufferIndex >= MPM_BUFFER_LENGHT )
 80073c8:	2b7f      	cmp	r3, #127	; 0x7f
  {
    pHandle->hNextMeasBufferIndex = 0u;
 80073ca:	bf88      	it	hi
 80073cc:	2300      	movhi	r3, #0
{
 80073ce:	b500      	push	{lr}
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 80073d0:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
 80073d4:	f100 0efe 	add.w	lr, r0, #254	; 0xfe
 80073d8:	f8a0 2102 	strh.w	r2, [r0, #258]	; 0x102
    pHandle->hNextMeasBufferIndex = 0u;
 80073dc:	f8a0 3100 	strh.w	r3, [r0, #256]	; 0x100
  int32_t wAux = 0;
 80073e0:	2200      	movs	r2, #0
 80073e2:	1e83      	subs	r3, r0, #2
  }
  /* Compute the average measured motor power */
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 80073e4:	f933 cf02 	ldrsh.w	ip, [r3, #2]!
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 80073e8:	4573      	cmp	r3, lr
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 80073ea:	4462      	add	r2, ip
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 80073ec:	d1fa      	bne.n	80073e4 <MPM_CalcElMotorPower+0x24>
  }
  wAux /= ( int32_t )MPM_BUFFER_LENGHT;
 80073ee:	2a00      	cmp	r2, #0
 80073f0:	bfb8      	it	lt
 80073f2:	327f      	addlt	r2, #127	; 0x7f
 80073f4:	11d2      	asrs	r2, r2, #7
  pHandle->hAvrgElMotorPowerW = ( int16_t )( wAux );
 80073f6:	f8a0 2104 	strh.w	r2, [r0, #260]	; 0x104
  /* Return the last measured motor power */
  return CurrentMotorPower;
}
 80073fa:	4608      	mov	r0, r1
 80073fc:	f85d fb04 	ldr.w	pc, [sp], #4

08007400 <MPM_GetAvrgElMotorPowerW>:
  * @retval int16_t The average measured motor power expressed in watt.
  */
__weak int16_t MPM_GetAvrgElMotorPowerW( MotorPowMeas_Handle_t * pHandle )
{
  return ( pHandle->hAvrgElMotorPowerW );
}
 8007400:	f9b0 0104 	ldrsh.w	r0, [r0, #260]	; 0x104
 8007404:	4770      	bx	lr
 8007406:	bf00      	nop

08007408 <NTC_SetFaultState>:
  */
__weak uint16_t NTC_SetFaultState( NTC_Handle_t * pHandle )
{
  uint16_t hFault;

  if ( pHandle->hAvTemp_d > pHandle->hOverTempThreshold )
 8007408:	8a03      	ldrh	r3, [r0, #16]
 800740a:	8b42      	ldrh	r2, [r0, #26]
 800740c:	429a      	cmp	r2, r3
 800740e:	d306      	bcc.n	800741e <NTC_SetFaultState+0x16>
  {
    hFault = MC_OVER_TEMP;
  }
  else if ( pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold )
 8007410:	8b82      	ldrh	r2, [r0, #28]
 8007412:	429a      	cmp	r2, r3
 8007414:	d901      	bls.n	800741a <NTC_SetFaultState+0x12>
  {
    hFault = MC_NO_ERROR;
 8007416:	2000      	movs	r0, #0
  else
  {
    hFault = pHandle->hFaultState;
  }
  return hFault;
}
 8007418:	4770      	bx	lr
    hFault = pHandle->hFaultState;
 800741a:	8ac0      	ldrh	r0, [r0, #22]
 800741c:	4770      	bx	lr
    hFault = MC_OVER_TEMP;
 800741e:	2008      	movs	r0, #8
 8007420:	4770      	bx	lr
 8007422:	bf00      	nop

08007424 <NTC_Clear>:
 *
 *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
 */
__weak void NTC_Clear( NTC_Handle_t * pHandle )
{
  pHandle->hAvTemp_d = 0u;
 8007424:	2300      	movs	r3, #0
 8007426:	8203      	strh	r3, [r0, #16]
}
 8007428:	4770      	bx	lr
 800742a:	bf00      	nop

0800742c <NTC_Init>:
{
 800742c:	b510      	push	{r4, lr}
  if ( pHandle->bSensorType == REAL_SENSOR )
 800742e:	7803      	ldrb	r3, [r0, #0]
{
 8007430:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 8007432:	b123      	cbz	r3, 800743e <NTC_Init+0x12>
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8007434:	8a43      	ldrh	r3, [r0, #18]
 8007436:	8203      	strh	r3, [r0, #16]
    pHandle->hFaultState = MC_NO_ERROR;
 8007438:	2200      	movs	r2, #0
 800743a:	82c2      	strh	r2, [r0, #22]
}
 800743c:	bd10      	pop	{r4, pc}
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 800743e:	3004      	adds	r0, #4
 8007440:	f7fb fa70 	bl	8002924 <RCM_RegisterRegConv>
 8007444:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    NTC_Clear( pHandle );
 8007448:	4620      	mov	r0, r4
 800744a:	f7ff ffeb 	bl	8007424 <NTC_Clear>
}
 800744e:	bd10      	pop	{r4, pc}

08007450 <NTC_CalcAvTemp>:
  *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  *  @r Fault status : Error reported in case of an over temperature detection
  */
__weak uint16_t NTC_CalcAvTemp( NTC_Handle_t * pHandle )
{
 8007450:	b510      	push	{r4, lr}
  uint32_t wtemp;
  uint16_t hAux;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8007452:	7803      	ldrb	r3, [r0, #0]
{
 8007454:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 8007456:	b113      	cbz	r3, 800745e <NTC_CalcAvTemp+0xe>

    pHandle->hFaultState = NTC_SetFaultState( pHandle );
  }
  else  /* case VIRTUAL_SENSOR */
  {
    pHandle->hFaultState = MC_NO_ERROR;
 8007458:	2000      	movs	r0, #0
 800745a:	82e0      	strh	r0, [r4, #22]
  }

  return ( pHandle->hFaultState );
}
 800745c:	bd10      	pop	{r4, pc}
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 800745e:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8007462:	f7fb fb3b 	bl	8002adc <RCM_ExecRegularConv>
    if ( hAux != 0xFFFFu )
 8007466:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800746a:	4298      	cmp	r0, r3
 800746c:	d007      	beq.n	800747e <NTC_CalcAvTemp+0x2e>
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 800746e:	8b23      	ldrh	r3, [r4, #24]
      wtemp *= ( uint32_t ) ( pHandle->hAvTemp_d );
 8007470:	8a22      	ldrh	r2, [r4, #16]
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 8007472:	1e59      	subs	r1, r3, #1
      wtemp += hAux;
 8007474:	fb01 0002 	mla	r0, r1, r2, r0
      wtemp /= ( uint32_t )( pHandle->hLowPassFilterBW );
 8007478:	fbb0 f0f3 	udiv	r0, r0, r3
      pHandle->hAvTemp_d = ( uint16_t ) wtemp;
 800747c:	8220      	strh	r0, [r4, #16]
    pHandle->hFaultState = NTC_SetFaultState( pHandle );
 800747e:	4620      	mov	r0, r4
 8007480:	f7ff ffc2 	bl	8007408 <NTC_SetFaultState>
 8007484:	82e0      	strh	r0, [r4, #22]
}
 8007486:	bd10      	pop	{r4, pc}

08007488 <NTC_GetAvTemp_C>:
  */
__weak int16_t NTC_GetAvTemp_C( NTC_Handle_t * pHandle )
{
  int32_t wTemp;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8007488:	7803      	ldrb	r3, [r0, #0]
 800748a:	b983      	cbnz	r3, 80074ae <NTC_GetAvTemp_C+0x26>
  {
    wTemp = ( int32_t )( pHandle->hAvTemp_d );
 800748c:	8a02      	ldrh	r2, [r0, #16]
    wTemp -= ( int32_t )( pHandle->wV0 );
 800748e:	6a01      	ldr	r1, [r0, #32]
    wTemp *= pHandle->hSensitivity;
 8007490:	f9b0 301e 	ldrsh.w	r3, [r0, #30]
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8007494:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    wTemp -= ( int32_t )( pHandle->wV0 );
 8007496:	1a52      	subs	r2, r2, r1
    wTemp *= pHandle->hSensitivity;
 8007498:	fb02 f303 	mul.w	r3, r2, r3
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 800749c:	2b00      	cmp	r3, #0
 800749e:	bfbc      	itt	lt
 80074a0:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
 80074a4:	33ff      	addlt	r3, #255	; 0xff
 80074a6:	eb00 4023 	add.w	r0, r0, r3, asr #16
  else
  {
    wTemp = pHandle->hExpectedTemp_C;
  }
  return ( ( int16_t )wTemp );
}
 80074aa:	b200      	sxth	r0, r0
 80074ac:	4770      	bx	lr
    wTemp = pHandle->hExpectedTemp_C;
 80074ae:	8a80      	ldrh	r0, [r0, #20]
}
 80074b0:	b200      	sxth	r0, r0
 80074b2:	4770      	bx	lr

080074b4 <PID_HandleInit>:
__weak void PID_HandleInit( PID_Handle_t * pHandle )
{
  pHandle->hKpGain =  pHandle->hDefKpGain;
  pHandle->hKiGain =  pHandle->hDefKiGain;
  pHandle->hKdGain =  pHandle->hDefKdGain;
  pHandle->wIntegralTerm = 0x00000000UL;
 80074b4:	2300      	movs	r3, #0
  pHandle->hKpGain =  pHandle->hDefKpGain;
 80074b6:	6801      	ldr	r1, [r0, #0]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 80074b8:	8c02      	ldrh	r2, [r0, #32]
  pHandle->hKpGain =  pHandle->hDefKpGain;
 80074ba:	6041      	str	r1, [r0, #4]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 80074bc:	8442      	strh	r2, [r0, #34]	; 0x22
  pHandle->wIntegralTerm = 0x00000000UL;
 80074be:	6083      	str	r3, [r0, #8]
  pHandle->wPrevProcessVarError = 0x00000000UL;
 80074c0:	6283      	str	r3, [r0, #40]	; 0x28
}
 80074c2:	4770      	bx	lr

080074c4 <PID_SetKP>:
 * @param  hKpGain: new Kp gain
 * @retval None
 */
__weak void PID_SetKP( PID_Handle_t * pHandle, int16_t hKpGain )
{
  pHandle->hKpGain = hKpGain;
 80074c4:	8081      	strh	r1, [r0, #4]
}
 80074c6:	4770      	bx	lr

080074c8 <PID_SetKI>:
 * @param  hKiGain: new Ki gain
 * @retval None
 */
__weak void PID_SetKI( PID_Handle_t * pHandle, int16_t hKiGain )
{
  pHandle->hKiGain = hKiGain;
 80074c8:	80c1      	strh	r1, [r0, #6]
}
 80074ca:	4770      	bx	lr

080074cc <PID_GetKP>:
 * @retval Kp gain
 */
__weak int16_t PID_GetKP( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpGain );
}
 80074cc:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 80074d0:	4770      	bx	lr
 80074d2:	bf00      	nop

080074d4 <PID_GetKI>:
 * @retval Ki gain
 */
__weak int16_t PID_GetKI( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiGain );
}
 80074d4:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80074d8:	4770      	bx	lr
 80074da:	bf00      	nop

080074dc <PID_SetIntegralTerm>:
 * @param  wIntegralTermValue: new integral term value
 * @retval None
 */
__weak void PID_SetIntegralTerm( PID_Handle_t * pHandle, int32_t wIntegralTermValue )
{
  pHandle->wIntegralTerm = wIntegralTermValue;
 80074dc:	6081      	str	r1, [r0, #8]

  return;
}
 80074de:	4770      	bx	lr

080074e0 <PID_GetKPDivisor>:
 * @retval Kp gain divisor
 */
__weak uint16_t PID_GetKPDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpDivisor );
}
 80074e0:	8b00      	ldrh	r0, [r0, #24]
 80074e2:	4770      	bx	lr

080074e4 <PID_GetKIDivisor>:
 * @retval Ki gain divisor
 */
__weak uint16_t PID_GetKIDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiDivisor );
}
 80074e4:	8b40      	ldrh	r0, [r0, #26]
 80074e6:	4770      	bx	lr

080074e8 <PID_SetKD>:
 * @param  hKdGain: new Kd gain
 * @retval None
 */
__weak void PID_SetKD( PID_Handle_t * pHandle, int16_t hKdGain )
{
  pHandle->hKdGain = hKdGain;
 80074e8:	8441      	strh	r1, [r0, #34]	; 0x22
}
 80074ea:	4770      	bx	lr

080074ec <PID_GetKD>:
 * @retval Kd gain
 */
__weak int16_t PID_GetKD( PID_Handle_t * pHandle )
{
  return pHandle->hKdGain;
}
 80074ec:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 80074f0:	4770      	bx	lr
 80074f2:	bf00      	nop

080074f4 <PI_Controller>:
  int32_t wDischarge = 0;
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

  /* Proportional term computation*/
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 80074f4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]

  /* Integral term computation */
  if ( pHandle->hKiGain == 0 )
 80074f8:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 80074fc:	f9b0 c014 	ldrsh.w	ip, [r0, #20]
{
 8007500:	b510      	push	{r4, lr}
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8007502:	fb01 f303 	mul.w	r3, r1, r3
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8007506:	f9b0 e016 	ldrsh.w	lr, [r0, #22]
  if ( pHandle->hKiGain == 0 )
 800750a:	b162      	cbz	r2, 8007526 <PI_Controller+0x32>
  {
    pHandle->wIntegralTerm = 0;
  }
  else
  {
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 800750c:	fb01 f202 	mul.w	r2, r1, r2
    wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 8007510:	6881      	ldr	r1, [r0, #8]

    if ( wIntegral_sum_temp < 0 )
 8007512:	188c      	adds	r4, r1, r2
 8007514:	d420      	bmi.n	8007558 <PI_Controller+0x64>
        }
      }
    }
    else
    {
      if ( pHandle->wIntegralTerm < 0 )
 8007516:	2900      	cmp	r1, #0
 8007518:	db2a      	blt.n	8007570 <PI_Controller+0x7c>
          wIntegral_sum_temp = -INT32_MAX;
        }
      }
    }

    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 800751a:	68c2      	ldr	r2, [r0, #12]
 800751c:	42a2      	cmp	r2, r4
 800751e:	db02      	blt.n	8007526 <PI_Controller+0x32>
    {
      pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
    }
    else if ( wIntegral_sum_temp < pHandle->wLowerIntegralLimit )
 8007520:	6902      	ldr	r2, [r0, #16]
 8007522:	42a2      	cmp	r2, r4
 8007524:	dd22      	ble.n	800756c <PI_Controller+0x78>
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
             that Cortex-M3 assembly instruction ASR (arithmetic shift right)
             is used by the compiler to perform the shifts (instead of LSR
             logical shift right)*/
  wOutput_32 = ( wProportional_Term >> pHandle->hKpDivisorPOW2 ) + ( pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2 );
 8007526:	8b81      	ldrh	r1, [r0, #28]
 8007528:	410b      	asrs	r3, r1
 800752a:	8bc1      	ldrh	r1, [r0, #30]
 800752c:	fa42 f101 	asr.w	r1, r2, r1
 8007530:	440b      	add	r3, r1
#endif

  if ( wOutput_32 > hUpperOutputLimit )
 8007532:	459c      	cmp	ip, r3
 8007534:	da05      	bge.n	8007542 <PI_Controller+0x4e>
  {

    wDischarge = hUpperOutputLimit - wOutput_32;
 8007536:	ebac 0303 	sub.w	r3, ip, r3
    wDischarge = hLowerOutputLimit - wOutput_32;
    wOutput_32 = hLowerOutputLimit;
  }
  else { /* Nothing to do here */ }

  pHandle->wIntegralTerm += wDischarge;
 800753a:	441a      	add	r2, r3
 800753c:	6082      	str	r2, [r0, #8]

  return ( ( int16_t )( wOutput_32 ) );
}
 800753e:	4660      	mov	r0, ip
 8007540:	bd10      	pop	{r4, pc}
  else if ( wOutput_32 < hLowerOutputLimit )
 8007542:	459e      	cmp	lr, r3
    wDischarge = hLowerOutputLimit - wOutput_32;
 8007544:	bfc9      	itett	gt
 8007546:	ebae 0303 	subgt.w	r3, lr, r3
  return ( ( int16_t )( wOutput_32 ) );
 800754a:	fa0f fc83 	sxthle.w	ip, r3
  pHandle->wIntegralTerm += wDischarge;
 800754e:	18d2      	addgt	r2, r2, r3
 8007550:	46f4      	movgt	ip, lr
 8007552:	6082      	str	r2, [r0, #8]
}
 8007554:	4660      	mov	r0, ip
 8007556:	bd10      	pop	{r4, pc}
      if ( pHandle->wIntegralTerm > 0 )
 8007558:	2900      	cmp	r1, #0
 800755a:	ddde      	ble.n	800751a <PI_Controller+0x26>
        if ( wIntegral_Term > 0 )
 800755c:	2a00      	cmp	r2, #0
 800755e:	dddc      	ble.n	800751a <PI_Controller+0x26>
    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8007560:	68c2      	ldr	r2, [r0, #12]
 8007562:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007566:	428a      	cmp	r2, r1
 8007568:	d1dd      	bne.n	8007526 <PI_Controller+0x32>
          wIntegral_sum_temp = INT32_MAX;
 800756a:	4614      	mov	r4, r2
 800756c:	4622      	mov	r2, r4
 800756e:	e7da      	b.n	8007526 <PI_Controller+0x32>
          wIntegral_sum_temp = -INT32_MAX;
 8007570:	4902      	ldr	r1, [pc, #8]	; (800757c <PI_Controller+0x88>)
 8007572:	ea34 0422 	bics.w	r4, r4, r2, asr #32
 8007576:	bf28      	it	cs
 8007578:	460c      	movcs	r4, r1
 800757a:	e7ce      	b.n	800751a <PI_Controller+0x26>
 800757c:	80000001 	.word	0x80000001

08007580 <PQD_CalcElMotorPower>:
  */
__weak void PQD_CalcElMotorPower( PQD_MotorPowMeas_Handle_t * pHandle )
{

  int32_t wAux, wAux2, wAux3;
  qd_t Iqd = pHandle->pFOCVars->Iqd;
 8007580:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
{
 8007584:	b570      	push	{r4, r5, r6, lr}
  qd_t Vqd = pHandle->pFOCVars->Vqd;
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 8007586:	8b11      	ldrh	r1, [r2, #24]
 8007588:	89d4      	ldrh	r4, [r2, #14]
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 800758a:	8993      	ldrh	r3, [r2, #12]
 800758c:	8ad2      	ldrh	r2, [r2, #22]
  wAux /= 65536;

  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 800758e:	f8d0 6108 	ldr.w	r6, [r0, #264]	; 0x108
{
 8007592:	4605      	mov	r5, r0
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 8007594:	fb14 f401 	smulbb	r4, r4, r1
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8007598:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 800759c:	fb13 4402 	smlabb	r4, r3, r2, r4
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 80075a0:	f7ff faa2 	bl	8006ae8 <VBS_GetAvBusVoltage_V>
  wAux /= 65536;
 80075a4:	1e23      	subs	r3, r4, #0
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 80075a6:	490f      	ldr	r1, [pc, #60]	; (80075e4 <PQD_CalcElMotorPower+0x64>)
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 80075a8:	fb06 f000 	mul.w	r0, r6, r0
  wAux /= 65536;
 80075ac:	bfb8      	it	lt
 80075ae:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 80075b2:	ea4f 72e0 	mov.w	r2, r0, asr #31
  wAux /= 65536;
 80075b6:	bfb8      	it	lt
 80075b8:	33ff      	addlt	r3, #255	; 0xff
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 80075ba:	fb81 1000 	smull	r1, r0, r1, r0
 80075be:	ebc2 10a0 	rsb	r0, r2, r0, asr #6
  wAux /= 65536;
 80075c2:	141b      	asrs	r3, r3, #16

  wAux3 = wAux * wAux2;
 80075c4:	fb00 f303 	mul.w	r3, r0, r3
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
  wAux3 /= 10;
  wAux3 /= 65536;
 80075c8:	4907      	ldr	r1, [pc, #28]	; (80075e8 <PQD_CalcElMotorPower+0x68>)
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
 80075ca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80075ce:	005b      	lsls	r3, r3, #1
  wAux3 /= 65536;
 80075d0:	fb81 2103 	smull	r2, r1, r1, r3
 80075d4:	17db      	asrs	r3, r3, #31

  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 80075d6:	4628      	mov	r0, r5
 80075d8:	ebc3 41a1 	rsb	r1, r3, r1, asr #18

}
 80075dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 80075e0:	f7ff beee 	b.w	80073c0 <MPM_CalcElMotorPower>
 80075e4:	1b4e81b5 	.word	0x1b4e81b5
 80075e8:	66666667 	.word	0x66666667

080075ec <startTimers>:
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
*/
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return (READ_BIT(RCC->APB1ENR, Periphs) == Periphs);
 80075ec:	4b17      	ldr	r3, [pc, #92]	; (800764c <startTimers+0x60>)
 80075ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  uint32_t isTIM2ClockOn;
  uint32_t trigOut;

  isTIM2ClockOn = LL_APB1_GRP1_IsEnabledClock ( LL_APB1_GRP1_PERIPH_TIM2 );
  if ( isTIM2ClockOn == 0 )
 80075f0:	07d2      	lsls	r2, r2, #31
 80075f2:	d415      	bmi.n	8007620 <startTimers+0x34>
  SET_BIT(RCC->APB1ENR, Periphs);
 80075f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075f6:	f042 0201 	orr.w	r2, r2, #1
 80075fa:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80075fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 80075fe:	b082      	sub	sp, #8
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8007600:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007604:	f002 0201 	and.w	r2, r2, #1
 8007608:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 800760a:	9a01      	ldr	r2, [sp, #4]
 800760c:	694a      	ldr	r2, [r1, #20]
 800760e:	f042 0201 	orr.w	r2, r2, #1
 8007612:	614a      	str	r2, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 8007614:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007616:	f022 0201 	bic.w	r2, r2, #1
 800761a:	641a      	str	r2, [r3, #64]	; 0x40
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput( TIM2, LL_TIM_TRGO_UPDATE );
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
    LL_TIM_SetTriggerOutput( TIM2, trigOut );
  }
}
 800761c:	b002      	add	sp, #8
 800761e:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
 8007620:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007624:	685a      	ldr	r2, [r3, #4]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8007626:	6859      	ldr	r1, [r3, #4]
 8007628:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800762c:	f041 0120 	orr.w	r1, r1, #32
 8007630:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8007632:	6959      	ldr	r1, [r3, #20]
 8007634:	f041 0101 	orr.w	r1, r1, #1
 8007638:	6159      	str	r1, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800763a:	6859      	ldr	r1, [r3, #4]
 800763c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8007640:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8007644:	430a      	orrs	r2, r1
 8007646:	605a      	str	r2, [r3, #4]
 8007648:	4770      	bx	lr
 800764a:	bf00      	nop
 800764c:	40023800 	.word	0x40023800

08007650 <waitForPolarizationEnd>:
 *         repCnt: repetition counter value
 *         cnt: polarization counter value
 * @retval none
 */
__weak void waitForPolarizationEnd( TIM_TypeDef*  TIMx, uint16_t  *SWerror, uint8_t repCnt, volatile uint8_t *cnt )
{
 8007650:	b570      	push	{r4, r5, r6, lr}
  counter_mode = (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_CMS));
 8007652:	6804      	ldr	r4, [r0, #0]
  if (counter_mode == 0U)
 8007654:	f014 0460 	ands.w	r4, r4, #96	; 0x60
 8007658:	d11c      	bne.n	8007694 <waitForPolarizationEnd+0x44>
    counter_mode = (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 800765a:	6804      	ldr	r4, [r0, #0]
  {
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
  }
  else
  {
	hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u)>>1);
 800765c:	3201      	adds	r2, #1
 800765e:	0855      	lsrs	r5, r2, #1
 8007660:	016d      	lsls	r5, r5, #5
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8007662:	f06f 0602 	mvn.w	r6, #2
 8007666:	6106      	str	r6, [r0, #16]
  }

  /* Wait for NB_CONVERSIONS to be executed */
  LL_TIM_ClearFlag_CC1(TIMx);
  hCalibrationPeriodCounter = 0u;
 8007668:	2200      	movs	r2, #0
  while (*cnt < NB_CONVERSIONS)
 800766a:	f893 c000 	ldrb.w	ip, [r3]
 800766e:	f1bc 0f0f 	cmp.w	ip, #15
  {
    if (LL_TIM_IsActiveFlag_CC1(TIMx))
    {
      LL_TIM_ClearFlag_CC1(TIMx);
      hCalibrationPeriodCounter++;
 8007672:	f102 0e01 	add.w	lr, r2, #1
  while (*cnt < NB_CONVERSIONS)
 8007676:	d80c      	bhi.n	8007692 <waitForPolarizationEnd+0x42>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8007678:	6904      	ldr	r4, [r0, #16]
 800767a:	07a4      	lsls	r4, r4, #30
 800767c:	d5f5      	bpl.n	800766a <waitForPolarizationEnd+0x1a>
      hCalibrationPeriodCounter++;
 800767e:	fa1f f28e 	uxth.w	r2, lr
      if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 8007682:	4295      	cmp	r5, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8007684:	6106      	str	r6, [r0, #16]
 8007686:	d8f0      	bhi.n	800766a <waitForPolarizationEnd+0x1a>
      {
        if (*cnt < NB_CONVERSIONS)
 8007688:	781c      	ldrb	r4, [r3, #0]
 800768a:	2c0f      	cmp	r4, #15
 800768c:	d8ed      	bhi.n	800766a <waitForPolarizationEnd+0x1a>
        {
          *SWerror = 1u;
 800768e:	2301      	movs	r3, #1
 8007690:	800b      	strh	r3, [r1, #0]
          break;
        }
      }
    }
  }
}
 8007692:	bd70      	pop	{r4, r5, r6, pc}
  if ( (LL_TIM_GetCounterMode(TIMx) & LL_TIM_COUNTERMODE_CENTER_UP_DOWN) == LL_TIM_COUNTERMODE_CENTER_UP_DOWN)
 8007694:	2c60      	cmp	r4, #96	; 0x60
 8007696:	d1e1      	bne.n	800765c <waitForPolarizationEnd+0xc>
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
 8007698:	3201      	adds	r2, #1
 800769a:	0155      	lsls	r5, r2, #5
 800769c:	e7e1      	b.n	8007662 <waitForPolarizationEnd+0x12>
 800769e:	bf00      	nop

080076a0 <PWMC_GetPhaseCurrents>:
  * @param  pStator_Currents Pointer to the structure that will receive motor current
  *         of phase A and B in ElectricalValue format.
*/
__weak void PWMC_GetPhaseCurrents( PWMC_Handle_t * pHandle, ab_t * Iab )
{
  pHandle->pFctGetPhaseCurrents( pHandle, Iab );
 80076a0:	6843      	ldr	r3, [r0, #4]
 80076a2:	4718      	bx	r3

080076a4 <PWMC_SetPhaseVoltage>:
  *
  * @retval Returns #MC_NO_ERROR if no error occurred or #MC_FOC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage( PWMC_Handle_t * pHandle, alphabeta_t Valfa_beta )
{
 80076a4:	b510      	push	{r4, lr}
  int32_t wX, wY, wZ, wUAlpha, wUBeta, wTimePhA, wTimePhB, wTimePhC;

  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 80076a6:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 80076aa:	8e03      	ldrh	r3, [r0, #48]	; 0x30
{
 80076ac:	b082      	sub	sp, #8
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 80076ae:	ea4f 4c21 	mov.w	ip, r1, asr #16
{
 80076b2:	9101      	str	r1, [sp, #4]
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 80076b4:	fb04 fc0c 	mul.w	ip, r4, ip
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 80076b8:	b209      	sxth	r1, r1
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 80076ba:	ebcc 7ccc 	rsb	ip, ip, ip, lsl #31
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 80076be:	fb03 f101 	mul.w	r1, r3, r1

  wX = wUBeta;
  wY = ( wUBeta + wUAlpha ) / 2;
 80076c2:	eb01 034c 	add.w	r3, r1, ip, lsl #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 80076c6:	ebc1 014c 	rsb	r1, r1, ip, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 80076ca:	eb03 7ed3 	add.w	lr, r3, r3, lsr #31
  wZ = ( wUBeta - wUAlpha ) / 2;
 80076ce:	eb01 72d1 	add.w	r2, r1, r1, lsr #31

  /* Sector calculation from wX, wY, wZ */
  if ( wY < 0 )
 80076d2:	f1b3 3fff 	cmp.w	r3, #4294967295
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 80076d6:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 80076da:	ea4f 0e6e 	mov.w	lr, lr, asr #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 80076de:	ea4f 0262 	mov.w	r2, r2, asr #1
  if ( wY < 0 )
 80076e2:	db7d      	blt.n	80077e0 <PWMC_SetPhaseVoltage+0x13c>
        pHandle->highDuty = wTimePhA;
      }
  }
  else /* wY > 0 */
  {
    if ( wZ >= 0 )
 80076e4:	f1b1 3fff 	cmp.w	r1, #4294967295
 80076e8:	db51      	blt.n	800778e <PWMC_SetPhaseVoltage+0xea>
    {
      pHandle->Sector = SECTOR_2;
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 80076ea:	ebbe 0e02 	subs.w	lr, lr, r2
 80076ee:	bf44      	itt	mi
 80076f0:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 80076f4:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 80076f8:	2900      	cmp	r1, #0
 80076fa:	bfbc      	itt	lt
 80076fc:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 8007700:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8007704:	2b00      	cmp	r3, #0
 8007706:	bfb8      	it	lt
 8007708:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 800770c:	ea4f 0294 	mov.w	r2, r4, lsr #2
 8007710:	eb02 42ae 	add.w	r2, r2, lr, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8007714:	bfb8      	it	lt
 8007716:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      pHandle->Sector = SECTOR_2;
 800771a:	f04f 0c01 	mov.w	ip, #1
      wTimePhB = wTimePhA + wZ / 131072;
 800771e:	eb02 41a1 	add.w	r1, r2, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8007722:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
      pHandle->Sector = SECTOR_2;
 8007726:	f880 c03a 	strb.w	ip, [r0, #58]	; 0x3a
      pHandle->lowDuty = wTimePhB;
 800772a:	8781      	strh	r1, [r0, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 800772c:	87c2      	strh	r2, [r0, #62]	; 0x3e
      pHandle->highDuty = wTimePhC;
 800772e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
  
  if ( pHandle->DTTest == 1u )
 8007732:	f8b0 404e 	ldrh.w	r4, [r0, #78]	; 0x4e
 8007736:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800773a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800773e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007742:	b292      	uxth	r2, r2
 8007744:	b289      	uxth	r1, r1
 8007746:	b29b      	uxth	r3, r3
 8007748:	2c01      	cmp	r4, #1
  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
 800774a:	8642      	strh	r2, [r0, #50]	; 0x32
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
 800774c:	8681      	strh	r1, [r0, #52]	; 0x34
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
 800774e:	86c3      	strh	r3, [r0, #54]	; 0x36
  if ( pHandle->DTTest == 1u )
 8007750:	d118      	bne.n	8007784 <PWMC_SetPhaseVoltage+0xe0>
  {
    /* Dead time compensation */
    if ( pHandle->Ia > 0 )
 8007752:	f9b0 4048 	ldrsh.w	r4, [r0, #72]	; 0x48
 8007756:	2c00      	cmp	r4, #0
    {
      pHandle->CntPhA += pHandle->DTCompCnt;
 8007758:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
 800775c:	bfcc      	ite	gt
 800775e:	1912      	addgt	r2, r2, r4
    }
    else
    {
      pHandle->CntPhA -= pHandle->DTCompCnt;
 8007760:	1b12      	suble	r2, r2, r4
 8007762:	b292      	uxth	r2, r2
 8007764:	8642      	strh	r2, [r0, #50]	; 0x32
    }

    if ( pHandle->Ib > 0 )
 8007766:	f9b0 204a 	ldrsh.w	r2, [r0, #74]	; 0x4a
 800776a:	2a00      	cmp	r2, #0
    else
    {
      pHandle->CntPhB -= pHandle->DTCompCnt;
    }

    if ( pHandle->Ic > 0 )
 800776c:	f9b0 204c 	ldrsh.w	r2, [r0, #76]	; 0x4c
      pHandle->CntPhB += pHandle->DTCompCnt;
 8007770:	bfcc      	ite	gt
 8007772:	1909      	addgt	r1, r1, r4
      pHandle->CntPhB -= pHandle->DTCompCnt;
 8007774:	1b09      	suble	r1, r1, r4
    if ( pHandle->Ic > 0 )
 8007776:	2a00      	cmp	r2, #0
      pHandle->CntPhB -= pHandle->DTCompCnt;
 8007778:	b289      	uxth	r1, r1
    {
      pHandle->CntPhC += pHandle->DTCompCnt;
 800777a:	bfcc      	ite	gt
 800777c:	191b      	addgt	r3, r3, r4
    }
    else
    {
      pHandle->CntPhC -= pHandle->DTCompCnt;
 800777e:	1b1b      	suble	r3, r3, r4
 8007780:	8681      	strh	r1, [r0, #52]	; 0x34
 8007782:	86c3      	strh	r3, [r0, #54]	; 0x36
    }
  }

  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 8007784:	6983      	ldr	r3, [r0, #24]
}
 8007786:	b002      	add	sp, #8
 8007788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 800778c:	4718      	bx	r3
      if ( wX <= 0 )
 800778e:	f1bc 0f00 	cmp.w	ip, #0
 8007792:	dd4b      	ble.n	800782c <PWMC_SetPhaseVoltage+0x188>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8007794:	ebbc 0e02 	subs.w	lr, ip, r2
 8007798:	bf44      	itt	mi
 800779a:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 800779e:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 80077a2:	2900      	cmp	r1, #0
 80077a4:	bfb8      	it	lt
 80077a6:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_1;
 80077aa:	f04f 0300 	mov.w	r3, #0
        wTimePhB = wTimePhA + wZ / 131072;
 80077ae:	bfb8      	it	lt
 80077b0:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        pHandle->Sector = SECTOR_1;
 80077b4:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 80077b8:	08a2      	lsrs	r2, r4, #2
        wTimePhC = wTimePhB - wX / 131072;
 80077ba:	f1bc 0300 	subs.w	r3, ip, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 80077be:	eb02 42ae 	add.w	r2, r2, lr, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 80077c2:	bfb8      	it	lt
 80077c4:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 80077c8:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 80077cc:	bfb8      	it	lt
 80077ce:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 80077d2:	eba1 4363 	sub.w	r3, r1, r3, asr #17
        pHandle->lowDuty = wTimePhA;
 80077d6:	8782      	strh	r2, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 80077d8:	87c1      	strh	r1, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhC;
 80077da:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 80077de:	e7a8      	b.n	8007732 <PWMC_SetPhaseVoltage+0x8e>
    if ( wZ < 0 )
 80077e0:	f1b1 3fff 	cmp.w	r1, #4294967295
 80077e4:	db6f      	blt.n	80078c6 <PWMC_SetPhaseVoltage+0x222>
      if ( wX <= 0 )
 80077e6:	f1bc 0f00 	cmp.w	ip, #0
 80077ea:	dd46      	ble.n	800787a <PWMC_SetPhaseVoltage+0x1d6>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 80077ec:	ebbe 0e0c 	subs.w	lr, lr, ip
 80077f0:	bf48      	it	mi
 80077f2:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_3;
 80077f6:	f04f 0202 	mov.w	r2, #2
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 80077fa:	bf48      	it	mi
 80077fc:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 8007800:	2b00      	cmp	r3, #0
 8007802:	bfb8      	it	lt
 8007804:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_3;
 8007808:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 800780c:	ea4f 0294 	mov.w	r2, r4, lsr #2
 8007810:	eb02 42ae 	add.w	r2, r2, lr, asr #18
        wTimePhC = wTimePhA - wY / 131072;
 8007814:	bfb8      	it	lt
 8007816:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
 800781a:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 800781e:	eb03 416c 	add.w	r1, r3, ip, asr #17
        pHandle->lowDuty = wTimePhB;
 8007822:	8781      	strh	r1, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 8007824:	87c3      	strh	r3, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 8007826:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 800782a:	e782      	b.n	8007732 <PWMC_SetPhaseVoltage+0x8e>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 800782c:	ebbe 0e0c 	subs.w	lr, lr, ip
 8007830:	bf44      	itt	mi
 8007832:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 8007836:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 800783a:	2b00      	cmp	r3, #0
 800783c:	bfb8      	it	lt
 800783e:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_6;
 8007842:	f04f 0205 	mov.w	r2, #5
        wTimePhC = wTimePhA - wY / 131072;
 8007846:	bfb8      	it	lt
 8007848:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        pHandle->Sector = SECTOR_6;
 800784c:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
        wTimePhB = wTimePhC + wX / 131072;
 8007850:	f1bc 0100 	subs.w	r1, ip, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8007854:	ea4f 0294 	mov.w	r2, r4, lsr #2
 8007858:	eb02 42ae 	add.w	r2, r2, lr, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 800785c:	bfb8      	it	lt
 800785e:	f501 31ff 	addlt.w	r1, r1, #130560	; 0x1fe00
        wTimePhC = wTimePhA - wY / 131072;
 8007862:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8007866:	bfb8      	it	lt
 8007868:	f201 11ff 	addwlt	r1, r1, #511	; 0x1ff
 800786c:	eb03 4161 	add.w	r1, r3, r1, asr #17
        pHandle->lowDuty = wTimePhA;
 8007870:	8782      	strh	r2, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 8007872:	87c3      	strh	r3, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhB;
 8007874:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8007878:	e75b      	b.n	8007732 <PWMC_SetPhaseVoltage+0x8e>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 800787a:	ebbc 0e02 	subs.w	lr, ip, r2
 800787e:	bf44      	itt	mi
 8007880:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 8007884:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 8007888:	2900      	cmp	r1, #0
 800788a:	bfb8      	it	lt
 800788c:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_4;
 8007890:	f04f 0303 	mov.w	r3, #3
        wTimePhB = wTimePhA + wZ / 131072;
 8007894:	bfb8      	it	lt
 8007896:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        pHandle->Sector = SECTOR_4;
 800789a:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 800789e:	08a2      	lsrs	r2, r4, #2
        wTimePhC = wTimePhB - wX / 131072;
 80078a0:	f1bc 0300 	subs.w	r3, ip, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 80078a4:	eb02 42ae 	add.w	r2, r2, lr, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 80078a8:	bfb8      	it	lt
 80078aa:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 80078ae:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 80078b2:	bfb8      	it	lt
 80078b4:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 80078b8:	eba1 4363 	sub.w	r3, r1, r3, asr #17
        pHandle->lowDuty = wTimePhC;
 80078bc:	8783      	strh	r3, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 80078be:	87c1      	strh	r1, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 80078c0:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 80078c4:	e735      	b.n	8007732 <PWMC_SetPhaseVoltage+0x8e>
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 80078c6:	ebbe 0e02 	subs.w	lr, lr, r2
 80078ca:	bf44      	itt	mi
 80078cc:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 80078d0:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 80078d4:	2900      	cmp	r1, #0
 80078d6:	bfbc      	itt	lt
 80078d8:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 80078dc:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	bfb8      	it	lt
 80078e4:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 80078e8:	ea4f 0294 	mov.w	r2, r4, lsr #2
 80078ec:	eb02 42ae 	add.w	r2, r2, lr, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 80078f0:	bfb8      	it	lt
 80078f2:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      pHandle->Sector = SECTOR_5;
 80078f6:	f04f 0c04 	mov.w	ip, #4
      wTimePhB = wTimePhA + wZ / 131072;
 80078fa:	eb02 41a1 	add.w	r1, r2, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 80078fe:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
      pHandle->Sector = SECTOR_5;
 8007902:	f880 c03a 	strb.w	ip, [r0, #58]	; 0x3a
      pHandle->lowDuty = wTimePhC;
 8007906:	8783      	strh	r3, [r0, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 8007908:	87c2      	strh	r2, [r0, #62]	; 0x3e
      pHandle->highDuty = wTimePhB;
 800790a:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 800790e:	e710      	b.n	8007732 <PWMC_SetPhaseVoltage+0x8e>

08007910 <PWMC_SwitchOffPWM>:
  * @brief  Switches PWM generation off, inactivating the outputs.
  * @param  pHandle Handle on the target instance of the PWMC component
  */
__weak void PWMC_SwitchOffPWM( PWMC_Handle_t * pHandle )
{
  pHandle->pFctSwitchOffPwm( pHandle );
 8007910:	6883      	ldr	r3, [r0, #8]
 8007912:	4718      	bx	r3

08007914 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, false if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr( PWMC_Handle_t * pHandle, CRCAction_t action )
{
 8007914:	b510      	push	{r4, lr}
 8007916:	4604      	mov	r4, r0
 8007918:	b082      	sub	sp, #8
  bool retVal = false;
  if ( action == CRC_START )
 800791a:	b199      	cbz	r1, 8007944 <PWMC_CurrentReadingCalibr+0x30>
    {
      pHandle->pFctCurrReadingCalib( pHandle );
      retVal = true;
    }
  }
  else if ( action == CRC_EXEC )
 800791c:	2901      	cmp	r1, #1
 800791e:	d002      	beq.n	8007926 <PWMC_CurrentReadingCalibr+0x12>
  bool retVal = false;
 8007920:	2000      	movs	r0, #0
  }
  else
  {
  }
  return retVal;
}
 8007922:	b002      	add	sp, #8
 8007924:	bd10      	pop	{r4, pc}
    if ( pHandle->OffCalibrWaitTimeCounter > 0u )
 8007926:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800792a:	b1cb      	cbz	r3, 8007960 <PWMC_CurrentReadingCalibr+0x4c>
      pHandle->OffCalibrWaitTimeCounter--;
 800792c:	3b01      	subs	r3, #1
 800792e:	b29b      	uxth	r3, r3
 8007930:	9101      	str	r1, [sp, #4]
 8007932:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
      if ( pHandle->OffCalibrWaitTimeCounter == 0u )
 8007936:	2b00      	cmp	r3, #0
 8007938:	d1f2      	bne.n	8007920 <PWMC_CurrentReadingCalibr+0xc>
        pHandle->pFctCurrReadingCalib( pHandle );
 800793a:	6903      	ldr	r3, [r0, #16]
 800793c:	4798      	blx	r3
        retVal = true;
 800793e:	9901      	ldr	r1, [sp, #4]
 8007940:	4608      	mov	r0, r1
 8007942:	e7ee      	b.n	8007922 <PWMC_CurrentReadingCalibr+0xe>
    PWMC_SwitchOffPWM( pHandle );
 8007944:	f7ff ffe4 	bl	8007910 <PWMC_SwitchOffPWM>
    pHandle->OffCalibrWaitTimeCounter = pHandle->OffCalibrWaitTicks;
 8007948:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800794c:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    if ( pHandle->OffCalibrWaitTicks == 0u )
 8007950:	2b00      	cmp	r3, #0
 8007952:	d1e5      	bne.n	8007920 <PWMC_CurrentReadingCalibr+0xc>
      pHandle->pFctCurrReadingCalib( pHandle );
 8007954:	4620      	mov	r0, r4
 8007956:	6923      	ldr	r3, [r4, #16]
 8007958:	4798      	blx	r3
      retVal = true;
 800795a:	2001      	movs	r0, #1
}
 800795c:	b002      	add	sp, #8
 800795e:	bd10      	pop	{r4, pc}
      retVal = true;
 8007960:	4608      	mov	r0, r1
}
 8007962:	b002      	add	sp, #8
 8007964:	bd10      	pop	{r4, pc}
 8007966:	bf00      	nop

08007968 <PWMC_CheckOverCurrent>:
/** @brief Returns #MC_BREAK_IN if an over current condition was detected on the power stage
 *         controlled by the PWMC component pointed by  @p pHandle, since the last call to this function;
 *         returns #MC_NO_FAULTS otherwise. */
__weak uint16_t PWMC_CheckOverCurrent( PWMC_Handle_t * pHandle )
{
  return pHandle->pFctIsOverCurrentOccurred( pHandle );
 8007968:	69c3      	ldr	r3, [r0, #28]
 800796a:	4718      	bx	r3

0800796c <R3_1_GetPhaseCurrents>:
  * @retval Ia and Ib current in ab_t format
  */
__weak void R3_1_GetPhaseCurrents(PWMC_Handle_t *pHdl, ab_t* pStator_Currents)
{
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800796c:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 800796e:	b530      	push	{r4, r5, lr}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007970:	685c      	ldr	r4, [r3, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 8007972:	6a22      	ldr	r2, [r4, #32]
 8007974:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007978:	6222      	str	r2, [r4, #32]
  uint8_t bSector;

  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  bSector = ( uint8_t )( pHandle->_Super.Sector );
 800797a:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a

  hReg1 =  *pHandle->pParams_str->ADCDataReg1[bSector]*2;
 800797e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  hReg2 =  *pHandle->pParams_str->ADCDataReg2[bSector]*2;
 8007982:	6d1c      	ldr	r4, [r3, #80]	; 0x50
  hReg1 =  *pHandle->pParams_str->ADCDataReg1[bSector]*2;
 8007984:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8007986:	682b      	ldr	r3, [r5, #0]
  hReg2 =  *pHandle->pParams_str->ADCDataReg2[bSector]*2;
 8007988:	6824      	ldr	r4, [r4, #0]
  hReg1 =  *pHandle->pParams_str->ADCDataReg1[bSector]*2;
 800798a:	005b      	lsls	r3, r3, #1
  hReg2 =  *pHandle->pParams_str->ADCDataReg2[bSector]*2;
 800798c:	ea4f 0c44 	mov.w	ip, r4, lsl #1
  hReg1 =  *pHandle->pParams_str->ADCDataReg1[bSector]*2;
 8007990:	b29b      	uxth	r3, r3
  hReg2 =  *pHandle->pParams_str->ADCDataReg2[bSector]*2;
 8007992:	fa1f fc8c 	uxth.w	ip, ip

  switch ( bSector )
 8007996:	2a05      	cmp	r2, #5
 8007998:	f200 80a6 	bhi.w	8007ae8 <R3_1_GetPhaseCurrents+0x17c>
 800799c:	e8df f002 	tbb	[pc, r2]
 80079a0:	031c1c36 	.word	0x031c1c36
 80079a4:	3603      	.short	0x3603
    case SECTOR_4:
    case SECTOR_5:
    {
      /* Current on Phase C is not accessible     */
      /* Ia = PhaseAOffset - ADC converted value) */
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 80079a6:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80079a8:	1ad3      	subs	r3, r2, r3
      /* Saturation of Ia */
      if ( wAux < -INT16_MAX )
 80079aa:	4a53      	ldr	r2, [pc, #332]	; (8007af8 <R3_1_GetPhaseCurrents+0x18c>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	db5a      	blt.n	8007a66 <R3_1_GetPhaseCurrents+0xfa>
      {
        pStator_Currents->a = ( int16_t )wAux;
      }

      /* Ib = PhaseBOffset - ADC converted value) */
        wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 80079b0:	6e02      	ldr	r2, [r0, #96]	; 0x60

      /* Saturation of Ib */
      if ( wAux < -INT16_MAX )
 80079b2:	4d51      	ldr	r5, [pc, #324]	; (8007af8 <R3_1_GetPhaseCurrents+0x18c>)
      else  if ( wAux > INT16_MAX )
 80079b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
        wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 80079b8:	eba2 0c0c 	sub.w	ip, r2, ip
        pStator_Currents->a = INT16_MAX;
 80079bc:	bfa8      	it	ge
 80079be:	f647 73ff 	movwge	r3, #32767	; 0x7fff
      if ( wAux < -INT16_MAX )
 80079c2:	45ac      	cmp	ip, r5
        pStator_Currents->a = ( int16_t )wAux;
 80079c4:	800b      	strh	r3, [r1, #0]
      if ( wAux < -INT16_MAX )
 80079c6:	da55      	bge.n	8007a74 <R3_1_GetPhaseCurrents+0x108>
    default:
    {
    }
    break;
  }
  pHandle->_Super.Ia = pStator_Currents->a;
 80079c8:	f9b1 e000 	ldrsh.w	lr, [r1]
        pStator_Currents->b = -INT16_MAX;
 80079cc:	804d      	strh	r5, [r1, #2]
  pHandle->_Super.Ib = pStator_Currents->b;
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 80079ce:	fa1f f38e 	uxth.w	r3, lr
 80079d2:	f248 0201 	movw	r2, #32769	; 0x8001
 80079d6:	e031      	b.n	8007a3c <R3_1_GetPhaseCurrents+0xd0>
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 80079d8:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 80079da:	1ae4      	subs	r4, r4, r3
      if ( wAux < -INT16_MAX )
 80079dc:	4b46      	ldr	r3, [pc, #280]	; (8007af8 <R3_1_GetPhaseCurrents+0x18c>)
 80079de:	429c      	cmp	r4, r3
 80079e0:	db3b      	blt.n	8007a5a <R3_1_GetPhaseCurrents+0xee>
      else  if ( wAux > INT16_MAX )
 80079e2:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80079e6:	db6f      	blt.n	8007ac8 <R3_1_GetPhaseCurrents+0x15c>
        pStator_Currents->a = INT16_MAX;
 80079e8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80079ec:	4613      	mov	r3, r2
 80079ee:	800a      	strh	r2, [r1, #0]
 80079f0:	4614      	mov	r4, r2
 80079f2:	4696      	mov	lr, r2
      wAux = -wAux -  ( int32_t )pStator_Currents->a;
 80079f4:	6e42      	ldr	r2, [r0, #100]	; 0x64
 80079f6:	ebac 0202 	sub.w	r2, ip, r2
 80079fa:	1b12      	subs	r2, r2, r4
      if ( wAux > INT16_MAX )
 80079fc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8007a00:	db4d      	blt.n	8007a9e <R3_1_GetPhaseCurrents+0x132>
        pStator_Currents->b = INT16_MAX;
 8007a02:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007a06:	804a      	strh	r2, [r1, #2]
 8007a08:	4615      	mov	r5, r2
 8007a0a:	e017      	b.n	8007a3c <R3_1_GetPhaseCurrents+0xd0>
      wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg1 );
 8007a0c:	6e04      	ldr	r4, [r0, #96]	; 0x60
      if ( wAux < -INT16_MAX )
 8007a0e:	4a3a      	ldr	r2, [pc, #232]	; (8007af8 <R3_1_GetPhaseCurrents+0x18c>)
      wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg1 );
 8007a10:	1ae3      	subs	r3, r4, r3
      if ( wAux < -INT16_MAX )
 8007a12:	4293      	cmp	r3, r2
 8007a14:	db1b      	blt.n	8007a4e <R3_1_GetPhaseCurrents+0xe2>
      else  if ( wAux > INT16_MAX )
 8007a16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a1a:	db47      	blt.n	8007aac <R3_1_GetPhaseCurrents+0x140>
        pStator_Currents->b = INT16_MAX;
 8007a1c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8007a20:	461a      	mov	r2, r3
 8007a22:	804b      	strh	r3, [r1, #2]
 8007a24:	461d      	mov	r5, r3
      wAux = -wAux - ( int32_t )pStator_Currents->b;
 8007a26:	6e44      	ldr	r4, [r0, #100]	; 0x64
 8007a28:	ebac 0404 	sub.w	r4, ip, r4
 8007a2c:	1ae3      	subs	r3, r4, r3
      if ( wAux > INT16_MAX )
 8007a2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a32:	db2c      	blt.n	8007a8e <R3_1_GetPhaseCurrents+0x122>
        pStator_Currents->a = INT16_MAX;
 8007a34:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8007a38:	800b      	strh	r3, [r1, #0]
 8007a3a:	469e      	mov	lr, r3
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8007a3c:	4413      	add	r3, r2
 8007a3e:	425b      	negs	r3, r3
  pHandle->_Super.Ia = pStator_Currents->a;
 8007a40:	f8a0 e048 	strh.w	lr, [r0, #72]	; 0x48
  pHandle->_Super.Ib = pStator_Currents->b;
 8007a44:	f8a0 504a 	strh.w	r5, [r0, #74]	; 0x4a
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8007a48:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
}
 8007a4c:	bd30      	pop	{r4, r5, pc}
        pStator_Currents->b = -INT16_MAX;
 8007a4e:	4613      	mov	r3, r2
 8007a50:	804a      	strh	r2, [r1, #2]
 8007a52:	461d      	mov	r5, r3
 8007a54:	f248 0201 	movw	r2, #32769	; 0x8001
 8007a58:	e7e5      	b.n	8007a26 <R3_1_GetPhaseCurrents+0xba>
        pStator_Currents->a = -INT16_MAX;
 8007a5a:	461c      	mov	r4, r3
 8007a5c:	800b      	strh	r3, [r1, #0]
 8007a5e:	46a6      	mov	lr, r4
 8007a60:	f248 0301 	movw	r3, #32769	; 0x8001
 8007a64:	e7c6      	b.n	80079f4 <R3_1_GetPhaseCurrents+0x88>
        pStator_Currents->a = -INT16_MAX;
 8007a66:	800a      	strh	r2, [r1, #0]
        wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 8007a68:	6e02      	ldr	r2, [r0, #96]	; 0x60
      if ( wAux < -INT16_MAX )
 8007a6a:	4d23      	ldr	r5, [pc, #140]	; (8007af8 <R3_1_GetPhaseCurrents+0x18c>)
        wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 8007a6c:	eba2 0c0c 	sub.w	ip, r2, ip
      if ( wAux < -INT16_MAX )
 8007a70:	45ac      	cmp	ip, r5
 8007a72:	dba9      	blt.n	80079c8 <R3_1_GetPhaseCurrents+0x5c>
      else  if ( wAux > INT16_MAX )
 8007a74:	f5bc 4f00 	cmp.w	ip, #32768	; 0x8000
 8007a78:	db1c      	blt.n	8007ab4 <R3_1_GetPhaseCurrents+0x148>
        pStator_Currents->b = INT16_MAX;
 8007a7a:	f647 73ff 	movw	r3, #32767	; 0x7fff
  pHandle->_Super.Ia = pStator_Currents->a;
 8007a7e:	f9b1 e000 	ldrsh.w	lr, [r1]
        pStator_Currents->b = INT16_MAX;
 8007a82:	804b      	strh	r3, [r1, #2]
 8007a84:	461a      	mov	r2, r3
 8007a86:	4615      	mov	r5, r2
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8007a88:	fa1f f38e 	uxth.w	r3, lr
 8007a8c:	e7d6      	b.n	8007a3c <R3_1_GetPhaseCurrents+0xd0>
      else  if ( wAux < -INT16_MAX )
 8007a8e:	4c1a      	ldr	r4, [pc, #104]	; (8007af8 <R3_1_GetPhaseCurrents+0x18c>)
 8007a90:	42a3      	cmp	r3, r4
 8007a92:	da1f      	bge.n	8007ad4 <R3_1_GetPhaseCurrents+0x168>
        pStator_Currents->a = -INT16_MAX;
 8007a94:	800c      	strh	r4, [r1, #0]
 8007a96:	f248 0301 	movw	r3, #32769	; 0x8001
 8007a9a:	46a6      	mov	lr, r4
 8007a9c:	e7ce      	b.n	8007a3c <R3_1_GetPhaseCurrents+0xd0>
      else  if ( wAux < -INT16_MAX )
 8007a9e:	4d16      	ldr	r5, [pc, #88]	; (8007af8 <R3_1_GetPhaseCurrents+0x18c>)
 8007aa0:	42aa      	cmp	r2, r5
 8007aa2:	da1d      	bge.n	8007ae0 <R3_1_GetPhaseCurrents+0x174>
        pStator_Currents->b = -INT16_MAX;
 8007aa4:	804d      	strh	r5, [r1, #2]
 8007aa6:	f248 0201 	movw	r2, #32769	; 0x8001
 8007aaa:	e7c7      	b.n	8007a3c <R3_1_GetPhaseCurrents+0xd0>
        pStator_Currents->b = ( int16_t )wAux;
 8007aac:	b21d      	sxth	r5, r3
 8007aae:	804d      	strh	r5, [r1, #2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8007ab0:	b29a      	uxth	r2, r3
 8007ab2:	e7b8      	b.n	8007a26 <R3_1_GetPhaseCurrents+0xba>
  pHandle->_Super.Ia = pStator_Currents->a;
 8007ab4:	f9b1 e000 	ldrsh.w	lr, [r1]
        pStator_Currents->b = ( int16_t )wAux;
 8007ab8:	fa0f f58c 	sxth.w	r5, ip
 8007abc:	804d      	strh	r5, [r1, #2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8007abe:	fa1f f38e 	uxth.w	r3, lr
 8007ac2:	fa1f f28c 	uxth.w	r2, ip
 8007ac6:	e7b9      	b.n	8007a3c <R3_1_GetPhaseCurrents+0xd0>
        pStator_Currents->a = ( int16_t )wAux;
 8007ac8:	fa0f fe84 	sxth.w	lr, r4
 8007acc:	f8a1 e000 	strh.w	lr, [r1]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8007ad0:	b2a3      	uxth	r3, r4
 8007ad2:	e78f      	b.n	80079f4 <R3_1_GetPhaseCurrents+0x88>
        pStator_Currents->a = ( int16_t )wAux;
 8007ad4:	fa0f fe83 	sxth.w	lr, r3
 8007ad8:	f8a1 e000 	strh.w	lr, [r1]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	e7ad      	b.n	8007a3c <R3_1_GetPhaseCurrents+0xd0>
        pStator_Currents->b = ( int16_t )wAux;
 8007ae0:	b215      	sxth	r5, r2
 8007ae2:	804d      	strh	r5, [r1, #2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8007ae4:	b292      	uxth	r2, r2
 8007ae6:	e7a9      	b.n	8007a3c <R3_1_GetPhaseCurrents+0xd0>
  pHandle->_Super.Ia = pStator_Currents->a;
 8007ae8:	f9b1 e000 	ldrsh.w	lr, [r1]
  pHandle->_Super.Ib = pStator_Currents->b;
 8007aec:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8007af0:	880b      	ldrh	r3, [r1, #0]
 8007af2:	884a      	ldrh	r2, [r1, #2]
 8007af4:	e7a2      	b.n	8007a3c <R3_1_GetPhaseCurrents+0xd0>
 8007af6:	bf00      	nop
 8007af8:	ffff8001 	.word	0xffff8001

08007afc <R3_1_HFCurrentsCalibrationAB>:
 * @retval It always returns {0,0} in ab_t format
 */
void R3_1_HFCurrentsCalibrationAB(PWMC_Handle_t *pHdl,ab_t* pStator_Currents)
{  
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007afc:	6f83      	ldr	r3, [r0, #120]	; 0x78
{  
 8007afe:	b410      	push	{r4}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007b00:	685c      	ldr	r4, [r3, #4]
 8007b02:	6a22      	ldr	r2, [r4, #32]
 8007b04:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007b08:	6222      	str	r2, [r4, #32]
  
  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 8007b0a:	f890 2073 	ldrb.w	r2, [r0, #115]	; 0x73
 8007b0e:	2a0f      	cmp	r2, #15
 8007b10:	d813      	bhi.n	8007b3a <R3_1_HFCurrentsCalibrationAB+0x3e>
  {
    pHandle->PhaseAOffset += *pHandle->pParams_str->ADCDataReg1[pHandle->CalibSector];
 8007b12:	f890 4072 	ldrb.w	r4, [r0, #114]	; 0x72
 8007b16:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8007b18:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007b1c:	6b9c      	ldr	r4, [r3, #56]	; 0x38
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 8007b1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    pHandle->PhaseAOffset += *pHandle->pParams_str->ADCDataReg1[pHandle->CalibSector];
 8007b20:	6824      	ldr	r4, [r4, #0]
 8007b22:	4422      	add	r2, r4
 8007b24:	65c2      	str	r2, [r0, #92]	; 0x5c
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 8007b26:	681c      	ldr	r4, [r3, #0]
    pHandle->PolarizationCounter++;
 8007b28:	f890 3073 	ldrb.w	r3, [r0, #115]	; 0x73
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 8007b2c:	6e02      	ldr	r2, [r0, #96]	; 0x60
    pHandle->PolarizationCounter++;
 8007b2e:	3301      	adds	r3, #1
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 8007b30:	4422      	add	r2, r4
    pHandle->PolarizationCounter++;
 8007b32:	b2db      	uxtb	r3, r3
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 8007b34:	6602      	str	r2, [r0, #96]	; 0x60
    pHandle->PolarizationCounter++;
 8007b36:	f880 3073 	strb.w	r3, [r0, #115]	; 0x73
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 8007b3a:	2300      	movs	r3, #0
  pStator_Currents->b = 0;
}
 8007b3c:	f85d 4b04 	ldr.w	r4, [sp], #4
  pStator_Currents->a = 0;
 8007b40:	600b      	str	r3, [r1, #0]
}
 8007b42:	4770      	bx	lr

08007b44 <R3_1_HFCurrentsCalibrationC>:
  *         the offset computation.
  * @param pHdl: handler of the current instance of the PWM component
  * @retval It always returns {0,0} in ab_t format
  */
__weak void R3_1_HFCurrentsCalibrationC(PWMC_Handle_t *pHdl, ab_t* pStator_Currents)
{
 8007b44:	b410      	push	{r4}
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007b46:	6f84      	ldr	r4, [r0, #120]	; 0x78
 8007b48:	6862      	ldr	r2, [r4, #4]
 8007b4a:	6a13      	ldr	r3, [r2, #32]
 8007b4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b50:	6213      	str	r3, [r2, #32]

  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 8007b52:	f890 3073 	ldrb.w	r3, [r0, #115]	; 0x73
 8007b56:	2b0f      	cmp	r3, #15
 8007b58:	d80e      	bhi.n	8007b78 <R3_1_HFCurrentsCalibrationC+0x34>
  {
    pHandle->PhaseCOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 8007b5a:	f890 2072 	ldrb.w	r2, [r0, #114]	; 0x72
 8007b5e:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8007b60:	3214      	adds	r2, #20
 8007b62:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007b66:	6812      	ldr	r2, [r2, #0]
 8007b68:	441a      	add	r2, r3
    pHandle->PolarizationCounter++;
 8007b6a:	f890 3073 	ldrb.w	r3, [r0, #115]	; 0x73
    pHandle->PhaseCOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 8007b6e:	6642      	str	r2, [r0, #100]	; 0x64
    pHandle->PolarizationCounter++;
 8007b70:	3301      	adds	r3, #1
 8007b72:	b2db      	uxtb	r3, r3
 8007b74:	f880 3073 	strb.w	r3, [r0, #115]	; 0x73
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 8007b78:	2300      	movs	r3, #0
  pStator_Currents->b = 0;
}
 8007b7a:	f85d 4b04 	ldr.w	r4, [sp], #4
  pStator_Currents->a = 0;
 8007b7e:	600b      	str	r3, [r1, #0]
}
 8007b80:	4770      	bx	lr
 8007b82:	bf00      	nop

08007b84 <R3_1_TurnOnLowSides>:
  * @retval none
  */
__weak void R3_1_TurnOnLowSides(PWMC_Handle_t *pHdl)
{
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8007b84:	6f81      	ldr	r1, [r0, #120]	; 0x78

  pHandle->_Super.TurnOnLowSidesAction = true;
 8007b86:	f04f 0c01 	mov.w	ip, #1
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8007b8a:	684a      	ldr	r2, [r1, #4]
  pHandle->_Super.TurnOnLowSidesAction = true;
 8007b8c:	f880 c042 	strb.w	ip, [r0, #66]	; 0x42
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007b90:	2300      	movs	r3, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007b92:	f06f 0001 	mvn.w	r0, #1
 8007b96:	6110      	str	r0, [r2, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007b98:	6353      	str	r3, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007b9a:	6393      	str	r3, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007b9c:	63d3      	str	r3, [r2, #60]	; 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8007b9e:	6913      	ldr	r3, [r2, #16]
  LL_TIM_OC_SetCompareCH1( TIMx, 0 );
  LL_TIM_OC_SetCompareCH2( TIMx, 0 );
  LL_TIM_OC_SetCompareCH3( TIMx, 0 );

  /* Wait until next update */
  while (LL_TIM_IsActiveFlag_UPDATE(TIMx) == 0)
 8007ba0:	07db      	lsls	r3, r3, #31
 8007ba2:	d5fc      	bpl.n	8007b9e <R3_1_TurnOnLowSides+0x1a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007ba4:	f06f 0301 	mvn.w	r3, #1
 8007ba8:	6113      	str	r3, [r2, #16]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8007baa:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8007bac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bb0:	6453      	str	r3, [r2, #68]	; 0x44
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs(TIMx);
  
  if ((pHandle->pParams_str->LowSideOutputs)== ES_GPIO)
 8007bb2:	f891 306e 	ldrb.w	r3, [r1, #110]	; 0x6e
 8007bb6:	2b02      	cmp	r3, #2
 8007bb8:	d000      	beq.n	8007bbc <R3_1_TurnOnLowSides+0x38>
 8007bba:	4770      	bx	lr
{
 8007bbc:	b410      	push	{r4}
  {
    /* Enable signals activation */
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8007bbe:	e9d1 2002 	ldrd	r2, r0, [r1, #8]
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 8007bc2:	e9d1 3404 	ldrd	r3, r4, [r1, #16]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007bc6:	6194      	str	r4, [r2, #24]
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8007bc8:	e9d1 4206 	ldrd	r4, r2, [r1, #24]
 8007bcc:	6184      	str	r4, [r0, #24]
  }
  return; 
}
 8007bce:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007bd2:	619a      	str	r2, [r3, #24]
 8007bd4:	4770      	bx	lr
 8007bd6:	bf00      	nop

08007bd8 <R3_1_SwitchOnPWM>:
  * @param pHdl handler of the current instance of the PWM component
  */
__weak void R3_1_SwitchOnPWM(PWMC_Handle_t *pHdl)
{  
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8007bd8:	6f81      	ldr	r1, [r0, #120]	; 0x78

  pHandle->_Super.TurnOnLowSidesAction = false;
  
  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 8007bda:	f8b0 2070 	ldrh.w	r2, [r0, #112]	; 0x70
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8007bde:	684b      	ldr	r3, [r1, #4]
  pHandle->_Super.TurnOnLowSidesAction = false;
 8007be0:	f04f 0c00 	mov.w	ip, #0
{  
 8007be4:	b430      	push	{r4, r5}
  pHandle->_Super.TurnOnLowSidesAction = false;
 8007be6:	f880 c042 	strb.w	ip, [r0, #66]	; 0x42
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 8007bea:	0850      	lsrs	r0, r2, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007bec:	6358      	str	r0, [r3, #52]	; 0x34
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t)(pHandle->Half_PWMPeriod - 5u));
 8007bee:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007bf0:	6398      	str	r0, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007bf2:	63d8      	str	r0, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007bf4:	f06f 0001 	mvn.w	r0, #1
  WRITE_REG(TIMx->CCR4, CompareValue);
 8007bf8:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007bfa:	6118      	str	r0, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8007bfc:	691a      	ldr	r2, [r3, #16]

  /* wait for a new PWM period */
  LL_TIM_ClearFlag_UPDATE(TIMx);
  while (LL_TIM_IsActiveFlag_UPDATE(TIMx) == 0)
 8007bfe:	07d2      	lsls	r2, r2, #31
 8007c00:	d5fc      	bpl.n	8007bfc <R3_1_SwitchOnPWM+0x24>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007c02:	f06f 0201 	mvn.w	r2, #1
 8007c06:	611a      	str	r2, [r3, #16]
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE(TIMx);

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8007c08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c0a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007c0e:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8007c10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007c16:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8007c18:	f891 206e 	ldrb.w	r2, [r1, #110]	; 0x6e
 8007c1c:	2a02      	cmp	r2, #2
 8007c1e:	d008      	beq.n	8007c32 <R3_1_SwitchOnPWM+0x5a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007c20:	f06f 0201 	mvn.w	r2, #1
 8007c24:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8007c26:	68da      	ldr	r2, [r3, #12]
 8007c28:	f042 0201 	orr.w	r2, r2, #1
  LL_TIM_ClearFlag_UPDATE( TIMx );
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE( TIMx );

  return; 
}
 8007c2c:	bc30      	pop	{r4, r5}
 8007c2e:	60da      	str	r2, [r3, #12]
 8007c30:	4770      	bx	lr
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0u)
 8007c32:	6a18      	ldr	r0, [r3, #32]
 8007c34:	f240 5255 	movw	r2, #1365	; 0x555
 8007c38:	4210      	tst	r0, r2
 8007c3a:	d009      	beq.n	8007c50 <R3_1_SwitchOnPWM+0x78>
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8007c3c:	e9d1 4002 	ldrd	r4, r0, [r1, #8]
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 8007c40:	e9d1 2504 	ldrd	r2, r5, [r1, #16]
 8007c44:	61a5      	str	r5, [r4, #24]
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8007c46:	e9d1 4106 	ldrd	r4, r1, [r1, #24]
 8007c4a:	6184      	str	r4, [r0, #24]
 8007c4c:	6191      	str	r1, [r2, #24]
}
 8007c4e:	e7e7      	b.n	8007c20 <R3_1_SwitchOnPWM+0x48>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8007c50:	e9d1 4005 	ldrd	r4, r0, [r1, #20]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 8007c54:	688d      	ldr	r5, [r1, #8]
 8007c56:	69ca      	ldr	r2, [r1, #28]
 8007c58:	0424      	lsls	r4, r4, #16
 8007c5a:	61ac      	str	r4, [r5, #24]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8007c5c:	e9d1 5403 	ldrd	r5, r4, [r1, #12]
 8007c60:	0400      	lsls	r0, r0, #16
 8007c62:	0412      	lsls	r2, r2, #16
 8007c64:	61a8      	str	r0, [r5, #24]
 8007c66:	61a2      	str	r2, [r4, #24]
}
 8007c68:	e7da      	b.n	8007c20 <R3_1_SwitchOnPWM+0x48>
 8007c6a:	bf00      	nop

08007c6c <R3_1_SwitchOffPWM>:
  * @param pHdl handler of the current instance of the PWM component
  */
__weak void R3_1_SwitchOffPWM(PWMC_Handle_t *pHdl)
{
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8007c6c:	6f81      	ldr	r1, [r0, #120]	; 0x78
 8007c6e:	684a      	ldr	r2, [r1, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8007c70:	68d3      	ldr	r3, [r2, #12]
 8007c72:	f023 0301 	bic.w	r3, r3, #1
 8007c76:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8007c78:	6c53      	ldr	r3, [r2, #68]	; 0x44

  /* Disable UPDATE ISR */
  LL_TIM_DisableIT_UPDATE( TIMx );

  pHandle->_Super.TurnOnLowSidesAction = false;
 8007c7a:	f04f 0c00 	mov.w	ip, #0
 8007c7e:	f880 c042 	strb.w	ip, [r0, #66]	; 0x42

  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs(TIMx);
  if (pHandle->BrakeActionLock == true)
 8007c82:	f890 0076 	ldrb.w	r0, [r0, #118]	; 0x76
 8007c86:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007c8a:	6453      	str	r3, [r2, #68]	; 0x44
 8007c8c:	b918      	cbnz	r0, 8007c96 <R3_1_SwitchOffPWM+0x2a>
  {
  }
  else
  {
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8007c8e:	f891 306e 	ldrb.w	r3, [r1, #110]	; 0x6e
 8007c92:	2b02      	cmp	r3, #2
 8007c94:	d009      	beq.n	8007caa <R3_1_SwitchOffPWM+0x3e>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007c96:	f06f 0301 	mvn.w	r3, #1
 8007c9a:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8007c9c:	6913      	ldr	r3, [r2, #16]
    }
  }

  /* wait for a new PWM period to flush last HF task */
  LL_TIM_ClearFlag_UPDATE(TIMx);
  while (LL_TIM_IsActiveFlag_UPDATE(TIMx) == 0)
 8007c9e:	07db      	lsls	r3, r3, #31
 8007ca0:	d5fc      	bpl.n	8007c9c <R3_1_SwitchOffPWM+0x30>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007ca2:	f06f 0301 	mvn.w	r3, #1
 8007ca6:	6113      	str	r3, [r2, #16]
 8007ca8:	4770      	bx	lr
{
 8007caa:	b430      	push	{r4, r5}
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8007cac:	e9d1 4005 	ldrd	r4, r0, [r1, #20]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 8007cb0:	688d      	ldr	r5, [r1, #8]
 8007cb2:	69cb      	ldr	r3, [r1, #28]
 8007cb4:	0424      	lsls	r4, r4, #16
 8007cb6:	61ac      	str	r4, [r5, #24]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8007cb8:	e9d1 5403 	ldrd	r5, r4, [r1, #12]
 8007cbc:	041b      	lsls	r3, r3, #16
 8007cbe:	0400      	lsls	r0, r0, #16
 8007cc0:	61a8      	str	r0, [r5, #24]
 8007cc2:	61a3      	str	r3, [r4, #24]
 8007cc4:	f06f 0301 	mvn.w	r3, #1
 8007cc8:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8007cca:	6913      	ldr	r3, [r2, #16]
  while (LL_TIM_IsActiveFlag_UPDATE(TIMx) == 0)
 8007ccc:	07d9      	lsls	r1, r3, #31
 8007cce:	d5fc      	bpl.n	8007cca <R3_1_SwitchOffPWM+0x5e>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007cd0:	f06f 0301 	mvn.w	r3, #1
  {}
  LL_TIM_ClearFlag_UPDATE(TIMx);

  return;
}
 8007cd4:	bc30      	pop	{r4, r5}
 8007cd6:	6113      	str	r3, [r2, #16]
 8007cd8:	4770      	bx	lr
 8007cda:	bf00      	nop

08007cdc <R3_1_RLGetPhaseCurrents>:
  *         during RL detection phase
  * @param pHdl: handler of the current instance of the PWM component
  * @retval Ia and Ib current in ab_t format
  */
void R3_1_RLGetPhaseCurrents(PWMC_Handle_t *pHdl,ab_t* pStator_Currents)
{
 8007cdc:	b410      	push	{r4}

  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007cde:	6f84      	ldr	r4, [r0, #120]	; 0x78
 8007ce0:	6862      	ldr	r2, [r4, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 8007ce2:	6a13      	ldr	r3, [r2, #32]
 8007ce4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ce8:	6213      	str	r3, [r2, #32]
  int32_t wAux;
  
  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
  
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t)*pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]*2;
 8007cea:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
 8007cee:	6e03      	ldr	r3, [r0, #96]	; 0x60
  
  /* Check saturation */
  if (wAux > -INT16_MAX)
 8007cf0:	480d      	ldr	r0, [pc, #52]	; (8007d28 <R3_1_RLGetPhaseCurrents+0x4c>)
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t)*pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]*2;
 8007cf2:	3214      	adds	r2, #20
 8007cf4:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007cf8:	6812      	ldr	r2, [r2, #0]
 8007cfa:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
  if (wAux > -INT16_MAX)
 8007cfe:	4283      	cmp	r3, r0
 8007d00:	db05      	blt.n	8007d0e <R3_1_RLGetPhaseCurrents+0x32>
  {
    if (wAux < INT16_MAX)
 8007d02:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8007d06:	4293      	cmp	r3, r2
 8007d08:	dc0b      	bgt.n	8007d22 <R3_1_RLGetPhaseCurrents+0x46>
  else
  {
    wAux = -INT16_MAX;
  }
  /* First value read of Phase B*/
  pStator_Currents->a = ( int16_t )( wAux );
 8007d0a:	b21b      	sxth	r3, r3
 8007d0c:	e000      	b.n	8007d10 <R3_1_RLGetPhaseCurrents+0x34>
 8007d0e:	4b07      	ldr	r3, [pc, #28]	; (8007d2c <R3_1_RLGetPhaseCurrents+0x50>)
  pStator_Currents->b = ( int16_t )( wAux );

}
 8007d10:	f85d 4b04 	ldr.w	r4, [sp], #4
  pStator_Currents->a = ( int16_t )( wAux );
 8007d14:	2200      	movs	r2, #0
 8007d16:	f363 020f 	bfi	r2, r3, #0, #16
 8007d1a:	f363 421f 	bfi	r2, r3, #16, #16
 8007d1e:	600a      	str	r2, [r1, #0]
}
 8007d20:	4770      	bx	lr
 8007d22:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8007d26:	e7f3      	b.n	8007d10 <R3_1_RLGetPhaseCurrents+0x34>
 8007d28:	ffff8002 	.word	0xffff8002
 8007d2c:	ffff8001 	.word	0xffff8001

08007d30 <R3_1_RLTurnOnLowSides>:
  * @retval none
  */
void R3_1_RLTurnOnLowSides(PWMC_Handle_t *pHdl)
{  
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8007d30:	6f81      	ldr	r1, [r0, #120]	; 0x78
 8007d32:	684a      	ldr	r2, [r1, #4]
{  
 8007d34:	b410      	push	{r4}
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007d36:	f06f 0301 	mvn.w	r3, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007d3a:	2400      	movs	r4, #0
 8007d3c:	6354      	str	r4, [r2, #52]	; 0x34
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007d3e:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8007d40:	6913      	ldr	r3, [r2, #16]

  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Wait until next update */
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 8007d42:	07db      	lsls	r3, r3, #31
 8007d44:	d5fc      	bpl.n	8007d40 <R3_1_RLTurnOnLowSides+0x10>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007d46:	f06f 0301 	mvn.w	r3, #1
 8007d4a:	6113      	str	r3, [r2, #16]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8007d4c:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8007d4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d52:	6453      	str	r3, [r2, #68]	; 0x44
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs(TIMx);

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8007d54:	f891 306e 	ldrb.w	r3, [r1, #110]	; 0x6e
 8007d58:	2b02      	cmp	r3, #2
 8007d5a:	d10a      	bne.n	8007d72 <R3_1_RLTurnOnLowSides+0x42>
  {
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 8007d5c:	6888      	ldr	r0, [r1, #8]
 8007d5e:	694c      	ldr	r4, [r1, #20]
 8007d60:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007d64:	6184      	str	r4, [r0, #24]
    LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
    LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8007d66:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8007d6a:	0412      	lsls	r2, r2, #16
 8007d6c:	041b      	lsls	r3, r3, #16
 8007d6e:	6182      	str	r2, [r0, #24]
 8007d70:	618b      	str	r3, [r1, #24]
  }
  return; 
}
 8007d72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d76:	4770      	bx	lr

08007d78 <R3_1_RLSwitchOnPWM>:
  * @retval none
  */
void R3_1_RLSwitchOnPWM(PWMC_Handle_t *pHdl)
{
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8007d78:	6f81      	ldr	r1, [r0, #120]	; 0x78
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
  
  pHandle->_Super.TurnOnLowSidesAction = false;
 8007d7a:	2200      	movs	r2, #0
{
 8007d7c:	b430      	push	{r4, r5}
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 8007d7e:	e9d1 4300 	ldrd	r4, r3, [r1]
  pHandle->_Super.TurnOnLowSidesAction = false;
 8007d82:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  /* The following while cycles ensure the identification of the nergative counting mode of TIM1
   * for correct modification of Repetition Counter value of TIM1.*/

  /* Wait the change of Counter Direction of TIM1 from Down-Direction to Up-Direction*/

  while ( ( TIMx->CR1 & DIR_MASK ) == DIR_MASK )
 8007d86:	681a      	ldr	r2, [r3, #0]
 8007d88:	06d2      	lsls	r2, r2, #27
 8007d8a:	d4fc      	bmi.n	8007d86 <R3_1_RLSwitchOnPWM+0xe>
  {
  }
  /* Wait the change of Counter Direction of TIM1 from Up-Direction to Down-Direction*/
  while ( ( TIMx->CR1 & DIR_MASK ) == 0u )
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	06d5      	lsls	r5, r2, #27
 8007d90:	d5fc      	bpl.n	8007d8c <R3_1_RLSwitchOnPWM+0x14>
  /* Set channel 1 Compare/Capture register to 1 */
  LL_TIM_OC_SetCompareCH1(TIMx, 1u);

  /* Set channel 4 Compare/Capture register to trig ADC in the middle 
     of the PWM period */
  LL_TIM_OC_SetCompareCH4(TIMx,(( uint32_t )( pHandle->Half_PWMPeriod ) - 5u));
 8007d92:	f8b0 2070 	ldrh.w	r2, [r0, #112]	; 0x70
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007d96:	2001      	movs	r0, #1
 8007d98:	3a05      	subs	r2, #5
 8007d9a:	6358      	str	r0, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR4, CompareValue);
 8007d9c:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007d9e:	f06f 0201 	mvn.w	r2, #1
 8007da2:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8007da4:	691a      	ldr	r2, [r3, #16]
  

  LL_TIM_ClearFlag_UPDATE( TIMx ); /* Clear flag to wait next update */

  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 8007da6:	07d2      	lsls	r2, r2, #31
 8007da8:	d5fc      	bpl.n	8007da4 <R3_1_RLSwitchOnPWM+0x2c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007daa:	f06f 0201 	mvn.w	r2, #1
 8007dae:	611a      	str	r2, [r3, #16]
  {}
  LL_TIM_ClearFlag_UPDATE( TIMx );
  
  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8007db0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007db2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007db6:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8007db8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007dba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007dbe:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs(TIMx);

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8007dc0:	f891 206e 	ldrb.w	r2, [r1, #110]	; 0x6e
 8007dc4:	2a02      	cmp	r2, #2
 8007dc6:	d00b      	beq.n	8007de0 <R3_1_RLSwitchOnPWM+0x68>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007dc8:	f06f 0201 	mvn.w	r2, #1
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8007dcc:	f06f 0104 	mvn.w	r1, #4
 8007dd0:	6021      	str	r1, [r4, #0]
 8007dd2:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8007dd4:	68da      	ldr	r2, [r3, #12]
 8007dd6:	f042 0201 	orr.w	r2, r2, #1

  /* enable TIMx update interrupt*/
  LL_TIM_EnableIT_UPDATE( TIMx );

  return; 
}
 8007dda:	bc30      	pop	{r4, r5}
 8007ddc:	60da      	str	r2, [r3, #12]
 8007dde:	4770      	bx	lr
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0u)
 8007de0:	6a18      	ldr	r0, [r3, #32]
 8007de2:	f240 5255 	movw	r2, #1365	; 0x555
 8007de6:	4210      	tst	r0, r2
 8007de8:	d00a      	beq.n	8007e00 <R3_1_RLSwitchOnPWM+0x88>
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 8007dea:	688a      	ldr	r2, [r1, #8]
 8007dec:	6948      	ldr	r0, [r1, #20]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007dee:	6190      	str	r0, [r2, #24]
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8007df0:	68ca      	ldr	r2, [r1, #12]
 8007df2:	6988      	ldr	r0, [r1, #24]
 8007df4:	6190      	str	r0, [r2, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8007df6:	69ca      	ldr	r2, [r1, #28]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8007df8:	6909      	ldr	r1, [r1, #16]
 8007dfa:	0412      	lsls	r2, r2, #16
 8007dfc:	618a      	str	r2, [r1, #24]
}
 8007dfe:	e7e3      	b.n	8007dc8 <R3_1_RLSwitchOnPWM+0x50>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8007e00:	e9d1 0205 	ldrd	r0, r2, [r1, #20]
 8007e04:	688d      	ldr	r5, [r1, #8]
 8007e06:	0400      	lsls	r0, r0, #16
 8007e08:	61a8      	str	r0, [r5, #24]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8007e0a:	68c8      	ldr	r0, [r1, #12]
 8007e0c:	0412      	lsls	r2, r2, #16
 8007e0e:	6182      	str	r2, [r0, #24]
 8007e10:	69ca      	ldr	r2, [r1, #28]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8007e12:	6909      	ldr	r1, [r1, #16]
 8007e14:	0412      	lsls	r2, r2, #16
 8007e16:	618a      	str	r2, [r1, #24]
}
 8007e18:	e7d6      	b.n	8007dc8 <R3_1_RLSwitchOnPWM+0x50>
 8007e1a:	bf00      	nop

08007e1c <R3_1_Init>:
{
 8007e1c:	b430      	push	{r4, r5}
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8007e1e:	6f84      	ldr	r4, [r0, #120]	; 0x78
  ADC_TypeDef* ADCx  = pHandle->pParams_str->ADCx;
 8007e20:	6823      	ldr	r3, [r4, #0]
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8007e22:	6862      	ldr	r2, [r4, #4]
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8007e24:	6859      	ldr	r1, [r3, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8007e26:	f06f 0502 	mvn.w	r5, #2
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8007e2a:	f021 0120 	bic.w	r1, r1, #32
 8007e2e:	6059      	str	r1, [r3, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8007e30:	601d      	str	r5, [r3, #0]
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8007e32:	6859      	ldr	r1, [r3, #4]
 8007e34:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007e38:	6059      	str	r1, [r3, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8007e3a:	f06f 0104 	mvn.w	r1, #4
 8007e3e:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8007e40:	6811      	ldr	r1, [r2, #0]
 8007e42:	f021 0101 	bic.w	r1, r1, #1
 8007e46:	6011      	str	r1, [r2, #0]
    if ( TIMx == TIM1 )
 8007e48:	491a      	ldr	r1, [pc, #104]	; (8007eb4 <R3_1_Init+0x98>)
 8007e4a:	428a      	cmp	r2, r1
 8007e4c:	d02c      	beq.n	8007ea8 <R3_1_Init+0x8c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8007e4e:	f06f 0180 	mvn.w	r1, #128	; 0x80
 8007e52:	6111      	str	r1, [r2, #16]
    if ( ( pHandle->pParams_str->EmergencyStop ) != DISABLE )
 8007e54:	f894 106c 	ldrb.w	r1, [r4, #108]	; 0x6c
 8007e58:	b119      	cbz	r1, 8007e62 <R3_1_Init+0x46>
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 8007e5a:	68d1      	ldr	r1, [r2, #12]
 8007e5c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8007e60:	60d1      	str	r1, [r2, #12]
  SET_BIT(TIMx->CCER, Channels);
 8007e62:	6a11      	ldr	r1, [r2, #32]
 8007e64:	f441 61aa 	orr.w	r1, r1, #1360	; 0x550
 8007e68:	f041 0105 	orr.w	r1, r1, #5
 8007e6c:	6211      	str	r1, [r2, #32]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8007e6e:	689a      	ldr	r2, [r3, #8]
 8007e70:	f042 0201 	orr.w	r2, r2, #1
 8007e74:	609a      	str	r2, [r3, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8007e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8007e78:	f06f 0404 	mvn.w	r4, #4
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8007e7c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007e80:	62da      	str	r2, [r3, #44]	; 0x2c
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8007e82:	601c      	str	r4, [r3, #0]
  SET_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8007e84:	685a      	ldr	r2, [r3, #4]
 8007e86:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007e8a:	605a      	str	r2, [r3, #4]
  MODIFY_REG(ADCx->JSQR, ADC_JSQR_JL, SequencerNbRanks);
 8007e8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    pHandle->OverCurrentFlag = false;
 8007e8e:	2100      	movs	r1, #0
    pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 8007e90:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
 8007e94:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8007e98:	66c4      	str	r4, [r0, #108]	; 0x6c
 8007e9a:	639a      	str	r2, [r3, #56]	; 0x38
}
 8007e9c:	bc30      	pop	{r4, r5}
    pHandle->OverCurrentFlag = false;
 8007e9e:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
    pHandle->_Super.DTTest = 0u;
 8007ea2:	f8a0 104e 	strh.w	r1, [r0, #78]	; 0x4e
}
 8007ea6:	4770      	bx	lr
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 8007ea8:	4d03      	ldr	r5, [pc, #12]	; (8007eb8 <R3_1_Init+0x9c>)
 8007eaa:	68e9      	ldr	r1, [r5, #12]
 8007eac:	f041 0101 	orr.w	r1, r1, #1
 8007eb0:	60e9      	str	r1, [r5, #12]
}
 8007eb2:	e7cc      	b.n	8007e4e <R3_1_Init+0x32>
 8007eb4:	40010000 	.word	0x40010000
 8007eb8:	e0042000 	.word	0xe0042000

08007ebc <R3_1_CurrentReadingCalibration>:
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8007ebc:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 8007ebe:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8007ec0:	685d      	ldr	r5, [r3, #4]
  pHandle->PhaseAOffset = 0u;
 8007ec2:	2600      	movs	r6, #0
  pHandle->PolarizationCounter = 0u;
 8007ec4:	f880 6073 	strb.w	r6, [r0, #115]	; 0x73
  CLEAR_BIT(TIMx->CCER, Channels);
 8007ec8:	6a2b      	ldr	r3, [r5, #32]
  pHandle->PhaseAOffset = 0u;
 8007eca:	65c6      	str	r6, [r0, #92]	; 0x5c
 8007ecc:	f423 63aa 	bic.w	r3, r3, #1360	; 0x550
 8007ed0:	f023 0305 	bic.w	r3, r3, #5
  pHandle->PhaseCOffset = 0u;
 8007ed4:	e9c0 6618 	strd	r6, r6, [r0, #96]	; 0x60
 8007ed8:	622b      	str	r3, [r5, #32]
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsCalibrationAB;
 8007eda:	4b34      	ldr	r3, [pc, #208]	; (8007fac <R3_1_CurrentReadingCalibration+0xf0>)
 8007edc:	6043      	str	r3, [r0, #4]
{
 8007ede:	4604      	mov	r4, r0
  pHandle->CalibSector = SECTOR_5;
 8007ee0:	2704      	movs	r7, #4
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_1_SetADCSampPointCalibration;
 8007ee2:	4b33      	ldr	r3, [pc, #204]	; (8007fb0 <R3_1_CurrentReadingCalibration+0xf4>)
 8007ee4:	6183      	str	r3, [r0, #24]
{
 8007ee6:	b083      	sub	sp, #12
  pHandle->CalibSector = SECTOR_5;
 8007ee8:	f880 7072 	strb.w	r7, [r0, #114]	; 0x72
  pHandle->_Super.Sector = SECTOR_5; 
 8007eec:	f880 703a 	strb.w	r7, [r0, #58]	; 0x3a
  R3_1_SwitchOnPWM( &pHandle->_Super );
 8007ef0:	f7ff fe72 	bl	8007bd8 <R3_1_SwitchOnPWM>
  waitForPolarizationEnd( TIMx,
 8007ef4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8007ef6:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8007efa:	f893 206d 	ldrb.w	r2, [r3, #109]	; 0x6d
 8007efe:	4628      	mov	r0, r5
 8007f00:	f104 0373 	add.w	r3, r4, #115	; 0x73
 8007f04:	e9cd 1300 	strd	r1, r3, [sp]
 8007f08:	f7ff fba2 	bl	8007650 <waitForPolarizationEnd>
  R3_1_SwitchOffPWM( &pHandle->_Super );
 8007f0c:	4620      	mov	r0, r4
 8007f0e:	f7ff fead 	bl	8007c6c <R3_1_SwitchOffPWM>
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsCalibrationC;
 8007f12:	4a28      	ldr	r2, [pc, #160]	; (8007fb4 <R3_1_CurrentReadingCalibration+0xf8>)
 8007f14:	6062      	str	r2, [r4, #4]
  R3_1_SwitchOnPWM( &pHandle->_Super );
 8007f16:	4620      	mov	r0, r4
  pHandle->PolarizationCounter = 0u;
 8007f18:	f884 6073 	strb.w	r6, [r4, #115]	; 0x73
  pHandle->CalibSector = SECTOR_1;
 8007f1c:	f884 6072 	strb.w	r6, [r4, #114]	; 0x72
  pHandle->_Super.Sector = SECTOR_1; 
 8007f20:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
  R3_1_SwitchOnPWM( &pHandle->_Super );
 8007f24:	f7ff fe58 	bl	8007bd8 <R3_1_SwitchOnPWM>
  waitForPolarizationEnd( TIMx,
 8007f28:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8007f2a:	e9dd 1300 	ldrd	r1, r3, [sp]
 8007f2e:	f892 206d 	ldrb.w	r2, [r2, #109]	; 0x6d
 8007f32:	4628      	mov	r0, r5
 8007f34:	f7ff fb8c 	bl	8007650 <waitForPolarizationEnd>
  R3_1_SwitchOffPWM( &pHandle->_Super );
 8007f38:	4620      	mov	r0, r4
 8007f3a:	f7ff fe97 	bl	8007c6c <R3_1_SwitchOffPWM>
  pHandle->PhaseAOffset >>= 3;
 8007f3e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8007f40:	08db      	lsrs	r3, r3, #3
 8007f42:	65e3      	str	r3, [r4, #92]	; 0x5c
  pHandle->PhaseBOffset >>= 3;
 8007f44:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8007f46:	08db      	lsrs	r3, r3, #3
 8007f48:	6623      	str	r3, [r4, #96]	; 0x60
  pHandle->PhaseCOffset >>= 3;
 8007f4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f4c:	08db      	lsrs	r3, r3, #3
 8007f4e:	6663      	str	r3, [r4, #100]	; 0x64
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 8007f50:	4b19      	ldr	r3, [pc, #100]	; (8007fb8 <R3_1_CurrentReadingCalibration+0xfc>)
 8007f52:	6063      	str	r3, [r4, #4]
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_1_SetADCSampPointSectX;
 8007f54:	4b19      	ldr	r3, [pc, #100]	; (8007fbc <R3_1_CurrentReadingCalibration+0x100>)
 8007f56:	61a3      	str	r3, [r4, #24]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8007f58:	69ab      	ldr	r3, [r5, #24]
 8007f5a:	f023 0308 	bic.w	r3, r3, #8
 8007f5e:	61ab      	str	r3, [r5, #24]
 8007f60:	69ab      	ldr	r3, [r5, #24]
 8007f62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007f66:	61ab      	str	r3, [r5, #24]
 8007f68:	69eb      	ldr	r3, [r5, #28]
 8007f6a:	f023 0308 	bic.w	r3, r3, #8
 8007f6e:	61eb      	str	r3, [r5, #28]
  LL_TIM_OC_SetCompareCH1 (TIMx,pHandle->Half_PWMPeriod);
 8007f70:	f8b4 3070 	ldrh.w	r3, [r4, #112]	; 0x70
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007f74:	636b      	str	r3, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007f76:	63ab      	str	r3, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007f78:	63eb      	str	r3, [r5, #60]	; 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8007f7a:	69ab      	ldr	r3, [r5, #24]
 8007f7c:	f043 0308 	orr.w	r3, r3, #8
 8007f80:	61ab      	str	r3, [r5, #24]
 8007f82:	69ab      	ldr	r3, [r5, #24]
 8007f84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007f88:	61ab      	str	r3, [r5, #24]
 8007f8a:	69eb      	ldr	r3, [r5, #28]
 8007f8c:	f043 0308 	orr.w	r3, r3, #8
 8007f90:	61eb      	str	r3, [r5, #28]
  pHandle->_Super.Sector = SECTOR_5;
 8007f92:	f884 703a 	strb.w	r7, [r4, #58]	; 0x3a
  SET_BIT(TIMx->CCER, Channels);
 8007f96:	6a2b      	ldr	r3, [r5, #32]
 8007f98:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 8007f9c:	f043 0305 	orr.w	r3, r3, #5
 8007fa0:	622b      	str	r3, [r5, #32]
  pHandle->BrakeActionLock = false;
 8007fa2:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
}
 8007fa6:	b003      	add	sp, #12
 8007fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007faa:	bf00      	nop
 8007fac:	08007afd 	.word	0x08007afd
 8007fb0:	08007fed 	.word	0x08007fed
 8007fb4:	08007b45 	.word	0x08007b45
 8007fb8:	0800796d 	.word	0x0800796d
 8007fbc:	0800800d 	.word	0x0800800d

08007fc0 <R3_1_WriteTIMRegisters>:
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8007fc0:	6f83      	ldr	r3, [r0, #120]	; 0x78
  LL_TIM_OC_SetCompareCH2 (TIMx,pHandle->_Super.CntPhB);
 8007fc2:	8e82      	ldrh	r2, [r0, #52]	; 0x34
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8007fc4:	685b      	ldr	r3, [r3, #4]
  LL_TIM_OC_SetCompareCH3 (TIMx,pHandle->_Super.CntPhC);
 8007fc6:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
{
 8007fc8:	b410      	push	{r4}
  LL_TIM_OC_SetCompareCH1 (TIMx,pHandle->_Super.CntPhA);
 8007fca:	8e44      	ldrh	r4, [r0, #50]	; 0x32
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007fcc:	635c      	str	r4, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007fce:	639a      	str	r2, [r3, #56]	; 0x38
  if ( pHandle->_Super.SWerror == 1u )
 8007fd0:	8f02      	ldrh	r2, [r0, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007fd2:	63d9      	str	r1, [r3, #60]	; 0x3c
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 8007fd4:	6a1b      	ldr	r3, [r3, #32]
}
 8007fd6:	f85d 4b04 	ldr.w	r4, [sp], #4
  if ( pHandle->_Super.SWerror == 1u )
 8007fda:	2a01      	cmp	r2, #1
    hAux = MC_FOC_DURATION;
 8007fdc:	bf12      	itee	ne
 8007fde:	f3c3 3200 	ubfxne	r2, r3, #12, #1
    pHandle->_Super.SWerror = 0u;
 8007fe2:	2300      	moveq	r3, #0
 8007fe4:	8703      	strheq	r3, [r0, #56]	; 0x38
}
 8007fe6:	4610      	mov	r0, r2
 8007fe8:	4770      	bx	lr
 8007fea:	bf00      	nop

08007fec <R3_1_SetADCSampPointCalibration>:
{
 8007fec:	b510      	push	{r4, lr}
  return R3_1_WriteTIMRegisters(&pHandle->_Super, (uint16_t)(pHandle->Half_PWMPeriod) - 1u);
 8007fee:	f8b0 1070 	ldrh.w	r1, [r0, #112]	; 0x70
  pHandle->_Super.Sector = pHandle->CalibSector;
 8007ff2:	f890 2072 	ldrb.w	r2, [r0, #114]	; 0x72
 8007ff6:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 8007ffa:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
  return R3_1_WriteTIMRegisters(&pHandle->_Super, (uint16_t)(pHandle->Half_PWMPeriod) - 1u);
 8007ffe:	3901      	subs	r1, #1
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 8008000:	66c4      	str	r4, [r0, #108]	; 0x6c
  return R3_1_WriteTIMRegisters(&pHandle->_Super, (uint16_t)(pHandle->Half_PWMPeriod) - 1u);
 8008002:	b289      	uxth	r1, r1
 8008004:	f7ff ffdc 	bl	8007fc0 <R3_1_WriteTIMRegisters>
}
 8008008:	bd10      	pop	{r4, pc}
 800800a:	bf00      	nop

0800800c <R3_1_SetADCSampPointSectX>:
{
 800800c:	b510      	push	{r4, lr}
  register uint16_t lowDuty = pHdl->lowDuty;
 800800e:	8f81      	ldrh	r1, [r0, #60]	; 0x3c
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) > pHandle->pParams_str->hTafter )
 8008010:	f8b0 e070 	ldrh.w	lr, [r0, #112]	; 0x70
 8008014:	6f84      	ldr	r4, [r0, #120]	; 0x78
 8008016:	ebae 0201 	sub.w	r2, lr, r1
 800801a:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 800801e:	b292      	uxth	r2, r2
 8008020:	429a      	cmp	r2, r3
 8008022:	d908      	bls.n	8008036 <R3_1_SetADCSampPointSectX+0x2a>
    pHandle->_Super.Sector = SECTOR_5;
 8008024:	2304      	movs	r3, #4
    hCntSmp = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 8008026:	f10e 31ff 	add.w	r1, lr, #4294967295
    pHandle->_Super.Sector = SECTOR_5;
 800802a:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    hCntSmp = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 800802e:	b289      	uxth	r1, r1
  return R3_1_WriteTIMRegisters( &pHandle->_Super, hCntSmp);
 8008030:	f7ff ffc6 	bl	8007fc0 <R3_1_WriteTIMRegisters>
}
 8008034:	bd10      	pop	{r4, pc}
    hDeltaDuty = ( uint16_t )( lowDuty - midDuty );
 8008036:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 800803a:	eba1 0c0c 	sub.w	ip, r1, ip
    if ( hDeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) * 2u )
 800803e:	fa1f fc8c 	uxth.w	ip, ip
 8008042:	ebbc 0f42 	cmp.w	ip, r2, lsl #1
 8008046:	d906      	bls.n	8008056 <R3_1_SetADCSampPointSectX+0x4a>
      hCntSmp = lowDuty - pHandle->pParams_str->hTbefore;
 8008048:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800804c:	1ac9      	subs	r1, r1, r3
 800804e:	b289      	uxth	r1, r1
  return R3_1_WriteTIMRegisters( &pHandle->_Super, hCntSmp);
 8008050:	f7ff ffb6 	bl	8007fc0 <R3_1_WriteTIMRegisters>
}
 8008054:	bd10      	pop	{r4, pc}
      hCntSmp = lowDuty + pHandle->pParams_str->hTafter;
 8008056:	440b      	add	r3, r1
 8008058:	b299      	uxth	r1, r3
      if ( hCntSmp >= pHandle->Half_PWMPeriod )
 800805a:	458e      	cmp	lr, r1
 800805c:	d8e8      	bhi.n	8008030 <R3_1_SetADCSampPointSectX+0x24>
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 800805e:	43c9      	mvns	r1, r1
        pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_FALLING;
 8008060:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 8008064:	eb01 014e 	add.w	r1, r1, lr, lsl #1
        pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_FALLING;
 8008068:	66c3      	str	r3, [r0, #108]	; 0x6c
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 800806a:	b289      	uxth	r1, r1
  return R3_1_WriteTIMRegisters( &pHandle->_Super, hCntSmp);
 800806c:	f7ff ffa8 	bl	8007fc0 <R3_1_WriteTIMRegisters>
}
 8008070:	bd10      	pop	{r4, pc}
 8008072:	bf00      	nop

08008074 <R3_1_TIMx_UP_IRQHandler>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008074:	6f81      	ldr	r1, [r0, #120]	; 0x78
{
 8008076:	b430      	push	{r4, r5}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008078:	e9d1 2400 	ldrd	r2, r4, [r1]
{
 800807c:	4603      	mov	r3, r0
  CLEAR_BIT(ADCx->CR2, ADC_CR2_JEXTEN);
 800807e:	6890      	ldr	r0, [r2, #8]
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 8008080:	6edd      	ldr	r5, [r3, #108]	; 0x6c
  CLEAR_BIT(ADCx->CR2, ADC_CR2_JEXTEN);
 8008082:	f420 1040 	bic.w	r0, r0, #3145728	; 0x300000
 8008086:	6090      	str	r0, [r2, #8]
  ADCx->JSQR = pHandle->pParams_str->ADCConfig[pHandle->_Super.Sector];
 8008088:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
 800808c:	3008      	adds	r0, #8
 800808e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8008092:	6391      	str	r1, [r2, #56]	; 0x38
  SET_BIT(TIMx->CCER, Channels);
 8008094:	6a20      	ldr	r0, [r4, #32]
 8008096:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 800809a:	6220      	str	r0, [r4, #32]
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 800809c:	6891      	ldr	r1, [r2, #8]
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 800809e:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
 80080a2:	4329      	orrs	r1, r5
 80080a4:	6091      	str	r1, [r2, #8]
}
 80080a6:	f103 0046 	add.w	r0, r3, #70	; 0x46
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 80080aa:	66dc      	str	r4, [r3, #108]	; 0x6c
}
 80080ac:	bc30      	pop	{r4, r5}
 80080ae:	4770      	bx	lr

080080b0 <R3_1_BRK_IRQHandler>:
  if ( pHandle->BrakeActionLock == false )
 80080b0:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
 80080b4:	b923      	cbnz	r3, 80080c0 <R3_1_BRK_IRQHandler+0x10>
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80080b6:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80080b8:	f893 206e 	ldrb.w	r2, [r3, #110]	; 0x6e
 80080bc:	2a02      	cmp	r2, #2
 80080be:	d004      	beq.n	80080ca <R3_1_BRK_IRQHandler+0x1a>
  pHandle->OverCurrentFlag = true;
 80080c0:	2301      	movs	r3, #1
 80080c2:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
}
 80080c6:	3046      	adds	r0, #70	; 0x46
 80080c8:	4770      	bx	lr
{
 80080ca:	b430      	push	{r4, r5}
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80080cc:	e9d3 4105 	ldrd	r4, r1, [r3, #20]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80080d0:	689d      	ldr	r5, [r3, #8]
 80080d2:	69da      	ldr	r2, [r3, #28]
 80080d4:	0424      	lsls	r4, r4, #16
 80080d6:	61ac      	str	r4, [r5, #24]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80080d8:	e9d3 5403 	ldrd	r5, r4, [r3, #12]
 80080dc:	0409      	lsls	r1, r1, #16
 80080de:	0412      	lsls	r2, r2, #16
  pHandle->OverCurrentFlag = true;
 80080e0:	2301      	movs	r3, #1
 80080e2:	61a9      	str	r1, [r5, #24]
}
 80080e4:	3046      	adds	r0, #70	; 0x46
 80080e6:	61a2      	str	r2, [r4, #24]
  pHandle->OverCurrentFlag = true;
 80080e8:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
}
 80080ec:	bc30      	pop	{r4, r5}
 80080ee:	4770      	bx	lr

080080f0 <R3_1_IsOverCurrentOccurred>:
  if (pHandle->OverCurrentFlag == true )
 80080f0:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 80080f4:	b90b      	cbnz	r3, 80080fa <R3_1_IsOverCurrentOccurred+0xa>
  uint16_t retVal = MC_NO_FAULTS;
 80080f6:	4618      	mov	r0, r3
}
 80080f8:	4770      	bx	lr
    pHandle->OverCurrentFlag = false;
 80080fa:	2300      	movs	r3, #0
 80080fc:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    retVal |= MC_BREAK_IN;
 8008100:	2040      	movs	r0, #64	; 0x40
 8008102:	4770      	bx	lr

08008104 <R3_1_RLDetectionModeEnable>:
  if (pHandle->_Super.RLDetectionMode == false)
 8008104:	f890 1047 	ldrb.w	r1, [r0, #71]	; 0x47
{
 8008108:	b430      	push	{r4, r5}
  if (pHandle->_Super.RLDetectionMode == false)
 800810a:	2900      	cmp	r1, #0
 800810c:	d134      	bne.n	8008178 <R3_1_RLDetectionModeEnable+0x74>
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 800810e:	6f85      	ldr	r5, [r0, #120]	; 0x78
 8008110:	686b      	ldr	r3, [r5, #4]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8008112:	699a      	ldr	r2, [r3, #24]
 8008114:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8008118:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800811c:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800811e:	6a1a      	ldr	r2, [r3, #32]
 8008120:	f042 0201 	orr.w	r2, r2, #1
 8008124:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8008126:	6a1a      	ldr	r2, [r3, #32]
 8008128:	f022 0204 	bic.w	r2, r2, #4
 800812c:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800812e:	6359      	str	r1, [r3, #52]	; 0x34
    if ((pHandle->pParams_str->LowSideOutputs)== LS_PWM_TIMER)
 8008130:	f895 206e 	ldrb.w	r2, [r5, #110]	; 0x6e
 8008134:	2a01      	cmp	r2, #1
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8008136:	f103 0418 	add.w	r4, r3, #24
 800813a:	d02a      	beq.n	8008192 <R3_1_RLDetectionModeEnable+0x8e>
    else if ((pHandle->pParams_str->LowSideOutputs)== ES_GPIO)
 800813c:	2a02      	cmp	r2, #2
 800813e:	d10d      	bne.n	800815c <R3_1_RLDetectionModeEnable+0x58>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8008140:	699a      	ldr	r2, [r3, #24]
 8008142:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8008146:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800814a:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800814c:	6a1a      	ldr	r2, [r3, #32]
 800814e:	f042 0210 	orr.w	r2, r2, #16
 8008152:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8008154:	6a1a      	ldr	r2, [r3, #32]
 8008156:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800815a:	621a      	str	r2, [r3, #32]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800815c:	6862      	ldr	r2, [r4, #4]
 800815e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8008162:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 8008166:	6062      	str	r2, [r4, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 8008168:	6a1a      	ldr	r2, [r3, #32]
 800816a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800816e:	621a      	str	r2, [r3, #32]
 8008170:	6a1a      	ldr	r2, [r3, #32]
 8008172:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008176:	621a      	str	r2, [r3, #32]
  pHandle->_Super.pFctTurnOnLowSides = &R3_1_RLTurnOnLowSides;
 8008178:	4b0d      	ldr	r3, [pc, #52]	; (80081b0 <R3_1_RLDetectionModeEnable+0xac>)
  pHandle->_Super.pFctSwitchOnPwm = &R3_1_RLSwitchOnPWM;
 800817a:	490e      	ldr	r1, [pc, #56]	; (80081b4 <R3_1_RLDetectionModeEnable+0xb0>)
  pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 800817c:	4a0e      	ldr	r2, [pc, #56]	; (80081b8 <R3_1_RLDetectionModeEnable+0xb4>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_RLGetPhaseCurrents;
 800817e:	4c0f      	ldr	r4, [pc, #60]	; (80081bc <R3_1_RLDetectionModeEnable+0xb8>)
  pHandle->_Super.pFctTurnOnLowSides = &R3_1_RLTurnOnLowSides;
 8008180:	6143      	str	r3, [r0, #20]
  pHandle->_Super.RLDetectionMode = true;
 8008182:	2301      	movs	r3, #1
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_RLGetPhaseCurrents;
 8008184:	6044      	str	r4, [r0, #4]
  pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 8008186:	e9c0 2102 	strd	r2, r1, [r0, #8]
}
 800818a:	bc30      	pop	{r4, r5}
  pHandle->_Super.RLDetectionMode = true;
 800818c:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
}
 8008190:	4770      	bx	lr
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8008192:	699a      	ldr	r2, [r3, #24]
 8008194:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8008198:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800819c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(TIMx->CCER, Channels);
 800819e:	6a1a      	ldr	r2, [r3, #32]
 80081a0:	f022 0210 	bic.w	r2, r2, #16
 80081a4:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 80081a6:	6a1a      	ldr	r2, [r3, #32]
 80081a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80081ac:	621a      	str	r2, [r3, #32]
}
 80081ae:	e7d5      	b.n	800815c <R3_1_RLDetectionModeEnable+0x58>
 80081b0:	08007d31 	.word	0x08007d31
 80081b4:	08007d79 	.word	0x08007d79
 80081b8:	08007c6d 	.word	0x08007c6d
 80081bc:	08007cdd 	.word	0x08007cdd

080081c0 <R3_1_RLDetectionModeDisable>:
  if (pHandle->_Super.RLDetectionMode == true)
 80081c0:	f890 3047 	ldrb.w	r3, [r0, #71]	; 0x47
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d048      	beq.n	800825a <R3_1_RLDetectionModeDisable+0x9a>
{
 80081c8:	b410      	push	{r4}
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80081ca:	6f81      	ldr	r1, [r0, #120]	; 0x78
 80081cc:	684b      	ldr	r3, [r1, #4]
    while ((TIMx->CR1 & DIR_MASK) == 0u)
 80081ce:	681a      	ldr	r2, [r3, #0]
 80081d0:	06d4      	lsls	r4, r2, #27
 80081d2:	d5fc      	bpl.n	80081ce <R3_1_RLDetectionModeDisable+0xe>
    while ((TIMx->CR1 & DIR_MASK) == DIR_MASK)
 80081d4:	681a      	ldr	r2, [r3, #0]
 80081d6:	06d2      	lsls	r2, r2, #27
 80081d8:	d4fc      	bmi.n	80081d4 <R3_1_RLDetectionModeDisable+0x14>
    TIMx->RCR = pHandle->pParams_str->RepetitionCounter;
 80081da:	f891 206d 	ldrb.w	r2, [r1, #109]	; 0x6d
 80081de:	631a      	str	r2, [r3, #48]	; 0x30
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80081e0:	699a      	ldr	r2, [r3, #24]
 80081e2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 80081e6:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80081ea:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 80081ec:	6a1a      	ldr	r2, [r3, #32]
 80081ee:	f042 0201 	orr.w	r2, r2, #1
 80081f2:	621a      	str	r2, [r3, #32]
    if ((pHandle->pParams_str-> LowSideOutputs)== LS_PWM_TIMER)
 80081f4:	f891 206e 	ldrb.w	r2, [r1, #110]	; 0x6e
 80081f8:	2a01      	cmp	r2, #1
 80081fa:	d02f      	beq.n	800825c <R3_1_RLDetectionModeDisable+0x9c>
    else if ((pHandle->pParams_str->LowSideOutputs)== ES_GPIO)
 80081fc:	2a02      	cmp	r2, #2
 80081fe:	d053      	beq.n	80082a8 <R3_1_RLDetectionModeDisable+0xe8>
    LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod) >> 1);
 8008200:	f8b0 2070 	ldrh.w	r2, [r0, #112]	; 0x70
 8008204:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008206:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8008208:	699c      	ldr	r4, [r3, #24]
 800820a:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 800820e:	f444 44c0 	orr.w	r4, r4, #24576	; 0x6000
 8008212:	619c      	str	r4, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8008214:	6a1c      	ldr	r4, [r3, #32]
 8008216:	f044 0410 	orr.w	r4, r4, #16
 800821a:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800821c:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800821e:	69dc      	ldr	r4, [r3, #28]
 8008220:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 8008224:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 8008228:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 800822a:	6a1c      	ldr	r4, [r3, #32]
 800822c:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8008230:	621c      	str	r4, [r3, #32]
    LL_ADC_INJ_SetSequencerDiscont(pHandle->pParams_str->ADCx,
 8008232:	6809      	ldr	r1, [r1, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8008234:	63da      	str	r2, [r3, #60]	; 0x3c
  MODIFY_REG(ADCx->CR1, ADC_CR1_JDISCEN, SeqDiscont);
 8008236:	684b      	ldr	r3, [r1, #4]
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 8008238:	4a2e      	ldr	r2, [pc, #184]	; (80082f4 <R3_1_RLDetectionModeDisable+0x134>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_1_TurnOnLowSides;
 800823a:	4c2f      	ldr	r4, [pc, #188]	; (80082f8 <R3_1_RLDetectionModeDisable+0x138>)
 800823c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008240:	604b      	str	r3, [r1, #4]
    pHandle->_Super.pFctSwitchOnPwm = &R3_1_SwitchOnPWM;
 8008242:	492e      	ldr	r1, [pc, #184]	; (80082fc <R3_1_RLDetectionModeDisable+0x13c>)
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 8008244:	6042      	str	r2, [r0, #4]
    pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 8008246:	4a2e      	ldr	r2, [pc, #184]	; (8008300 <R3_1_RLDetectionModeDisable+0x140>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_1_TurnOnLowSides;
 8008248:	6144      	str	r4, [r0, #20]
    pHandle->_Super.RLDetectionMode = false;
 800824a:	2300      	movs	r3, #0
    pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 800824c:	e9c0 2102 	strd	r2, r1, [r0, #8]
}
 8008250:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->_Super.RLDetectionMode = false;
 8008254:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
}
 8008258:	4770      	bx	lr
 800825a:	4770      	bx	lr
  SET_BIT(TIMx->CCER, Channels);
 800825c:	6a1c      	ldr	r4, [r3, #32]
    LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod) >> 1);
 800825e:	f8b0 2070 	ldrh.w	r2, [r0, #112]	; 0x70
 8008262:	f044 0404 	orr.w	r4, r4, #4
 8008266:	0852      	lsrs	r2, r2, #1
 8008268:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800826a:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800826c:	699c      	ldr	r4, [r3, #24]
 800826e:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 8008272:	f444 44c0 	orr.w	r4, r4, #24576	; 0x6000
 8008276:	619c      	str	r4, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8008278:	6a1c      	ldr	r4, [r3, #32]
 800827a:	f044 0410 	orr.w	r4, r4, #16
 800827e:	621c      	str	r4, [r3, #32]
 8008280:	6a1c      	ldr	r4, [r3, #32]
 8008282:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 8008286:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8008288:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800828a:	69dc      	ldr	r4, [r3, #28]
 800828c:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 8008290:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 8008294:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8008296:	6a1c      	ldr	r4, [r3, #32]
 8008298:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 800829c:	621c      	str	r4, [r3, #32]
 800829e:	6a1c      	ldr	r4, [r3, #32]
 80082a0:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 80082a4:	621c      	str	r4, [r3, #32]
}
 80082a6:	e7c4      	b.n	8008232 <R3_1_RLDetectionModeDisable+0x72>
  CLEAR_BIT(TIMx->CCER, Channels);
 80082a8:	6a1c      	ldr	r4, [r3, #32]
 80082aa:	f8b0 2070 	ldrh.w	r2, [r0, #112]	; 0x70
 80082ae:	f024 0404 	bic.w	r4, r4, #4
 80082b2:	0852      	lsrs	r2, r2, #1
 80082b4:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80082b6:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80082b8:	699c      	ldr	r4, [r3, #24]
 80082ba:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 80082be:	f444 44c0 	orr.w	r4, r4, #24576	; 0x6000
 80082c2:	619c      	str	r4, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 80082c4:	6a1c      	ldr	r4, [r3, #32]
 80082c6:	f044 0410 	orr.w	r4, r4, #16
 80082ca:	621c      	str	r4, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 80082cc:	6a1c      	ldr	r4, [r3, #32]
 80082ce:	f024 0440 	bic.w	r4, r4, #64	; 0x40
 80082d2:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80082d4:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80082d6:	69dc      	ldr	r4, [r3, #28]
 80082d8:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 80082dc:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 80082e0:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 80082e2:	6a1c      	ldr	r4, [r3, #32]
 80082e4:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 80082e8:	621c      	str	r4, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 80082ea:	6a1c      	ldr	r4, [r3, #32]
 80082ec:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 80082f0:	621c      	str	r4, [r3, #32]
}
 80082f2:	e79e      	b.n	8008232 <R3_1_RLDetectionModeDisable+0x72>
 80082f4:	0800796d 	.word	0x0800796d
 80082f8:	08007b85 	.word	0x08007b85
 80082fc:	08007bd9 	.word	0x08007bd9
 8008300:	08007c6d 	.word	0x08007c6d

08008304 <R3_1_RLDetectionModeSetDuty>:
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8008304:	f8b0 3070 	ldrh.w	r3, [r0, #112]	; 0x70
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008308:	6f82      	ldr	r2, [r0, #120]	; 0x78
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 800830a:	fb03 f101 	mul.w	r1, r3, r1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800830e:	6852      	ldr	r2, [r2, #4]
  if (pHandle->_Super.SWerror == 1u)
 8008310:	8f03      	ldrh	r3, [r0, #56]	; 0x38
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8008312:	0c09      	lsrs	r1, r1, #16
  pHandle->_Super.Sector = SECTOR_4;
 8008314:	f04f 0c03 	mov.w	ip, #3
 8008318:	f880 c03a 	strb.w	ip, [r0, #58]	; 0x3a
  pHandle->_Super.CntPhA = ( uint16_t )( val );
 800831c:	8641      	strh	r1, [r0, #50]	; 0x32
  WRITE_REG(TIMx->CCR1, CompareValue);
 800831e:	6351      	str	r1, [r2, #52]	; 0x34
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 8008320:	6a12      	ldr	r2, [r2, #32]
  if (pHandle->_Super.SWerror == 1u)
 8008322:	2b01      	cmp	r3, #1
    hAux = MC_FOC_DURATION;
 8008324:	bf12      	itee	ne
 8008326:	f3c2 3300 	ubfxne	r3, r2, #12, #1
    pHandle->_Super.SWerror = 0u;
 800832a:	2200      	moveq	r2, #0
 800832c:	8702      	strheq	r2, [r0, #56]	; 0x38
}
 800832e:	4618      	mov	r0, r3
 8008330:	4770      	bx	lr
 8008332:	bf00      	nop

08008334 <RVBS_Clear>:
__weak void RVBS_Clear( RDivider_Handle_t * pHandle )
{
  uint16_t aux;
  uint16_t index;

  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 8008334:	f8b0 c01a 	ldrh.w	ip, [r0, #26]
 8008338:	8b82      	ldrh	r2, [r0, #28]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 800833a:	8b03      	ldrh	r3, [r0, #24]
  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 800833c:	4494      	add	ip, r2
{
 800833e:	b410      	push	{r4}
  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 8008340:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8008344:	b14b      	cbz	r3, 800835a <RVBS_Clear+0x26>
  {
    pHandle->aBuffer[index] = aux;
 8008346:	6a04      	ldr	r4, [r0, #32]
 8008348:	2300      	movs	r3, #0
 800834a:	b29a      	uxth	r2, r3
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 800834c:	3301      	adds	r3, #1
    pHandle->aBuffer[index] = aux;
 800834e:	f824 c012 	strh.w	ip, [r4, r2, lsl #1]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8008352:	8b01      	ldrh	r1, [r0, #24]
 8008354:	b29a      	uxth	r2, r3
 8008356:	4291      	cmp	r1, r2
 8008358:	d8f7      	bhi.n	800834a <RVBS_Clear+0x16>
  }
  pHandle->_Super.LatestConv = aux;
 800835a:	2300      	movs	r3, #0
 800835c:	f36c 030f 	bfi	r3, ip, #0, #16
 8008360:	f36c 431f 	bfi	r3, ip, #16, #16
  pHandle->_Super.AvBusVoltage_d = aux;
  pHandle->index = 0;
 8008364:	2200      	movs	r2, #0
}
 8008366:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->_Super.LatestConv = aux;
 800836a:	6043      	str	r3, [r0, #4]
  pHandle->index = 0;
 800836c:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
}
 8008370:	4770      	bx	lr
 8008372:	bf00      	nop

08008374 <RVBS_Init>:
{
 8008374:	b510      	push	{r4, lr}
 8008376:	4604      	mov	r4, r0
  pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 8008378:	300c      	adds	r0, #12
 800837a:	f7fa fad3 	bl	8002924 <RCM_RegisterRegConv>
 800837e:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
  RVBS_Clear( pHandle );
 8008382:	4620      	mov	r0, r4
 8008384:	f7ff ffd6 	bl	8008334 <RVBS_Clear>
}
 8008388:	bd10      	pop	{r4, pc}
 800838a:	bf00      	nop

0800838c <RVBS_CheckFaultState>:
  */
__weak uint16_t RVBS_CheckFaultState( RDivider_Handle_t * pHandle )
{
  uint16_t fault;

  if ( pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold )
 800838c:	88c3      	ldrh	r3, [r0, #6]
 800838e:	8b42      	ldrh	r2, [r0, #26]
 8008390:	429a      	cmp	r2, r3
 8008392:	d305      	bcc.n	80083a0 <RVBS_CheckFaultState+0x14>
  {
    fault = MC_OVER_VOLT;
  }
  else if ( pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold )
 8008394:	8b80      	ldrh	r0, [r0, #28]
  {
    fault = MC_UNDER_VOLT;
  }
  else
  {
    fault = MC_NO_ERROR;
 8008396:	4298      	cmp	r0, r3
 8008398:	bf8c      	ite	hi
 800839a:	2004      	movhi	r0, #4
 800839c:	2000      	movls	r0, #0
 800839e:	4770      	bx	lr
    fault = MC_OVER_VOLT;
 80083a0:	2002      	movs	r0, #2
  }
  return fault;
}
 80083a2:	4770      	bx	lr

080083a4 <RVBS_CalcAvVbus>:
{
 80083a4:	b570      	push	{r4, r5, r6, lr}
 80083a6:	4604      	mov	r4, r0
  hAux = RCM_ExecRegularConv(pHandle->convHandle);
 80083a8:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 80083ac:	f7fa fb96 	bl	8002adc <RCM_ExecRegularConv>
  if ( hAux != 0xFFFF )
 80083b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80083b4:	4298      	cmp	r0, r3
 80083b6:	d01b      	beq.n	80083f0 <RVBS_CalcAvVbus+0x4c>
    pHandle->aBuffer[pHandle->index] = hAux;
 80083b8:	6a26      	ldr	r6, [r4, #32]
 80083ba:	f894 e025 	ldrb.w	lr, [r4, #37]	; 0x25
 80083be:	f826 001e 	strh.w	r0, [r6, lr, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 80083c2:	8b25      	ldrh	r5, [r4, #24]
 80083c4:	b1cd      	cbz	r5, 80083fa <RVBS_CalcAvVbus+0x56>
 80083c6:	2300      	movs	r3, #0
    wtemp = 0;
 80083c8:	461a      	mov	r2, r3
      wtemp += pHandle->aBuffer[i];
 80083ca:	f836 c013 	ldrh.w	ip, [r6, r3, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 80083ce:	3301      	adds	r3, #1
 80083d0:	b2d9      	uxtb	r1, r3
 80083d2:	42a9      	cmp	r1, r5
      wtemp += pHandle->aBuffer[i];
 80083d4:	4462      	add	r2, ip
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 80083d6:	460b      	mov	r3, r1
 80083d8:	d3f7      	bcc.n	80083ca <RVBS_CalcAvVbus+0x26>
    wtemp /= pHandle->LowPassFilterBW;
 80083da:	fbb2 f2f5 	udiv	r2, r2, r5
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 80083de:	1e6b      	subs	r3, r5, #1
 80083e0:	459e      	cmp	lr, r3
    pHandle->_Super.LatestConv = hAux;
 80083e2:	80a0      	strh	r0, [r4, #4]
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 80083e4:	80e2      	strh	r2, [r4, #6]
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 80083e6:	da0a      	bge.n	80083fe <RVBS_CalcAvVbus+0x5a>
      pHandle->index++;
 80083e8:	f10e 0e01 	add.w	lr, lr, #1
 80083ec:	f884 e025 	strb.w	lr, [r4, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 80083f0:	4620      	mov	r0, r4
 80083f2:	f7ff ffcb 	bl	800838c <RVBS_CheckFaultState>
 80083f6:	8120      	strh	r0, [r4, #8]
}
 80083f8:	bd70      	pop	{r4, r5, r6, pc}
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 80083fa:	80e5      	strh	r5, [r4, #6]
    pHandle->_Super.LatestConv = hAux;
 80083fc:	80a0      	strh	r0, [r4, #4]
      pHandle->index = 0;
 80083fe:	2300      	movs	r3, #0
 8008400:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 8008404:	4620      	mov	r0, r4
 8008406:	f7ff ffc1 	bl	800838c <RVBS_CheckFaultState>
 800840a:	8120      	strh	r0, [r4, #8]
}
 800840c:	bd70      	pop	{r4, r5, r6, pc}
 800840e:	bf00      	nop

08008410 <REMNG_Init>:
  * @param  pHandle related Handle of struct RampMngr_Handle_t
  * @retval none.
  */
void REMNG_Init( RampExtMngr_Handle_t * pHandle )
{
  pHandle->Ext = 0;
 8008410:	2300      	movs	r3, #0
  pHandle->TargetFinal = 0;
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
  pHandle->ScalingFactor = 1u;
 8008412:	2201      	movs	r2, #1
  pHandle->TargetFinal = 0;
 8008414:	e9c0 3301 	strd	r3, r3, [r0, #4]
  pHandle->IncDecAmount = 0;
 8008418:	e9c0 3303 	strd	r3, r3, [r0, #12]
  pHandle->ScalingFactor = 1u;
 800841c:	6142      	str	r2, [r0, #20]

#ifdef FASTDIV
  FD_Init( & ( pHandle->fd ) );
#endif

}
 800841e:	4770      	bx	lr

08008420 <RUC_SetPhaseDurationms>:
  *         This parameter must be set in millisecond.
  *  @retval none
  */
__weak void RUC_SetPhaseDurationms( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase, uint16_t hDurationms )
{
  pHandle->ParamsData[bPhase].hDurationms = hDurationms;
 8008420:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8008424:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008428:	818a      	strh	r2, [r1, #12]
}
 800842a:	4770      	bx	lr

0800842c <RUC_SetPhaseFinalMecSpeedUnit>:
  *  @retval none
  */
__weak void RUC_SetPhaseFinalMecSpeedUnit( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase,
                                    int16_t hFinalMecSpeedUnit )
{
  pHandle->ParamsData[bPhase].hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800842c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8008430:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008434:	81ca      	strh	r2, [r1, #14]
}
 8008436:	4770      	bx	lr

08008438 <RUC_SetPhaseFinalTorque>:
  * @param  hFinalTorque: new targetted motor torque.
  *  @retval none
  */
__weak void RUC_SetPhaseFinalTorque( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase, int16_t hFinalTorque )
{
  pHandle->ParamsData[bPhase].hFinalTorque = hFinalTorque;
 8008438:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800843c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008440:	820a      	strh	r2, [r1, #16]
}
 8008442:	4770      	bx	lr

08008444 <RUC_GetPhaseDurationms>:
  *         This parameter must be a number between 0 and 6.
  *  @retval Returns duration used in selected phase.
  */
__weak uint16_t RUC_GetPhaseDurationms( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase )
{
  return ( ( uint16_t )pHandle->ParamsData[bPhase].hDurationms );
 8008444:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8008448:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 800844c:	8988      	ldrh	r0, [r1, #12]
 800844e:	4770      	bx	lr

08008450 <RUC_GetPhaseFinalMecSpeedUnit>:
  *         This parameter must be a number between 0 and 6.
  *  @retval Returns targetted rotor speed set in selected phase.
  */
__weak int16_t RUC_GetPhaseFinalMecSpeedUnit( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase )
{
  return ( ( int16_t )pHandle->ParamsData[bPhase].hFinalMecSpeedUnit );
 8008450:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8008454:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 8008458:	f9b1 000e 	ldrsh.w	r0, [r1, #14]
 800845c:	4770      	bx	lr
 800845e:	bf00      	nop

08008460 <RUC_GetPhaseFinalTorque>:
  *         This parameter must be a number between 0 and 6.
  *  @retval Returns targetted motor torque set in selected phase.
  */
__weak int16_t RUC_GetPhaseFinalTorque( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase )
{
  return ( ( int16_t )pHandle->ParamsData[bPhase].hFinalTorque );
 8008460:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8008464:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 8008468:	f9b1 0010 	ldrsh.w	r0, [r1, #16]
 800846c:	4770      	bx	lr
 800846e:	bf00      	nop

08008470 <RUC_GetNumberOfPhases>:
  *  @retval Returns number of phases relative to the programmed revup.
  */
__weak uint8_t RUC_GetNumberOfPhases( RevUpCtrl_Handle_t * pHandle )
{
  return ( ( uint8_t )pHandle->bPhaseNbr );
}
 8008470:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8008474:	4770      	bx	lr
 8008476:	bf00      	nop

08008478 <SPD_GetElAngle>:
  * @retval int16_t rotor electrical angle (s16degrees)
  */
__weak int16_t SPD_GetElAngle( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hElAngle );
}
 8008478:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 800847c:	4770      	bx	lr
 800847e:	bf00      	nop

08008480 <SPD_GetAvrgMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  */
__weak int16_t SPD_GetAvrgMecSpeedUnit( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hAvrMecSpeedUnit );
}
 8008480:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 8008484:	4770      	bx	lr
 8008486:	bf00      	nop

08008488 <SPD_GetInstElSpeedDpp>:
  * @retval int16_t rotor instantaneous electrical speed (Dpp)
  */
__weak int16_t SPD_GetInstElSpeedDpp( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->InstantaneousElSpeedDpp );
}
 8008488:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 800848c:	4770      	bx	lr
 800848e:	bf00      	nop

08008490 <SPD_IsMecSpeedReliable>:
  int16_t hAux;

  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

  /* Compute absoulte value of mechanical speed */
  if ( *pMecSpeedUnit < 0 )
 8008490:	f9b1 3000 	ldrsh.w	r3, [r1]
  else
  {
    hAbsMecSpeedUnit = ( uint16_t )( *pMecSpeedUnit );
  }

  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 8008494:	8a81      	ldrh	r1, [r0, #20]
{
 8008496:	b500      	push	{lr}
  if ( *pMecSpeedUnit < 0 )
 8008498:	2b00      	cmp	r3, #0
    hAux = -( *pMecSpeedUnit );
 800849a:	bfb8      	it	lt
 800849c:	425b      	neglt	r3, r3
  {
    SpeedError = true;
  }

  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 800849e:	f8b0 e016 	ldrh.w	lr, [r0, #22]
  uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 80084a2:	f890 c003 	ldrb.w	ip, [r0, #3]
  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 80084a6:	7802      	ldrb	r2, [r0, #0]
    hAbsMecSpeedUnit = ( uint16_t )( *pMecSpeedUnit );
 80084a8:	b29b      	uxth	r3, r3
  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 80084aa:	459e      	cmp	lr, r3
 80084ac:	d819      	bhi.n	80084e2 <SPD_IsMecSpeedReliable+0x52>
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 80084ae:	4299      	cmp	r1, r3
 80084b0:	bf2c      	ite	cs
 80084b2:	2300      	movcs	r3, #0
 80084b4:	2301      	movcc	r3, #1
  {
    SpeedError = true;
  }

  /* Compute absoulte value of mechanical acceleration */
  if ( pHandle->hMecAccelUnitP < 0 )
 80084b6:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
  else
  {
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
  }

  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 80084ba:	f8b0 e018 	ldrh.w	lr, [r0, #24]
  if ( pHandle->hMecAccelUnitP < 0 )
 80084be:	2900      	cmp	r1, #0
    hAux = -( pHandle->hMecAccelUnitP );
 80084c0:	bfb8      	it	lt
 80084c2:	4249      	neglt	r1, r1
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
 80084c4:	b289      	uxth	r1, r1
  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 80084c6:	458e      	cmp	lr, r1
 80084c8:	d300      	bcc.n	80084cc <SPD_IsMecSpeedReliable+0x3c>
  {
    SpeedError = true;
  }

  if ( SpeedError == true )
 80084ca:	b163      	cbz	r3, 80084e6 <SPD_IsMecSpeedReliable+0x56>
  {
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 80084cc:	4594      	cmp	ip, r2
 80084ce:	d901      	bls.n	80084d4 <SPD_IsMecSpeedReliable+0x44>
    {
      bSpeedErrorNumber++;
 80084d0:	3201      	adds	r2, #1
 80084d2:	b2d2      	uxtb	r2, r2
  if ( bSpeedErrorNumber == bMaximumSpeedErrorsNumber )
  {
    SpeedSensorReliability = false;
  }

  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 80084d4:	7002      	strb	r2, [r0, #0]

  return ( SpeedSensorReliability );
}
 80084d6:	ebb2 000c 	subs.w	r0, r2, ip
 80084da:	bf18      	it	ne
 80084dc:	2001      	movne	r0, #1
 80084de:	f85d fb04 	ldr.w	pc, [sp], #4
    SpeedError = true;
 80084e2:	2301      	movs	r3, #1
 80084e4:	e7e7      	b.n	80084b6 <SPD_IsMecSpeedReliable+0x26>
      bSpeedErrorNumber = 0u;
 80084e6:	4594      	cmp	ip, r2
 80084e8:	bf88      	it	hi
 80084ea:	2200      	movhi	r2, #0
  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 80084ec:	7002      	strb	r2, [r0, #0]
}
 80084ee:	ebb2 000c 	subs.w	r0, r2, ip
 80084f2:	bf18      	it	ne
 80084f4:	2001      	movne	r0, #1
 80084f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80084fa:	bf00      	nop

080084fc <SPD_GetS16Speed>:
  * @retval int16_t The average mechanical rotor speed expressed in "S16Speed".
  */
__weak int16_t SPD_GetS16Speed( SpeednPosFdbk_Handle_t * pHandle )
{
  int32_t wAux = ( int32_t ) pHandle->hAvrMecSpeedUnit;
  wAux *= INT16_MAX;
 80084fc:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 8008500:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
  wAux *= INT16_MAX;
 8008504:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 8008508:	fb93 f0f0 	sdiv	r0, r3, r0
  return ( int16_t )wAux;
}
 800850c:	b200      	sxth	r0, r0
 800850e:	4770      	bx	lr

08008510 <STC_Init>:
{

  pHandle->PISpeed = pPI;
  pHandle->SPD = SPD_Handle;
  pHandle->Mode = pHandle->ModeDefault;
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 8008510:	f9b0 c02c 	ldrsh.w	ip, [r0, #44]	; 0x2c
  pHandle->PISpeed = pPI;
 8008514:	6101      	str	r1, [r0, #16]
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 8008516:	f9b0 102e 	ldrsh.w	r1, [r0, #46]	; 0x2e
  pHandle->SPD = SPD_Handle;
 800851a:	6142      	str	r2, [r0, #20]
{
 800851c:	b410      	push	{r4}
  pHandle->Mode = pHandle->ModeDefault;
 800851e:	f890 402a 	ldrb.w	r4, [r0, #42]	; 0x2a
 8008522:	7004      	strb	r4, [r0, #0]
  pHandle->TargetFinal = 0;
 8008524:	2300      	movs	r3, #0
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 8008526:	ea4f 440c 	mov.w	r4, ip, lsl #16
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 800852a:	0409      	lsls	r1, r1, #16
 800852c:	e9c0 4101 	strd	r4, r1, [r0, #4]
  pHandle->TargetFinal = 0;
 8008530:	8043      	strh	r3, [r0, #2]
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
}
 8008532:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->RampRemainingStep = 0u;
 8008536:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 8008538:	6183      	str	r3, [r0, #24]
}
 800853a:	4770      	bx	lr

0800853c <STC_GetSpeedSensor>:
  * @retval SpeednPosFdbk_Handle_t speed sensor utilized by the FOC.
  */
__weak SpeednPosFdbk_Handle_t * STC_GetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( pHandle->SPD );
}
 800853c:	6940      	ldr	r0, [r0, #20]
 800853e:	4770      	bx	lr

08008540 <STC_Clear>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none.
  */
__weak void STC_Clear( SpeednTorqCtrl_Handle_t * pHandle )
{
  if ( pHandle->Mode == STC_SPEED_MODE )
 8008540:	7803      	ldrb	r3, [r0, #0]
 8008542:	2b01      	cmp	r3, #1
 8008544:	d000      	beq.n	8008548 <STC_Clear+0x8>
  {
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
  }
}
 8008546:	4770      	bx	lr
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
 8008548:	6900      	ldr	r0, [r0, #16]
 800854a:	2100      	movs	r1, #0
 800854c:	f7fe bfc6 	b.w	80074dc <PID_SetIntegralTerm>

08008550 <STC_GetMecSpeedRefUnit>:
  * @retval int16_t current mechanical rotor speed reference expressed in tenths
  *         of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->SpeedRefUnitExt / 65536 ) );
 8008550:	6840      	ldr	r0, [r0, #4]
 8008552:	2800      	cmp	r0, #0
 8008554:	bfbc      	itt	lt
 8008556:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 800855a:	30ff      	addlt	r0, #255	; 0xff
}
 800855c:	1400      	asrs	r0, r0, #16
 800855e:	4770      	bx	lr

08008560 <STC_GetTorqueRef>:
  * @retval int16_t current motor torque reference. This value represents
  *         actually the Iq current expressed in digit.
  */
__weak int16_t STC_GetTorqueRef( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->TorqueRef / 65536 ) );
 8008560:	6880      	ldr	r0, [r0, #8]
 8008562:	2800      	cmp	r0, #0
 8008564:	bfbc      	itt	lt
 8008566:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 800856a:	30ff      	addlt	r0, #255	; 0xff
}
 800856c:	1400      	asrs	r0, r0, #16
 800856e:	4770      	bx	lr

08008570 <STC_SetControlMode>:
  * @retval none
  */
__weak void STC_SetControlMode( SpeednTorqCtrl_Handle_t * pHandle, STC_Modality_t bMode )
{
  pHandle->Mode = bMode;
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8008570:	2300      	movs	r3, #0
  pHandle->Mode = bMode;
 8008572:	7001      	strb	r1, [r0, #0]
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8008574:	60c3      	str	r3, [r0, #12]
}
 8008576:	4770      	bx	lr

08008578 <STC_ExecRamp>:
  *         application torque or below min application speed depending on
  *         current modality of TSC) in this case the command is ignored and the
  *         previous ramp is not interrupted, otherwise it returns true.
  */
__weak bool STC_ExecRamp( SpeednTorqCtrl_Handle_t * pHandle, int16_t hTargetFinal, uint32_t hDurationms )
{
 8008578:	b570      	push	{r4, r5, r6, lr}
  uint32_t wAux;
  int32_t wAux1;
  int16_t hCurrentReference;

  /* Check if the hTargetFinal is out of the bound of application. */
  if ( pHandle->Mode == STC_TORQUE_MODE )
 800857a:	7803      	ldrb	r3, [r0, #0]
{
 800857c:	4604      	mov	r4, r0
 800857e:	460d      	mov	r5, r1
 8008580:	4616      	mov	r6, r2
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8008582:	b323      	cbz	r3, 80085ce <STC_ExecRamp+0x56>
    }
#endif
  }
  else
  {
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8008584:	6840      	ldr	r0, [r0, #4]

#ifdef CHECK_BOUNDARY
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8008586:	8be3      	ldrh	r3, [r4, #30]
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8008588:	2800      	cmp	r0, #0
 800858a:	bfbc      	itt	lt
 800858c:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8008590:	30ff      	addlt	r0, #255	; 0xff
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8008592:	4299      	cmp	r1, r3
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8008594:	ea4f 4020 	mov.w	r0, r0, asr #16
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8008598:	dd01      	ble.n	800859e <STC_ExecRamp+0x26>
      AllowedRange = false;
 800859a:	2000      	movs	r0, #0
      pHandle->IncDecAmount = wAux1;
    }
  }

  return AllowedRange;
}
 800859c:	bd70      	pop	{r4, r5, r6, pc}
    else if ( hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit )
 800859e:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 80085a2:	428b      	cmp	r3, r1
 80085a4:	dcf9      	bgt.n	800859a <STC_ExecRamp+0x22>
    else if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinAppPositiveMecSpeedUnit )
 80085a6:	8c23      	ldrh	r3, [r4, #32]
 80085a8:	4299      	cmp	r1, r3
 80085aa:	da03      	bge.n	80085b4 <STC_ExecRamp+0x3c>
      if ( hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit )
 80085ac:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 80085b0:	428b      	cmp	r3, r1
 80085b2:	dbf2      	blt.n	800859a <STC_ExecRamp+0x22>
    if ( hDurationms == 0u )
 80085b4:	b9ae      	cbnz	r6, 80085e2 <STC_ExecRamp+0x6a>
      if ( pHandle->Mode == STC_SPEED_MODE )
 80085b6:	7823      	ldrb	r3, [r4, #0]
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 80085b8:	042d      	lsls	r5, r5, #16
      if ( pHandle->Mode == STC_SPEED_MODE )
 80085ba:	2b01      	cmp	r3, #1
      pHandle->RampRemainingStep = 0u;
 80085bc:	f04f 0300 	mov.w	r3, #0
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 80085c0:	bf0c      	ite	eq
 80085c2:	6065      	streq	r5, [r4, #4]
        pHandle->TorqueRef = ( int32_t )hTargetFinal * 65536;
 80085c4:	60a5      	strne	r5, [r4, #8]
      pHandle->RampRemainingStep = 0u;
 80085c6:	60e3      	str	r3, [r4, #12]
      pHandle->IncDecAmount = 0;
 80085c8:	61a3      	str	r3, [r4, #24]
 80085ca:	2001      	movs	r0, #1
}
 80085cc:	bd70      	pop	{r4, r5, r6, pc}
    hCurrentReference = STC_GetTorqueRef( pHandle );
 80085ce:	f7ff ffc7 	bl	8008560 <STC_GetTorqueRef>
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxPositiveTorque )
 80085d2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80085d4:	429d      	cmp	r5, r3
 80085d6:	dce0      	bgt.n	800859a <STC_ExecRamp+0x22>
    if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinNegativeTorque )
 80085d8:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 80085dc:	42ab      	cmp	r3, r5
 80085de:	dcdc      	bgt.n	800859a <STC_ExecRamp+0x22>
 80085e0:	e7e8      	b.n	80085b4 <STC_ExecRamp+0x3c>
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 80085e2:	8ba3      	ldrh	r3, [r4, #28]
      pHandle->TargetFinal = hTargetFinal;
 80085e4:	8065      	strh	r5, [r4, #2]
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 80085e6:	fb06 f303 	mul.w	r3, r6, r3
      wAux /= 1000u;
 80085ea:	4e06      	ldr	r6, [pc, #24]	; (8008604 <STC_ExecRamp+0x8c>)
 80085ec:	fba6 2303 	umull	r2, r3, r6, r3
 80085f0:	099b      	lsrs	r3, r3, #6
      pHandle->RampRemainingStep++;
 80085f2:	3301      	adds	r3, #1
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 80085f4:	1a28      	subs	r0, r5, r0
 80085f6:	0400      	lsls	r0, r0, #16
      pHandle->RampRemainingStep++;
 80085f8:	60e3      	str	r3, [r4, #12]
      wAux1 /= ( int32_t )pHandle->RampRemainingStep;
 80085fa:	fb90 f0f3 	sdiv	r0, r0, r3
      pHandle->IncDecAmount = wAux1;
 80085fe:	61a0      	str	r0, [r4, #24]
 8008600:	2001      	movs	r0, #1
}
 8008602:	bd70      	pop	{r4, r5, r6, pc}
 8008604:	10624dd3 	.word	0x10624dd3

08008608 <STC_StopRamp>:
  * @retval none
  */
__weak void STC_StopRamp( SpeednTorqCtrl_Handle_t * pHandle )
{

  pHandle->RampRemainingStep = 0u;
 8008608:	2300      	movs	r3, #0
 800860a:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 800860c:	6183      	str	r3, [r0, #24]
}
 800860e:	4770      	bx	lr

08008610 <STC_CalcTorqueReference>:
  *         To convert current expressed in Amps to current expressed in digit
  *         is possible to use the formula:
  *         Current(digit) = [Current(Amp) * 65536 * Rshunt * Aop]  /  Vdd micro
  */
__weak int16_t STC_CalcTorqueReference( SpeednTorqCtrl_Handle_t * pHandle )
{
 8008610:	b570      	push	{r4, r5, r6, lr}
  int16_t hTargetSpeed;
  int16_t hError;

  if ( pHandle->Mode == STC_TORQUE_MODE )
  {
    wCurrentReference = pHandle->TorqueRef;
 8008612:	e9d0 6101 	ldrd	r6, r1, [r0, #4]
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8008616:	7802      	ldrb	r2, [r0, #0]
    wCurrentReference = pHandle->SpeedRefUnitExt;
  }

  /* Update the speed reference or the torque reference according to the mode
     and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 8008618:	68c3      	ldr	r3, [r0, #12]
    wCurrentReference = pHandle->TorqueRef;
 800861a:	2a00      	cmp	r2, #0
 800861c:	bf08      	it	eq
 800861e:	460e      	moveq	r6, r1
  if ( pHandle->RampRemainingStep > 1u )
 8008620:	2b01      	cmp	r3, #1
{
 8008622:	4604      	mov	r4, r0
  if ( pHandle->RampRemainingStep > 1u )
 8008624:	d90c      	bls.n	8008640 <STC_CalcTorqueReference+0x30>
  {
    /* Increment/decrement the reference value. */
    wCurrentReference += pHandle->IncDecAmount;
 8008626:	6981      	ldr	r1, [r0, #24]
 8008628:	440e      	add	r6, r1

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep--;
 800862a:	3b01      	subs	r3, #1
  if ( pHandle->Mode == STC_SPEED_MODE )
  {
    /* Run the speed control loop */

    /* Compute speed error */
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 800862c:	2e00      	cmp	r6, #0
    pHandle->RampRemainingStep--;
 800862e:	60c3      	str	r3, [r0, #12]
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 8008630:	4630      	mov	r0, r6
 8008632:	db09      	blt.n	8008648 <STC_CalcTorqueReference+0x38>
 8008634:	1405      	asrs	r5, r0, #16
  if ( pHandle->Mode == STC_SPEED_MODE )
 8008636:	2a01      	cmp	r2, #1
 8008638:	d00a      	beq.n	8008650 <STC_CalcTorqueReference+0x40>
    pHandle->SpeedRefUnitExt = wCurrentReference;
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
  }
  else
  {
    pHandle->TorqueRef = wCurrentReference;
 800863a:	60a6      	str	r6, [r4, #8]
    hTorqueReference = ( int16_t )( wCurrentReference / 65536 );
 800863c:	b228      	sxth	r0, r5
  }

  return hTorqueReference;
}
 800863e:	bd70      	pop	{r4, r5, r6, pc}
  else if ( pHandle->RampRemainingStep == 1u )
 8008640:	d012      	beq.n	8008668 <STC_CalcTorqueReference+0x58>
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 8008642:	2e00      	cmp	r6, #0
 8008644:	4630      	mov	r0, r6
 8008646:	daf5      	bge.n	8008634 <STC_CalcTorqueReference+0x24>
 8008648:	f506 407f 	add.w	r0, r6, #65280	; 0xff00
 800864c:	30ff      	adds	r0, #255	; 0xff
 800864e:	e7f1      	b.n	8008634 <STC_CalcTorqueReference+0x24>
    hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit( pHandle->SPD );
 8008650:	6960      	ldr	r0, [r4, #20]
 8008652:	f7ff ff15 	bl	8008480 <SPD_GetAvrgMecSpeedUnit>
    hError = hTargetSpeed - hMeasuredSpeed;
 8008656:	1a29      	subs	r1, r5, r0
    hTorqueReference = PI_Controller( pHandle->PISpeed, ( int32_t )hError );
 8008658:	b209      	sxth	r1, r1
 800865a:	6920      	ldr	r0, [r4, #16]
 800865c:	f7fe ff4a 	bl	80074f4 <PI_Controller>
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 8008660:	0403      	lsls	r3, r0, #16
 8008662:	e9c4 6301 	strd	r6, r3, [r4, #4]
}
 8008666:	bd70      	pop	{r4, r5, r6, pc}
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8008668:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
    pHandle->RampRemainingStep = 0u;
 800866c:	2300      	movs	r3, #0
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 800866e:	042e      	lsls	r6, r5, #16
    pHandle->RampRemainingStep = 0u;
 8008670:	60c3      	str	r3, [r0, #12]
 8008672:	e7e0      	b.n	8008636 <STC_CalcTorqueReference+0x26>

08008674 <STC_GetMecSpeedRefUnitDefault>:
  *         expressed in tenths of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnitDefault( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MecSpeedRefUnitDefault;
}
 8008674:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 8008678:	4770      	bx	lr
 800867a:	bf00      	nop

0800867c <STC_GetMaxAppPositiveMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak uint16_t STC_GetMaxAppPositiveMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MaxAppPositiveMecSpeedUnit;
}
 800867c:	8bc0      	ldrh	r0, [r0, #30]
 800867e:	4770      	bx	lr

08008680 <STC_GetMinAppNegativeMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak int16_t STC_GetMinAppNegativeMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MinAppNegativeMecSpeedUnit;
}
 8008680:	f9b0 0024 	ldrsh.w	r0, [r0, #36]	; 0x24
 8008684:	4770      	bx	lr
 8008686:	bf00      	nop

08008688 <STC_GetDefaultIqdref>:
  * @retval default values of Iqdref.
  */
__weak qd_t STC_GetDefaultIqdref( SpeednTorqCtrl_Handle_t * pHandle )
{
  qd_t IqdRefDefault;
  IqdRefDefault.q = pHandle->TorqueRefDefault;
 8008688:	f8d0 302e 	ldr.w	r3, [r0, #46]	; 0x2e
  IqdRefDefault.d = pHandle->IdrefDefault;
  return IqdRefDefault;
 800868c:	2200      	movs	r2, #0
 800868e:	b299      	uxth	r1, r3
 8008690:	f361 020f 	bfi	r2, r1, #0, #16
 8008694:	0c1b      	lsrs	r3, r3, #16
 8008696:	f363 421f 	bfi	r2, r3, #16, #16
{
 800869a:	b082      	sub	sp, #8
}
 800869c:	4610      	mov	r0, r2
 800869e:	b002      	add	sp, #8
 80086a0:	4770      	bx	lr
 80086a2:	bf00      	nop

080086a4 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *         at the START_RUN state to initialize the speed reference.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed( SpeednTorqCtrl_Handle_t * pHandle )
{
 80086a4:	b510      	push	{r4, lr}
 80086a6:	4604      	mov	r4, r0
  pHandle->SpeedRefUnitExt = ( int32_t )SPD_GetAvrgMecSpeedUnit( pHandle->SPD ) * ( int32_t )65536;
 80086a8:	6940      	ldr	r0, [r0, #20]
 80086aa:	f7ff fee9 	bl	8008480 <SPD_GetAvrgMecSpeedUnit>
 80086ae:	0400      	lsls	r0, r0, #16
 80086b0:	6060      	str	r0, [r4, #4]
}
 80086b2:	bd10      	pop	{r4, pc}

080086b4 <STM_Init>:
  * @retval none.
  */
__weak void STM_Init( STM_Handle_t * pHandle )
{

  pHandle->bState = IDLE;
 80086b4:	2300      	movs	r3, #0
 80086b6:	7003      	strb	r3, [r0, #0]
  pHandle->hFaultNow = MC_NO_FAULTS;
 80086b8:	f8c0 3002 	str.w	r3, [r0, #2]
  pHandle->hFaultOccurred = MC_NO_FAULTS;
}
 80086bc:	4770      	bx	lr
 80086be:	bf00      	nop

080086c0 <STM_FaultProcessing>:
                             hResetErrors )
{
  State_t LocalState =  pHandle->bState;

  /* Set current errors */
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 80086c0:	8843      	ldrh	r3, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 80086c2:	f8b0 c004 	ldrh.w	ip, [r0, #4]
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 80086c6:	430b      	orrs	r3, r1
 80086c8:	ea23 0202 	bic.w	r2, r3, r2
  State_t LocalState =  pHandle->bState;
 80086cc:	7803      	ldrb	r3, [r0, #0]
  pHandle->hFaultOccurred |= hSetErrors;
 80086ce:	ea41 010c 	orr.w	r1, r1, ip
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 80086d2:	b292      	uxth	r2, r2

  if ( LocalState == FAULT_NOW )
 80086d4:	2b0a      	cmp	r3, #10
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 80086d6:	8042      	strh	r2, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 80086d8:	8081      	strh	r1, [r0, #4]
  if ( LocalState == FAULT_NOW )
 80086da:	d006      	beq.n	80086ea <STM_FaultProcessing+0x2a>
      LocalState = FAULT_OVER;
    }
  }
  else
  {
    if ( pHandle->hFaultNow != MC_NO_FAULTS )
 80086dc:	b90a      	cbnz	r2, 80086e2 <STM_FaultProcessing+0x22>
      LocalState = FAULT_NOW;
    }
  }

  return ( LocalState );
}
 80086de:	4618      	mov	r0, r3
 80086e0:	4770      	bx	lr
      pHandle->bState = FAULT_NOW;
 80086e2:	230a      	movs	r3, #10
 80086e4:	7003      	strb	r3, [r0, #0]
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	4770      	bx	lr
    if ( pHandle->hFaultNow == MC_NO_FAULTS )
 80086ea:	2a00      	cmp	r2, #0
 80086ec:	d1f7      	bne.n	80086de <STM_FaultProcessing+0x1e>
      pHandle->bState = FAULT_OVER;
 80086ee:	230b      	movs	r3, #11
 80086f0:	7003      	strb	r3, [r0, #0]
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	4770      	bx	lr
 80086f6:	bf00      	nop

080086f8 <STM_NextState>:
{
 80086f8:	b508      	push	{r3, lr}
  switch ( bCurrentState )
 80086fa:	7803      	ldrb	r3, [r0, #0]
 80086fc:	2b14      	cmp	r3, #20
 80086fe:	d810      	bhi.n	8008722 <STM_NextState+0x2a>
 8008700:	e8df f003 	tbb	[pc, r3]
 8008704:	200d3457 	.word	0x200d3457
 8008708:	500d532a 	.word	0x500d532a
 800870c:	0f0f484d 	.word	0x0f0f484d
 8008710:	455e0b1b 	.word	0x455e0b1b
 8008714:	3b3f6342 	.word	0x3b3f6342
 8008718:	31          	.byte	0x31
 8008719:	00          	.byte	0x00
      if ( ( bState == ALIGN_OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 800871a:	290e      	cmp	r1, #14
 800871c:	d00f      	beq.n	800873e <STM_NextState+0x46>
      if ( bState == ANY_STOP )
 800871e:	2907      	cmp	r1, #7
 8008720:	d00d      	beq.n	800873e <STM_NextState+0x46>
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8008722:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8008726:	2b01      	cmp	r3, #1
 8008728:	d014      	beq.n	8008754 <STM_NextState+0x5c>
 800872a:	2907      	cmp	r1, #7
 800872c:	d012      	beq.n	8008754 <STM_NextState+0x5c>
      STM_FaultProcessing( pHandle, MC_SW_ERROR, 0u );
 800872e:	2200      	movs	r2, #0
 8008730:	2180      	movs	r1, #128	; 0x80
 8008732:	f7ff ffc5 	bl	80086c0 <STM_FaultProcessing>
 8008736:	2000      	movs	r0, #0
}
 8008738:	bd08      	pop	{r3, pc}
      if ( bState == IDLE )
 800873a:	2900      	cmp	r1, #0
 800873c:	d1f1      	bne.n	8008722 <STM_NextState+0x2a>
    pHandle->bState = bNewState;
 800873e:	7001      	strb	r1, [r0, #0]
 8008740:	2001      	movs	r0, #1
}
 8008742:	bd08      	pop	{r3, pc}
           ( bState == OFFSET_CALIB ) || ( bState == IDLE_ALIGNMENT ) )
 8008744:	2911      	cmp	r1, #17
 8008746:	d8f2      	bhi.n	800872e <STM_NextState+0x36>
 8008748:	4b23      	ldr	r3, [pc, #140]	; (80087d8 <STM_NextState+0xe0>)
 800874a:	40cb      	lsrs	r3, r1
 800874c:	07da      	lsls	r2, r3, #31
 800874e:	d4f6      	bmi.n	800873e <STM_NextState+0x46>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8008750:	2903      	cmp	r1, #3
 8008752:	d1ec      	bne.n	800872e <STM_NextState+0x36>
 8008754:	2000      	movs	r0, #0
}
 8008756:	bd08      	pop	{r3, pc}
      if ( ( bState == SWITCH_OVER ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 8008758:	2913      	cmp	r1, #19
 800875a:	d0f0      	beq.n	800873e <STM_NextState+0x46>
 800875c:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 8008760:	2b05      	cmp	r3, #5
 8008762:	d1e0      	bne.n	8008726 <STM_NextState+0x2e>
 8008764:	e7eb      	b.n	800873e <STM_NextState+0x46>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) )
 8008766:	2912      	cmp	r1, #18
 8008768:	d1d9      	bne.n	800871e <STM_NextState+0x26>
 800876a:	e7e8      	b.n	800873e <STM_NextState+0x46>
      if ( ( bState == ANY_STOP ) || ( bState == ALIGN_CHARGE_BOOT_CAP )
 800876c:	2907      	cmp	r1, #7
 800876e:	d0e6      	beq.n	800873e <STM_NextState+0x46>
 8008770:	f1a1 030d 	sub.w	r3, r1, #13
 8008774:	2b01      	cmp	r3, #1
 8008776:	d8d4      	bhi.n	8008722 <STM_NextState+0x2a>
 8008778:	e7e1      	b.n	800873e <STM_NextState+0x46>
      if ( ( bState == START ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 800877a:	1f0b      	subs	r3, r1, #4
 800877c:	2b01      	cmp	r3, #1
 800877e:	d8ce      	bhi.n	800871e <STM_NextState+0x26>
 8008780:	e7dd      	b.n	800873e <STM_NextState+0x46>
      if ( ( bState == START ) || ( bState == ANY_STOP ) )
 8008782:	2904      	cmp	r1, #4
 8008784:	d1cb      	bne.n	800871e <STM_NextState+0x26>
 8008786:	e7da      	b.n	800873e <STM_NextState+0x46>
      if ( ( bState == OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 8008788:	2911      	cmp	r1, #17
 800878a:	d1c8      	bne.n	800871e <STM_NextState+0x26>
 800878c:	e7d7      	b.n	800873e <STM_NextState+0x46>
      if ( ( bState == ALIGNMENT ) || ( bState == ANY_STOP ) )
 800878e:	2902      	cmp	r1, #2
 8008790:	d1c5      	bne.n	800871e <STM_NextState+0x26>
 8008792:	e7d4      	b.n	800873e <STM_NextState+0x46>
      if ( ( bState == IDLE ) || ( bState == ICLWAIT ) )
 8008794:	2900      	cmp	r1, #0
 8008796:	d0d2      	beq.n	800873e <STM_NextState+0x46>
 8008798:	290c      	cmp	r1, #12
 800879a:	d1c2      	bne.n	8008722 <STM_NextState+0x2a>
 800879c:	e7cf      	b.n	800873e <STM_NextState+0x46>
      if ( bState == STOP_IDLE )
 800879e:	2909      	cmp	r1, #9
 80087a0:	d1bf      	bne.n	8008722 <STM_NextState+0x2a>
 80087a2:	e7cc      	b.n	800873e <STM_NextState+0x46>
      if ( bState == STOP )
 80087a4:	2908      	cmp	r1, #8
 80087a6:	d1bc      	bne.n	8008722 <STM_NextState+0x2a>
 80087a8:	e7c9      	b.n	800873e <STM_NextState+0x46>
      if ( ( bState == RUN ) || ( bState == ANY_STOP ) )
 80087aa:	1f8b      	subs	r3, r1, #6
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	d8b8      	bhi.n	8008722 <STM_NextState+0x2a>
 80087b0:	e7c5      	b.n	800873e <STM_NextState+0x46>
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 80087b2:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 80087b6:	2b01      	cmp	r3, #1
 80087b8:	d0c1      	beq.n	800873e <STM_NextState+0x46>
           || ( bState == ICLWAIT ) )
 80087ba:	290c      	cmp	r1, #12
 80087bc:	d1b5      	bne.n	800872a <STM_NextState+0x32>
 80087be:	e7be      	b.n	800873e <STM_NextState+0x46>
      if ( ( bState == ALIGN_CLEAR ) || ( bState == ANY_STOP ) )
 80087c0:	f001 03f7 	and.w	r3, r1, #247	; 0xf7
 80087c4:	2b07      	cmp	r3, #7
 80087c6:	d1ac      	bne.n	8008722 <STM_NextState+0x2a>
 80087c8:	e7b9      	b.n	800873e <STM_NextState+0x46>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) || ( bState == WAIT_STOP_MOTOR ) )
 80087ca:	2914      	cmp	r1, #20
 80087cc:	d8a9      	bhi.n	8008722 <STM_NextState+0x2a>
 80087ce:	4b03      	ldr	r3, [pc, #12]	; (80087dc <STM_NextState+0xe4>)
 80087d0:	40cb      	lsrs	r3, r1
 80087d2:	07db      	lsls	r3, r3, #31
 80087d4:	d4b3      	bmi.n	800873e <STM_NextState+0x46>
 80087d6:	e7a4      	b.n	8008722 <STM_NextState+0x2a>
 80087d8:	00030092 	.word	0x00030092
 80087dc:	00140080 	.word	0x00140080

080087e0 <STM_GetState>:
  * @retval State_t Current state machine state
  */
__weak State_t STM_GetState( STM_Handle_t * pHandle )
{
  return ( pHandle->bState );
}
 80087e0:	7800      	ldrb	r0, [r0, #0]
 80087e2:	4770      	bx	lr

080087e4 <STM_FaultAcknowledged>:
  */
__weak bool STM_FaultAcknowledged( STM_Handle_t * pHandle )
{
  bool bToBeReturned = false;

  if ( pHandle->bState == FAULT_OVER )
 80087e4:	7803      	ldrb	r3, [r0, #0]
 80087e6:	2b0b      	cmp	r3, #11
 80087e8:	d001      	beq.n	80087ee <STM_FaultAcknowledged+0xa>
  bool bToBeReturned = false;
 80087ea:	2000      	movs	r0, #0
    pHandle->hFaultOccurred = MC_NO_FAULTS;
    bToBeReturned = true;
  }

  return ( bToBeReturned );
}
 80087ec:	4770      	bx	lr
    pHandle->bState = STOP_IDLE;
 80087ee:	2209      	movs	r2, #9
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 80087f0:	2300      	movs	r3, #0
    pHandle->bState = STOP_IDLE;
 80087f2:	7002      	strb	r2, [r0, #0]
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 80087f4:	8083      	strh	r3, [r0, #4]
    bToBeReturned = true;
 80087f6:	2001      	movs	r0, #1
 80087f8:	4770      	bx	lr
 80087fa:	bf00      	nop

080087fc <STM_GetFaultState>:
  */
__weak uint32_t STM_GetFaultState( STM_Handle_t * pHandle )
{
  uint32_t LocalFaultState;

  LocalFaultState = ( uint32_t )( pHandle->hFaultOccurred );
 80087fc:	8883      	ldrh	r3, [r0, #4]
  LocalFaultState |= ( uint32_t )( pHandle->hFaultNow ) << 16;
 80087fe:	8840      	ldrh	r0, [r0, #2]

  return LocalFaultState;
}
 8008800:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8008804:	4770      	bx	lr
 8008806:	bf00      	nop

08008808 <UFCP_Init>:

__weak void UFCP_Init( UFCP_Handle_t * pHandle )
{

  /* Initialize generic component part */
  FCP_Init( & pHandle->_Super );
 8008808:	f7fe b9a4 	b.w	8006b54 <FCP_Init>

0800880c <UFCP_TX_IRQ_Handler>:
 */
__weak void UFCP_TX_IRQ_Handler( UFCP_Handle_t * pHandle )
{
  FCP_Handle_t * pBaseHandle = & pHandle->_Super;

  if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState )
 800880c:	f890 3097 	ldrb.w	r3, [r0, #151]	; 0x97
 8008810:	b16b      	cbz	r3, 800882e <UFCP_TX_IRQ_Handler+0x22>
  {
    uint16_t tx_data;

    switch ( pBaseHandle->TxFrameLevel )
 8008812:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
 8008816:	4602      	mov	r2, r0
 8008818:	b1a3      	cbz	r3, 8008844 <UFCP_TX_IRQ_Handler+0x38>
 800881a:	2b01      	cmp	r3, #1
 800881c:	d108      	bne.n	8008830 <UFCP_TX_IRQ_Handler+0x24>
      case 0:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Code;
        break;

      case 1:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Size;
 800881e:	7d41      	ldrb	r1, [r0, #21]
          tx_data = (uint16_t) pBaseHandle->TxFrame.FrameCRC;
        }
    } /* end of switch ( pBaseHandle->TxFrameLevel ) */

    /* Send the data byte */
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 8008820:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 8008824:	6041      	str	r1, [r0, #4]

    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
    {
      pBaseHandle->TxFrameLevel++;
 8008826:	3301      	adds	r3, #1
 8008828:	f882 3098 	strb.w	r3, [r2, #152]	; 0x98
 800882c:	4770      	bx	lr
 800882e:	4770      	bx	lr
        if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 8008830:	7d41      	ldrb	r1, [r0, #21]
 8008832:	3101      	adds	r1, #1
 8008834:	428b      	cmp	r3, r1
 8008836:	dc07      	bgt.n	8008848 <UFCP_TX_IRQ_Handler+0x3c>
          tx_data = (uint16_t) pBaseHandle->TxFrame.Buffer[ pBaseHandle->TxFrameLevel - FCP_HEADER_SIZE ];
 8008838:	18c1      	adds	r1, r0, r3
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 800883a:	f8d0 0120 	ldr.w	r0, [r0, #288]	; 0x120
 800883e:	7d09      	ldrb	r1, [r1, #20]
 8008840:	6041      	str	r1, [r0, #4]
    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 8008842:	e7f0      	b.n	8008826 <UFCP_TX_IRQ_Handler+0x1a>
        tx_data = (uint16_t) pBaseHandle->TxFrame.Code;
 8008844:	7d01      	ldrb	r1, [r0, #20]
        break;
 8008846:	e7eb      	b.n	8008820 <UFCP_TX_IRQ_Handler+0x14>
{
 8008848:	b410      	push	{r4}
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 800884a:	f8d0 1120 	ldr.w	r1, [r0, #288]	; 0x120
 800884e:	f890 3096 	ldrb.w	r3, [r0, #150]	; 0x96
 8008852:	604b      	str	r3, [r1, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8008854:	310c      	adds	r1, #12
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008856:	e851 3f00 	ldrex	r3, [r1]
 800885a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800885e:	e841 3400 	strex	r4, r3, [r1]
 8008862:	2c00      	cmp	r4, #0
 8008864:	d1f7      	bne.n	8008856 <UFCP_TX_IRQ_Handler+0x4a>
    }
    else
    {
      LL_USART_DisableIT_TXE(pHandle->USARTx);
      pBaseHandle->TxFrameState = FCP_TRANSFER_IDLE;
 8008866:	f882 4097 	strb.w	r4, [r2, #151]	; 0x97

      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 800886a:	e9d2 0300 	ldrd	r0, r3, [r2]
    }

  } /* end of if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState ) */
}
 800886e:	f85d 4b04 	ldr.w	r4, [sp], #4
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 8008872:	4718      	bx	r3

08008874 <UFCP_Receive>:

__weak uint8_t UFCP_Receive( FCP_Handle_t * pHandle )
{
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->RxFrameState )
 8008874:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
 8008878:	b97b      	cbnz	r3, 800889a <UFCP_Receive+0x26>
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800887a:	f8d0 2120 	ldr.w	r2, [r0, #288]	; 0x120
  {
    UFCP_Handle_t * pActualHandle = (UFCP_Handle_t *) pHandle;

    pHandle->RxFrameLevel = 0;
    pHandle->RxFrameState = FCP_TRANSFER_ONGOING;
 800887e:	2301      	movs	r3, #1
 8008880:	f8a0 311c 	strh.w	r3, [r0, #284]	; 0x11c
 8008884:	320c      	adds	r2, #12
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008886:	e852 3f00 	ldrex	r3, [r2]
 800888a:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800888e:	e842 3100 	strex	r1, r3, [r2]
 8008892:	2900      	cmp	r1, #0
 8008894:	d1f7      	bne.n	8008886 <UFCP_Receive+0x12>

    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
    ret_val = FCP_STATUS_WAITING_TRANSFER;
 8008896:	2002      	movs	r0, #2
 8008898:	4770      	bx	lr
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 800889a:	2001      	movs	r0, #1
  }

  return ret_val;
}
 800889c:	4770      	bx	lr
 800889e:	bf00      	nop

080088a0 <UFCP_Send>:

__weak uint8_t UFCP_Send( FCP_Handle_t * pHandle, uint8_t code, uint8_t *buffer, uint8_t size)
{
 80088a0:	b570      	push	{r4, r5, r6, lr}
 80088a2:	4604      	mov	r4, r0
  uint8_t ret_val;
  if ( FCP_TRANSFER_IDLE == pHandle->TxFrameState )
 80088a4:	f890 0097 	ldrb.w	r0, [r0, #151]	; 0x97
 80088a8:	2800      	cmp	r0, #0
 80088aa:	d148      	bne.n	800893e <UFCP_Send+0x9e>
    UFCP_Handle_t * pActualHandle = (UFCP_Handle_t *) pHandle;
    uint8_t *dest = pHandle->TxFrame.Buffer;

    pHandle->TxFrame.Code = code;
    pHandle->TxFrame.Size = size;
    while ( size-- ) *dest++ = *buffer++;
 80088ac:	1e58      	subs	r0, r3, #1
    uint8_t *dest = pHandle->TxFrame.Buffer;
 80088ae:	f104 0616 	add.w	r6, r4, #22
    pHandle->TxFrame.Code = code;
 80088b2:	7521      	strb	r1, [r4, #20]
    pHandle->TxFrame.Size = size;
 80088b4:	7563      	strb	r3, [r4, #21]
    while ( size-- ) *dest++ = *buffer++;
 80088b6:	b2c0      	uxtb	r0, r0
 80088b8:	b343      	cbz	r3, 800890c <UFCP_Send+0x6c>
 80088ba:	1c51      	adds	r1, r2, #1
 80088bc:	1a75      	subs	r5, r6, r1
 80088be:	2d02      	cmp	r5, #2
 80088c0:	d93f      	bls.n	8008942 <UFCP_Send+0xa2>
 80088c2:	2807      	cmp	r0, #7
 80088c4:	d93d      	bls.n	8008942 <UFCP_Send+0xa2>
 80088c6:	089d      	lsrs	r5, r3, #2
 80088c8:	3d01      	subs	r5, #1
 80088ca:	b2e9      	uxtb	r1, r5
 80088cc:	1d15      	adds	r5, r2, #4
 80088ce:	eb05 0581 	add.w	r5, r5, r1, lsl #2
 80088d2:	46b4      	mov	ip, r6
 80088d4:	4611      	mov	r1, r2
 80088d6:	f851 eb04 	ldr.w	lr, [r1], #4
 80088da:	f84c eb04 	str.w	lr, [ip], #4
 80088de:	42a9      	cmp	r1, r5
 80088e0:	d1f9      	bne.n	80088d6 <UFCP_Send+0x36>
 80088e2:	f003 01fc 	and.w	r1, r3, #252	; 0xfc
 80088e6:	1a40      	subs	r0, r0, r1
 80088e8:	428b      	cmp	r3, r1
 80088ea:	b2c0      	uxtb	r0, r0
 80088ec:	eb02 0c01 	add.w	ip, r2, r1
 80088f0:	eb06 0501 	add.w	r5, r6, r1
 80088f4:	d00a      	beq.n	800890c <UFCP_Send+0x6c>
 80088f6:	5c53      	ldrb	r3, [r2, r1]
 80088f8:	5473      	strb	r3, [r6, r1]
 80088fa:	b138      	cbz	r0, 800890c <UFCP_Send+0x6c>
 80088fc:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8008900:	706b      	strb	r3, [r5, #1]
 8008902:	2801      	cmp	r0, #1
 8008904:	d002      	beq.n	800890c <UFCP_Send+0x6c>
 8008906:	f89c 3002 	ldrb.w	r3, [ip, #2]
 800890a:	70ab      	strb	r3, [r5, #2]
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 800890c:	f104 0014 	add.w	r0, r4, #20
 8008910:	f7fe f934 	bl	8006b7c <FCP_CalcCRC>
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8008914:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 8008918:	f884 0096 	strb.w	r0, [r4, #150]	; 0x96

    pHandle->TxFrameLevel = 0;
 800891c:	2100      	movs	r1, #0
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 800891e:	2301      	movs	r3, #1
    pHandle->TxFrameLevel = 0;
 8008920:	f884 1098 	strb.w	r1, [r4, #152]	; 0x98
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 8008924:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
 8008928:	320c      	adds	r2, #12
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800892a:	e852 3f00 	ldrex	r3, [r2]
 800892e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008932:	e842 3100 	strex	r1, r3, [r2]
 8008936:	2900      	cmp	r1, #0
 8008938:	d1f7      	bne.n	800892a <UFCP_Send+0x8a>
 800893a:	2002      	movs	r0, #2
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
  }

  return ret_val;
}
 800893c:	bd70      	pop	{r4, r5, r6, pc}
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 800893e:	2001      	movs	r0, #1
}
 8008940:	bd70      	pop	{r4, r5, r6, pc}
 8008942:	f104 0015 	add.w	r0, r4, #21
 8008946:	4413      	add	r3, r2
 8008948:	e000      	b.n	800894c <UFCP_Send+0xac>
 800894a:	3101      	adds	r1, #1
    while ( size-- ) *dest++ = *buffer++;
 800894c:	f811 2c01 	ldrb.w	r2, [r1, #-1]
 8008950:	f800 2f01 	strb.w	r2, [r0, #1]!
 8008954:	4299      	cmp	r1, r3
 8008956:	d1f8      	bne.n	800894a <UFCP_Send+0xaa>
 8008958:	e7d8      	b.n	800890c <UFCP_Send+0x6c>
 800895a:	bf00      	nop

0800895c <UFCP_RX_IRQ_Handler>:
  if ( FCP_TRANSFER_IDLE != pBaseHandle->RxFrameState )
 800895c:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
 8008960:	b90b      	cbnz	r3, 8008966 <UFCP_RX_IRQ_Handler+0xa>
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8008962:	4831      	ldr	r0, [pc, #196]	; (8008a28 <UFCP_RX_IRQ_Handler+0xcc>)
}
 8008964:	4770      	bx	lr
{
 8008966:	b530      	push	{r4, r5, lr}
    switch ( pBaseHandle->RxFrameLevel )
 8008968:	f890 311d 	ldrb.w	r3, [r0, #285]	; 0x11d
{
 800896c:	b083      	sub	sp, #12
 800896e:	4604      	mov	r4, r0
    uint8_t rx_byte = (uint8_t) rx_data;
 8008970:	fa5f fc81 	uxtb.w	ip, r1
    switch ( pBaseHandle->RxFrameLevel )
 8008974:	b39b      	cbz	r3, 80089de <UFCP_RX_IRQ_Handler+0x82>
 8008976:	2b01      	cmp	r3, #1
 8008978:	d03b      	beq.n	80089f2 <UFCP_RX_IRQ_Handler+0x96>
        if ( pBaseHandle->RxFrameLevel < pBaseHandle->RxFrame.Size + FCP_HEADER_SIZE )
 800897a:	f890 209a 	ldrb.w	r2, [r0, #154]	; 0x9a
 800897e:	3201      	adds	r2, #1
 8008980:	4293      	cmp	r3, r2
 8008982:	dc08      	bgt.n	8008996 <UFCP_RX_IRQ_Handler+0x3a>
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 8008984:	18c2      	adds	r2, r0, r3
          pBaseHandle->RxFrameLevel++;
 8008986:	3301      	adds	r3, #1
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8008988:	4827      	ldr	r0, [pc, #156]	; (8008a28 <UFCP_RX_IRQ_Handler+0xcc>)
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 800898a:	f882 c099 	strb.w	ip, [r2, #153]	; 0x99
          pBaseHandle->RxFrameLevel++;
 800898e:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
}
 8008992:	b003      	add	sp, #12
 8008994:	bd30      	pop	{r4, r5, pc}
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8008996:	f8d0 2120 	ldr.w	r2, [r0, #288]	; 0x120
          pBaseHandle->RxFrame.FrameCRC = rx_byte;
 800899a:	f880 c11b 	strb.w	ip, [r0, #283]	; 0x11b
          pBaseHandle->RxTimeoutCountdown = 0;
 800899e:	2300      	movs	r3, #0
 80089a0:	8243      	strh	r3, [r0, #18]
 80089a2:	320c      	adds	r2, #12
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089a4:	e852 3f00 	ldrex	r3, [r2]
 80089a8:	f023 0320 	bic.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ac:	e842 3100 	strex	r1, r3, [r2]
 80089b0:	2900      	cmp	r1, #0
 80089b2:	d1f7      	bne.n	80089a4 <UFCP_RX_IRQ_Handler+0x48>
          pBaseHandle->RxFrameState = FCP_TRANSFER_IDLE;
 80089b4:	f884 111c 	strb.w	r1, [r4, #284]	; 0x11c
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 80089b8:	f104 0099 	add.w	r0, r4, #153	; 0x99
 80089bc:	f7fe f8de 	bl	8006b7c <FCP_CalcCRC>
 80089c0:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
 80089c4:	4283      	cmp	r3, r0
 80089c6:	d122      	bne.n	8008a0e <UFCP_RX_IRQ_Handler+0xb2>
            pBaseHandle->ClientFrameReceivedCallback( pBaseHandle->ClientEntity,
 80089c8:	6820      	ldr	r0, [r4, #0]
 80089ca:	68a5      	ldr	r5, [r4, #8]
 80089cc:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 80089d0:	f894 1099 	ldrb.w	r1, [r4, #153]	; 0x99
 80089d4:	f104 029b 	add.w	r2, r4, #155	; 0x9b
 80089d8:	47a8      	blx	r5
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 80089da:	4814      	ldr	r0, [pc, #80]	; (8008a2c <UFCP_RX_IRQ_Handler+0xd0>)
 80089dc:	e7d9      	b.n	8008992 <UFCP_RX_IRQ_Handler+0x36>
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 80089de:	8a02      	ldrh	r2, [r0, #16]
        ret_val = (void *) & UFCP_Usart_Timeout_start;
 80089e0:	4813      	ldr	r0, [pc, #76]	; (8008a30 <UFCP_RX_IRQ_Handler+0xd4>)
        pBaseHandle->RxFrame.Code = rx_byte;
 80089e2:	f884 c099 	strb.w	ip, [r4, #153]	; 0x99
        pBaseHandle->RxFrameLevel++;
 80089e6:	2301      	movs	r3, #1
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 80089e8:	8262      	strh	r2, [r4, #18]
        pBaseHandle->RxFrameLevel++;
 80089ea:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
}
 80089ee:	b003      	add	sp, #12
 80089f0:	bd30      	pop	{r4, r5, pc}
        if ( pBaseHandle->RxFrame.Size >= FCP_MAX_PAYLOAD_SIZE)
 80089f2:	060b      	lsls	r3, r1, #24
        pBaseHandle->RxFrame.Size = rx_byte;
 80089f4:	f880 c09a 	strb.w	ip, [r0, #154]	; 0x9a
        if ( pBaseHandle->RxFrame.Size >= FCP_MAX_PAYLOAD_SIZE)
 80089f8:	d404      	bmi.n	8008a04 <UFCP_RX_IRQ_Handler+0xa8>
        pBaseHandle->RxFrameLevel++;
 80089fa:	2302      	movs	r3, #2
 80089fc:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8008a00:	4809      	ldr	r0, [pc, #36]	; (8008a28 <UFCP_RX_IRQ_Handler+0xcc>)
 8008a02:	e7c6      	b.n	8008992 <UFCP_RX_IRQ_Handler+0x36>
          pBaseHandle->RxFrameLevel =0 ;
 8008a04:	2300      	movs	r3, #0
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8008a06:	4808      	ldr	r0, [pc, #32]	; (8008a28 <UFCP_RX_IRQ_Handler+0xcc>)
          pBaseHandle->RxFrameLevel =0 ;
 8008a08:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
 8008a0c:	e7c1      	b.n	8008992 <UFCP_RX_IRQ_Handler+0x36>
            error_code = FCP_MSG_RX_BAD_CRC;
 8008a0e:	250a      	movs	r5, #10
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8008a10:	2301      	movs	r3, #1
 8008a12:	f10d 0207 	add.w	r2, sp, #7
 8008a16:	21ff      	movs	r1, #255	; 0xff
 8008a18:	4620      	mov	r0, r4
            error_code = FCP_MSG_RX_BAD_CRC;
 8008a1a:	f88d 5007 	strb.w	r5, [sp, #7]
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8008a1e:	f7ff ff3f 	bl	80088a0 <UFCP_Send>
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 8008a22:	4802      	ldr	r0, [pc, #8]	; (8008a2c <UFCP_RX_IRQ_Handler+0xd0>)
  return ret_val;
 8008a24:	e7b5      	b.n	8008992 <UFCP_RX_IRQ_Handler+0x36>
 8008a26:	bf00      	nop
 8008a28:	0800935c 	.word	0x0800935c
 8008a2c:	08009360 	.word	0x08009360
 8008a30:	0800935e 	.word	0x0800935e

08008a34 <UFCP_OVR_IRQ_Handler>:
{
 8008a34:	b500      	push	{lr}
 8008a36:	b083      	sub	sp, #12
  error_code = UFCP_MSG_OVERRUN;
 8008a38:	f04f 0c08 	mov.w	ip, #8
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	f10d 0207 	add.w	r2, sp, #7
 8008a42:	21ff      	movs	r1, #255	; 0xff
  error_code = UFCP_MSG_OVERRUN;
 8008a44:	f88d c007 	strb.w	ip, [sp, #7]
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8008a48:	f7ff ff2a 	bl	80088a0 <UFCP_Send>
}
 8008a4c:	b003      	add	sp, #12
 8008a4e:	f85d fb04 	ldr.w	pc, [sp], #4
 8008a52:	bf00      	nop

08008a54 <UFCP_AbortReceive>:

__weak void UFCP_AbortReceive( FCP_Handle_t * pHandle )
{
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8008a54:	2300      	movs	r3, #0
 8008a56:	f880 311c 	strb.w	r3, [r0, #284]	; 0x11c
}
 8008a5a:	4770      	bx	lr

08008a5c <POWER_CONTROL_CONFG>:
sysProtocol_txFail_Handler_t *txFailure;
Power_Control_TxFrame_t txHandler;

void POWER_CONTROL_CONFG(POWER_Control_t *cmd)
{
	pwrControl = cmd;
 8008a5c:	4b01      	ldr	r3, [pc, #4]	; (8008a64 <POWER_CONTROL_CONFG+0x8>)
 8008a5e:	6018      	str	r0, [r3, #0]
}
 8008a60:	4770      	bx	lr
 8008a62:	bf00      	nop
 8008a64:	20004a20 	.word	0x20004a20

08008a68 <POWER_INDICATOR_CONFG>:

void POWER_INDICATOR_CONFG(Power_Status_Indicator_t *indicator)
{
	tailLightControl = indicator;
}
 8008a68:	4770      	bx	lr
 8008a6a:	bf00      	nop

08008a6c <POWER_RETRANSMIT_CTL_CONFG>:

void POWER_RETRANSMIT_CTL_CONFG(Power_sysProtocol_Handler_t *reTransTIM)
{
    reTransMgnt = reTransTIM;
 8008a6c:	4b01      	ldr	r3, [pc, #4]	; (8008a74 <POWER_RETRANSMIT_CTL_CONFG+0x8>)
 8008a6e:	6018      	str	r0, [r3, #0]
}
 8008a70:	4770      	bx	lr
 8008a72:	bf00      	nop
 8008a74:	20004a24 	.word	0x20004a24

08008a78 <POWER_TXFAIL_CTL_CONFG>:

void POWER_TXFAIL_CTL_CONFG(sysProtocol_txFail_Handler_t *isTxfail)
{
	txFailure = isTxfail;
 8008a78:	4b01      	ldr	r3, [pc, #4]	; (8008a80 <POWER_TXFAIL_CTL_CONFG+0x8>)
 8008a7a:	6018      	str	r0, [r3, #0]
}
 8008a7c:	4770      	bx	lr
 8008a7e:	bf00      	nop
 8008a80:	20004a2c 	.word	0x20004a2c

08008a84 <POWER_SET_DEFAULT_STATE>:

void POWER_SET_DEFAULT_STATE(POWER_State_t state)
{
	state_Handler = state;
 8008a84:	4b01      	ldr	r3, [pc, #4]	; (8008a8c <POWER_SET_DEFAULT_STATE+0x8>)
 8008a86:	7018      	strb	r0, [r3, #0]
}
 8008a88:	4770      	bx	lr
 8008a8a:	bf00      	nop
 8008a8c:	20004a28 	.word	0x20004a28

08008a90 <POWER_CHANGE_STATE>:
 8008a90:	4b01      	ldr	r3, [pc, #4]	; (8008a98 <POWER_CHANGE_STATE+0x8>)
 8008a92:	7018      	strb	r0, [r3, #0]
 8008a94:	4770      	bx	lr
 8008a96:	bf00      	nop
 8008a98:	20004a28 	.word	0x20004a28

08008a9c <Stop_RetransmissionTimer>:
}

void Stop_RetransmissionTimer()
{
	protocolHandler.RxPacketLossCount = 0;
	reTransMgnt->reTransmissionOff();
 8008a9c:	4b03      	ldr	r3, [pc, #12]	; (8008aac <Stop_RetransmissionTimer+0x10>)
	protocolHandler.RxPacketLossCount = 0;
 8008a9e:	4a04      	ldr	r2, [pc, #16]	; (8008ab0 <Stop_RetransmissionTimer+0x14>)
	reTransMgnt->reTransmissionOff();
 8008aa0:	681b      	ldr	r3, [r3, #0]
	protocolHandler.RxPacketLossCount = 0;
 8008aa2:	2100      	movs	r1, #0
	reTransMgnt->reTransmissionOff();
 8008aa4:	685b      	ldr	r3, [r3, #4]
	protocolHandler.RxPacketLossCount = 0;
 8008aa6:	7051      	strb	r1, [r2, #1]
	reTransMgnt->reTransmissionOff();
 8008aa8:	4718      	bx	r3
 8008aaa:	bf00      	nop
 8008aac:	20004a24 	.word	0x20004a24
 8008ab0:	20004a1c 	.word	0x20004a1c

08008ab4 <retransmissionTimerStart>:
}

void retransmissionTimerStart()
{
	reTransMgnt->reTransmissionOn();
 8008ab4:	4b01      	ldr	r3, [pc, #4]	; (8008abc <retransmissionTimerStart+0x8>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4718      	bx	r3
 8008abc:	20004a24 	.word	0x20004a24

08008ac0 <Stop_TxWaitTimer>:
}

void Stop_TxWaitTimer()
{
	txHandler.TxPacketLossCount = 0;
	txFailure->txFailureOff();
 8008ac0:	4b03      	ldr	r3, [pc, #12]	; (8008ad0 <Stop_TxWaitTimer+0x10>)
	txHandler.TxPacketLossCount = 0;
 8008ac2:	4a04      	ldr	r2, [pc, #16]	; (8008ad4 <Stop_TxWaitTimer+0x14>)
	txFailure->txFailureOff();
 8008ac4:	681b      	ldr	r3, [r3, #0]
	txHandler.TxPacketLossCount = 0;
 8008ac6:	2100      	movs	r1, #0
	txFailure->txFailureOff();
 8008ac8:	685b      	ldr	r3, [r3, #4]
	txHandler.TxPacketLossCount = 0;
 8008aca:	7051      	strb	r1, [r2, #1]
	txFailure->txFailureOff();
 8008acc:	4718      	bx	r3
 8008ace:	bf00      	nop
 8008ad0:	20004a2c 	.word	0x20004a2c
 8008ad4:	20004a30 	.word	0x20004a30

08008ad8 <TxWaitTimerStart>:
}

void TxWaitTimerStart()
{
	txFailure->txFailureOn();
 8008ad8:	4b01      	ldr	r3, [pc, #4]	; (8008ae0 <TxWaitTimerStart+0x8>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4718      	bx	r3
 8008ae0:	20004a2c 	.word	0x20004a2c

08008ae4 <PacketLossCount>:
}

void PacketLossCount()
{
   protocolHandler.RxPacketLossCount++;
 8008ae4:	4a02      	ldr	r2, [pc, #8]	; (8008af0 <PacketLossCount+0xc>)
 8008ae6:	7853      	ldrb	r3, [r2, #1]
 8008ae8:	3301      	adds	r3, #1
 8008aea:	7053      	strb	r3, [r2, #1]
}
 8008aec:	4770      	bx	lr
 8008aee:	bf00      	nop
 8008af0:	20004a1c 	.word	0x20004a1c

08008af4 <FrameFailCount>:

void FrameFailCount()
{
	txHandler.TxPacketLossCount++;
 8008af4:	4a02      	ldr	r2, [pc, #8]	; (8008b00 <FrameFailCount+0xc>)
 8008af6:	7853      	ldrb	r3, [r2, #1]
 8008af8:	3301      	adds	r3, #1
 8008afa:	7053      	strb	r3, [r2, #1]
}
 8008afc:	4770      	bx	lr
 8008afe:	bf00      	nop
 8008b00:	20004a30 	.word	0x20004a30

08008b04 <POWER_PACKET_ACK>:

void POWER_PACKET_ACK()
{
	protocolHandler.RxPacketLossCount = 0;
 8008b04:	4b03      	ldr	r3, [pc, #12]	; (8008b14 <POWER_PACKET_ACK+0x10>)
	protocolHandler.heartBeatSent++;
 8008b06:	789a      	ldrb	r2, [r3, #2]
	protocolHandler.RxPacketLossCount = 0;
 8008b08:	2100      	movs	r1, #0
	protocolHandler.heartBeatSent++;
 8008b0a:	3201      	adds	r2, #1
	protocolHandler.RxPacketLossCount = 0;
 8008b0c:	7059      	strb	r1, [r3, #1]
	protocolHandler.heartBeatSent++;
 8008b0e:	709a      	strb	r2, [r3, #2]
}
 8008b10:	4770      	bx	lr
 8008b12:	bf00      	nop
 8008b14:	20004a1c 	.word	0x20004a1c

08008b18 <FrameSentACK>:

void FrameSentACK()
{
	txHandler.TxPacketLossCount = 0;
 8008b18:	4b03      	ldr	r3, [pc, #12]	; (8008b28 <FrameSentACK+0x10>)
	txHandler.FrameSent++;
 8008b1a:	789a      	ldrb	r2, [r3, #2]
	txHandler.TxPacketLossCount = 0;
 8008b1c:	2100      	movs	r1, #0
	txHandler.FrameSent++;
 8008b1e:	3201      	adds	r2, #1
	txHandler.TxPacketLossCount = 0;
 8008b20:	7059      	strb	r1, [r3, #1]
	txHandler.FrameSent++;
 8008b22:	709a      	strb	r2, [r3, #2]
}
 8008b24:	4770      	bx	lr
 8008b26:	bf00      	nop
 8008b28:	20004a30 	.word	0x20004a30

08008b2c <POWER_PROTOCOL_CHECKSTATUS>:

void POWER_PROTOCOL_CHECKSTATUS()
{
 8008b2c:	b508      	push	{r3, lr}
    if(protocolHandler.RxPacketLossCount == 0)
 8008b2e:	4a07      	ldr	r2, [pc, #28]	; (8008b4c <POWER_PROTOCOL_CHECKSTATUS+0x20>)
 8008b30:	7853      	ldrb	r3, [r2, #1]
 8008b32:	b90b      	cbnz	r3, 8008b38 <POWER_PROTOCOL_CHECKSTATUS+0xc>
    {
    	protocolHandler.protocolFailure = false;
 8008b34:	7013      	strb	r3, [r2, #0]
             * */
            POWER_CHANGE_STATE(POWER_OFF); /*Added on 19th 2024*/

    	}
    }
}
 8008b36:	bd08      	pop	{r3, pc}
    	if(protocolHandler.RxPacketLossCount > MAXIMUM_PACKET_RETRANSMIT)
 8008b38:	2b03      	cmp	r3, #3
 8008b3a:	d9fc      	bls.n	8008b36 <POWER_PROTOCOL_CHECKSTATUS+0xa>
            protocolHandler.protocolFailure = true;
 8008b3c:	2001      	movs	r0, #1
 8008b3e:	7010      	strb	r0, [r2, #0]
            ESCOOTER_SendReportStatus(true);
 8008b40:	f7fc fe22 	bl	8005788 <ESCOOTER_SendReportStatus>
	state_Handler = state;
 8008b44:	4b02      	ldr	r3, [pc, #8]	; (8008b50 <POWER_PROTOCOL_CHECKSTATUS+0x24>)
 8008b46:	2200      	movs	r2, #0
 8008b48:	701a      	strb	r2, [r3, #0]
}
 8008b4a:	bd08      	pop	{r3, pc}
 8008b4c:	20004a1c 	.word	0x20004a1c
 8008b50:	20004a28 	.word	0x20004a28

08008b54 <THROTTLE_FRAME_CHECKSTATUS>:

void THROTTLE_FRAME_CHECKSTATUS()
{
 8008b54:	b508      	push	{r3, lr}
     if(txHandler.TxPacketLossCount == 0)
 8008b56:	4a07      	ldr	r2, [pc, #28]	; (8008b74 <THROTTLE_FRAME_CHECKSTATUS+0x20>)
 8008b58:	7853      	ldrb	r3, [r2, #1]
 8008b5a:	b90b      	cbnz	r3, 8008b60 <THROTTLE_FRAME_CHECKSTATUS+0xc>
     {
    	 txHandler.isTxDisconnected = false;
 8008b5c:	7013      	strb	r3, [r2, #0]
              * --> Automatically Power Off
              * */
        	 POWER_CHANGE_STATE(POWER_OFF);
         }
     }
}
 8008b5e:	bd08      	pop	{r3, pc}
         if(txHandler.TxPacketLossCount > MAXIMUM_PACKET_RETRANSMIT)
 8008b60:	2b03      	cmp	r3, #3
 8008b62:	d9fc      	bls.n	8008b5e <THROTTLE_FRAME_CHECKSTATUS+0xa>
        	 txHandler.isTxDisconnected = true;
 8008b64:	2001      	movs	r0, #1
 8008b66:	7010      	strb	r0, [r2, #0]
        	 ESCOOTER_SendReportStatus(true);
 8008b68:	f7fc fe0e 	bl	8005788 <ESCOOTER_SendReportStatus>
	state_Handler = state;
 8008b6c:	4b02      	ldr	r3, [pc, #8]	; (8008b78 <THROTTLE_FRAME_CHECKSTATUS+0x24>)
 8008b6e:	2200      	movs	r2, #0
 8008b70:	701a      	strb	r2, [r3, #0]
}
 8008b72:	bd08      	pop	{r3, pc}
 8008b74:	20004a30 	.word	0x20004a30
 8008b78:	20004a28 	.word	0x20004a28

08008b7c <POWER_CTL_MONITORING>:
{
	pwrControl->wake();
}

void POWER_CTL_MONITORING(void const *argument)
{
 8008b7c:	b508      	push	{r3, lr}
 8008b7e:	4d0a      	ldr	r5, [pc, #40]	; (8008ba8 <POWER_CTL_MONITORING+0x2c>)
 8008b80:	4c0a      	ldr	r4, [pc, #40]	; (8008bac <POWER_CTL_MONITORING+0x30>)
	for(;;)
	{
		switch(state_Handler)
 8008b82:	782b      	ldrb	r3, [r5, #0]
 8008b84:	2b01      	cmp	r3, #1
 8008b86:	d00b      	beq.n	8008ba0 <POWER_CTL_MONITORING+0x24>
 8008b88:	2b02      	cmp	r3, #2
 8008b8a:	d005      	beq.n	8008b98 <POWER_CTL_MONITORING+0x1c>
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d1f9      	bne.n	8008b84 <POWER_CTL_MONITORING+0x8>
		{
		    case POWER_OFF:
		    	pwrControl -> sleep();
 8008b90:	6823      	ldr	r3, [r4, #0]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	4798      	blx	r3
		    	break;
 8008b96:	e7f4      	b.n	8008b82 <POWER_CTL_MONITORING+0x6>
		    	pwrControl -> powerOn();
		    	//tailLightControl->switch_on();
		    	break;

		    case WAKEUP:
		    	pwrControl -> wake();
 8008b98:	6823      	ldr	r3, [r4, #0]
 8008b9a:	685b      	ldr	r3, [r3, #4]
 8008b9c:	4798      	blx	r3
 8008b9e:	e7f0      	b.n	8008b82 <POWER_CTL_MONITORING+0x6>
		    	pwrControl -> powerOn();
 8008ba0:	6823      	ldr	r3, [r4, #0]
 8008ba2:	689b      	ldr	r3, [r3, #8]
 8008ba4:	4798      	blx	r3
		    	break;
 8008ba6:	e7ec      	b.n	8008b82 <POWER_CTL_MONITORING+0x6>
 8008ba8:	20004a28 	.word	0x20004a28
 8008bac:	20004a20 	.word	0x20004a20

08008bb0 <SYSTEM_STOP_RETRANSMISSION_TIMER>:
}

static void SYSTEM_STOP_RETRANSMISSION_TIMER()
{
   /*Stop the timer*/
   TIM3->CR1 &= ~TIM_CR1_CEN;
 8008bb0:	4b04      	ldr	r3, [pc, #16]	; (8008bc4 <SYSTEM_STOP_RETRANSMISSION_TIMER+0x14>)
 8008bb2:	681a      	ldr	r2, [r3, #0]
 8008bb4:	f022 0201 	bic.w	r2, r2, #1
 8008bb8:	601a      	str	r2, [r3, #0]

   /*Disable the Interrupt*/
   TIM3->DIER &= ~TIM_DIER_UIE;
 8008bba:	68da      	ldr	r2, [r3, #12]
 8008bbc:	f022 0201 	bic.w	r2, r2, #1
 8008bc0:	60da      	str	r2, [r3, #12]
}
 8008bc2:	4770      	bx	lr
 8008bc4:	40000400 	.word	0x40000400

08008bc8 <SYSTEM_STOP_TXLOSS_TIMER>:

/*Might be it's not necessary, just for debugging. (Just in case)*/
static void SYSTEM_STOP_TXLOSS_TIMER()
{
   /*Stop the timer*/
   TIM4->CR1 &= ~TIM_CR1_CEN;
 8008bc8:	4b04      	ldr	r3, [pc, #16]	; (8008bdc <SYSTEM_STOP_TXLOSS_TIMER+0x14>)
 8008bca:	681a      	ldr	r2, [r3, #0]
 8008bcc:	f022 0201 	bic.w	r2, r2, #1
 8008bd0:	601a      	str	r2, [r3, #0]

   /*Disable the Interrupt*/
   TIM4->DIER &= ~TIM_DIER_UIE;
 8008bd2:	68da      	ldr	r2, [r3, #12]
 8008bd4:	f022 0201 	bic.w	r2, r2, #1
 8008bd8:	60da      	str	r2, [r3, #12]
}
 8008bda:	4770      	bx	lr
 8008bdc:	40000800 	.word	0x40000800

08008be0 <SYSTEM_INDICATOR_OFF>:
{
 8008be0:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,GPIO_PIN_RESET);
 8008be2:	4807      	ldr	r0, [pc, #28]	; (8008c00 <SYSTEM_INDICATOR_OFF+0x20>)
 8008be4:	2200      	movs	r2, #0
 8008be6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008bea:	f7fb fb07 	bl	80041fc <HAL_GPIO_WritePin>
}
 8008bee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,GPIO_PIN_RESET);
 8008bf2:	4803      	ldr	r0, [pc, #12]	; (8008c00 <SYSTEM_INDICATOR_OFF+0x20>)
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008bfa:	f7fb baff 	b.w	80041fc <HAL_GPIO_WritePin>
 8008bfe:	bf00      	nop
 8008c00:	40020400 	.word	0x40020400

08008c04 <SYSTEM_INDICATOR_ON>:
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,GPIO_PIN_SET);
 8008c04:	4802      	ldr	r0, [pc, #8]	; (8008c10 <SYSTEM_INDICATOR_ON+0xc>)
 8008c06:	2201      	movs	r2, #1
 8008c08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008c0c:	f7fb baf6 	b.w	80041fc <HAL_GPIO_WritePin>
 8008c10:	40020400 	.word	0x40020400

08008c14 <SYSTEM_POWER_ON>:
{
 8008c14:	b508      	push	{r3, lr}
	power = 1;
 8008c16:	4b04      	ldr	r3, [pc, #16]	; (8008c28 <SYSTEM_POWER_ON+0x14>)
 8008c18:	2201      	movs	r2, #1
 8008c1a:	701a      	strb	r2, [r3, #0]
	POWER_PROTOCOL_CHECKSTATUS();
 8008c1c:	f7ff ff86 	bl	8008b2c <POWER_PROTOCOL_CHECKSTATUS>
}
 8008c20:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	THROTTLE_FRAME_CHECKSTATUS();
 8008c24:	f7ff bf96 	b.w	8008b54 <THROTTLE_FRAME_CHECKSTATUS>
 8008c28:	20004a38 	.word	0x20004a38

08008c2c <SYSTEM_BOOT>:
{
 8008c2c:	b508      	push	{r3, lr}
	HAL_GPIO_DeInit(GPIOA,GPIO_PIN_3);
 8008c2e:	4808      	ldr	r0, [pc, #32]	; (8008c50 <SYSTEM_BOOT+0x24>)
 8008c30:	2108      	movs	r1, #8
 8008c32:	f7fb fa57 	bl	80040e4 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOA,GPIO_PIN_2);
 8008c36:	4806      	ldr	r0, [pc, #24]	; (8008c50 <SYSTEM_BOOT+0x24>)
 8008c38:	2104      	movs	r1, #4
 8008c3a:	f7fb fa53 	bl	80040e4 <HAL_GPIO_DeInit>
	ReBoot_Clock(); //ADDED 2024-01-10
 8008c3e:	f7f8 fa97 	bl	8001170 <ReBoot_Clock>
	HAL_ResumeTick(); //ADDED 2024-01-10
 8008c42:	f7fa f971 	bl	8002f28 <HAL_ResumeTick>
}
 8008c46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_NVIC_SystemReset();
 8008c4a:	f7fb b92d 	b.w	8003ea8 <HAL_NVIC_SystemReset>
 8008c4e:	bf00      	nop
 8008c50:	40020000 	.word	0x40020000

08008c54 <SYSTEM_POWER_OFF>:
{
 8008c54:	b508      	push	{r3, lr}
	Peripheral_DeInit(); /*Comment it out in case it's in debug mode!*/
 8008c56:	f7f8 fa5f 	bl	8001118 <Peripheral_DeInit>
	Stop_RetransmissionTimer();
 8008c5a:	f7ff ff1f 	bl	8008a9c <Stop_RetransmissionTimer>
	ESCOOTER_StopCoreTask();
 8008c5e:	f7fc fed9 	bl	8005a14 <ESCOOTER_StopCoreTask>
	suspend_SystemTask();
 8008c62:	f7f8 fa49 	bl	80010f8 <suspend_SystemTask>
	HAL_SuspendTick(); //ADDED 2024-01-10
 8008c66:	f7fa f955 	bl	8002f14 <HAL_SuspendTick>
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON,PWR_SLEEPENTRY_WFI);
 8008c6a:	2101      	movs	r1, #1
}
 8008c6c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON,PWR_SLEEPENTRY_WFI);
 8008c70:	4608      	mov	r0, r1
 8008c72:	f7fb bad1 	b.w	8004218 <HAL_PWR_EnterSTOPMode>
 8008c76:	bf00      	nop

08008c78 <SYSTEM_START_TXLOSS_TIMER>:
	RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8008c78:	4917      	ldr	r1, [pc, #92]	; (8008cd8 <SYSTEM_START_TXLOSS_TIMER+0x60>)
	TIM4->PSC = 10000; /*Pre-scalar*/
 8008c7a:	4b18      	ldr	r3, [pc, #96]	; (8008cdc <SYSTEM_START_TXLOSS_TIMER+0x64>)
	RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8008c7c:	6c0a      	ldr	r2, [r1, #64]	; 0x40
{
 8008c7e:	b410      	push	{r4}
	RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8008c80:	f042 0204 	orr.w	r2, r2, #4
	TIM4->PSC = 10000; /*Pre-scalar*/
 8008c84:	f242 7410 	movw	r4, #10000	; 0x2710
	TIM4->ARR = 8400;  /*Auto reload register*/
 8008c88:	f242 00d0 	movw	r0, #8400	; 0x20d0
	RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8008c8c:	640a      	str	r2, [r1, #64]	; 0x40
	TIM4->PSC = 10000; /*Pre-scalar*/
 8008c8e:	629c      	str	r4, [r3, #40]	; 0x28
	TIM4->ARR = 8400;  /*Auto reload register*/
 8008c90:	62d8      	str	r0, [r3, #44]	; 0x2c
	TIM4->CR1 &= ~TIM_CR1_DIR;
 8008c92:	681a      	ldr	r2, [r3, #0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008c94:	4912      	ldr	r1, [pc, #72]	; (8008ce0 <SYSTEM_START_TXLOSS_TIMER+0x68>)
 8008c96:	f022 0210 	bic.w	r2, r2, #16
 8008c9a:	601a      	str	r2, [r3, #0]
	TIM4->CR1 |= TIM_CR1_CKD_1;
 8008c9c:	681a      	ldr	r2, [r3, #0]
 8008c9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ca2:	601a      	str	r2, [r3, #0]
	TIM4->CR1 &= ~TIM_CR1_ARPE;
 8008ca4:	681a      	ldr	r2, [r3, #0]
 8008ca6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008caa:	601a      	str	r2, [r3, #0]
	TIM4->SMCR &= ~TIM_SMCR_SMS;
 8008cac:	689a      	ldr	r2, [r3, #8]
 8008cae:	f022 0207 	bic.w	r2, r2, #7
 8008cb2:	609a      	str	r2, [r3, #8]
	TIM4->DIER |= TIM_DIER_UIE;
 8008cb4:	68da      	ldr	r2, [r3, #12]
 8008cb6:	f04f 0ca0 	mov.w	ip, #160	; 0xa0
 8008cba:	f042 0201 	orr.w	r2, r2, #1
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008cbe:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8008cc2:	60da      	str	r2, [r3, #12]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008cc4:	f881 c31e 	strb.w	ip, [r1, #798]	; 0x31e
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008cc8:	6008      	str	r0, [r1, #0]
	TIM4->CR1 |= TIM_CR1_CEN;
 8008cca:	681a      	ldr	r2, [r3, #0]
}
 8008ccc:	f85d 4b04 	ldr.w	r4, [sp], #4
	TIM4->CR1 |= TIM_CR1_CEN;
 8008cd0:	f042 0201 	orr.w	r2, r2, #1
 8008cd4:	601a      	str	r2, [r3, #0]
}
 8008cd6:	4770      	bx	lr
 8008cd8:	40023800 	.word	0x40023800
 8008cdc:	40000800 	.word	0x40000800
 8008ce0:	e000e100 	.word	0xe000e100

08008ce4 <SYSTEM_START_RETRANSMISSION_TIMER>:
   RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8008ce4:	4917      	ldr	r1, [pc, #92]	; (8008d44 <SYSTEM_START_RETRANSMISSION_TIMER+0x60>)
   TIM3->PSC = 10000;  /*Pre-scalar*/
 8008ce6:	4b18      	ldr	r3, [pc, #96]	; (8008d48 <SYSTEM_START_RETRANSMISSION_TIMER+0x64>)
   RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8008ce8:	6c0a      	ldr	r2, [r1, #64]	; 0x40
{
 8008cea:	b410      	push	{r4}
   RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8008cec:	f042 0202 	orr.w	r2, r2, #2
   TIM3->PSC = 10000;  /*Pre-scalar*/
 8008cf0:	f242 7410 	movw	r4, #10000	; 0x2710
   TIM3->ARR = 8400;   /*Auto reload register*/
 8008cf4:	f242 00d0 	movw	r0, #8400	; 0x20d0
   RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8008cf8:	640a      	str	r2, [r1, #64]	; 0x40
   TIM3->PSC = 10000;  /*Pre-scalar*/
 8008cfa:	629c      	str	r4, [r3, #40]	; 0x28
   TIM3->ARR = 8400;   /*Auto reload register*/
 8008cfc:	62d8      	str	r0, [r3, #44]	; 0x2c
   TIM3->CR1 &= ~TIM_CR1_DIR;
 8008cfe:	681a      	ldr	r2, [r3, #0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d00:	4912      	ldr	r1, [pc, #72]	; (8008d4c <SYSTEM_START_RETRANSMISSION_TIMER+0x68>)
 8008d02:	f022 0210 	bic.w	r2, r2, #16
 8008d06:	601a      	str	r2, [r3, #0]
   TIM3->CR1 |= TIM_CR1_CKD_1;
 8008d08:	681a      	ldr	r2, [r3, #0]
 8008d0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d0e:	601a      	str	r2, [r3, #0]
   TIM3->CR1 &= ~TIM_CR1_ARPE;
 8008d10:	681a      	ldr	r2, [r3, #0]
 8008d12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008d16:	601a      	str	r2, [r3, #0]
   TIM3->SMCR &= ~TIM_SMCR_SMS;
 8008d18:	689a      	ldr	r2, [r3, #8]
 8008d1a:	f022 0207 	bic.w	r2, r2, #7
 8008d1e:	609a      	str	r2, [r3, #8]
   TIM3->DIER |= TIM_DIER_UIE;
 8008d20:	68da      	ldr	r2, [r3, #12]
 8008d22:	f04f 0ca0 	mov.w	ip, #160	; 0xa0
 8008d26:	f042 0201 	orr.w	r2, r2, #1
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008d2a:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8008d2e:	60da      	str	r2, [r3, #12]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d30:	f881 c31d 	strb.w	ip, [r1, #797]	; 0x31d
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008d34:	6008      	str	r0, [r1, #0]
   TIM3->CR1 |= TIM_CR1_CEN;
 8008d36:	681a      	ldr	r2, [r3, #0]
}
 8008d38:	f85d 4b04 	ldr.w	r4, [sp], #4
   TIM3->CR1 |= TIM_CR1_CEN;
 8008d3c:	f042 0201 	orr.w	r2, r2, #1
 8008d40:	601a      	str	r2, [r3, #0]
}
 8008d42:	4770      	bx	lr
 8008d44:	40023800 	.word	0x40023800
 8008d48:	40000400 	.word	0x40000400
 8008d4c:	e000e100 	.word	0xe000e100

08008d50 <POWER_CONTROL_Init>:
{
 8008d50:	b508      	push	{r3, lr}
	POWER_CONTROL_CONFG(&power_control);
 8008d52:	4807      	ldr	r0, [pc, #28]	; (8008d70 <POWER_CONTROL_Init+0x20>)
 8008d54:	f7ff fe82 	bl	8008a5c <POWER_CONTROL_CONFG>
	POWER_INDICATOR_CONFG(&power_status_indicator);
 8008d58:	4806      	ldr	r0, [pc, #24]	; (8008d74 <POWER_CONTROL_Init+0x24>)
 8008d5a:	f7ff fe85 	bl	8008a68 <POWER_INDICATOR_CONFG>
	POWER_RETRANSMIT_CTL_CONFG(&protocol_control);
 8008d5e:	4806      	ldr	r0, [pc, #24]	; (8008d78 <POWER_CONTROL_Init+0x28>)
 8008d60:	f7ff fe84 	bl	8008a6c <POWER_RETRANSMIT_CTL_CONFG>
}
 8008d64:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	POWER_SET_DEFAULT_STATE(POWER_ON);
 8008d68:	2001      	movs	r0, #1
 8008d6a:	f7ff be8b 	b.w	8008a84 <POWER_SET_DEFAULT_STATE>
 8008d6e:	bf00      	nop
 8008d70:	20000588 	.word	0x20000588
 8008d74:	20000594 	.word	0x20000594
 8008d78:	2000059c 	.word	0x2000059c

08008d7c <POWER_CONTROL_TxConnect_Init>:
	POWER_TXFAIL_CTL_CONFG(&txFail_control);
 8008d7c:	4801      	ldr	r0, [pc, #4]	; (8008d84 <POWER_CONTROL_TxConnect_Init+0x8>)
 8008d7e:	f7ff be7b 	b.w	8008a78 <POWER_TXFAIL_CTL_CONFG>
 8008d82:	bf00      	nop
 8008d84:	200005a4 	.word	0x200005a4

08008d88 <POWER_CONTROL_START_MONITORING>:
{
 8008d88:	b510      	push	{r4, lr}
	osThreadDef(PowerStateMachine, POWER_CTL_MONITORING, osPriorityBelowNormal,0,128);
 8008d8a:	4c09      	ldr	r4, [pc, #36]	; (8008db0 <POWER_CONTROL_START_MONITORING+0x28>)
 8008d8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
{
 8008d8e:	b088      	sub	sp, #32
	osThreadDef(PowerStateMachine, POWER_CTL_MONITORING, osPriorityBelowNormal,0,128);
 8008d90:	f10d 0c04 	add.w	ip, sp, #4
 8008d94:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008d98:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8008d9c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
	PowerControlHandler = osThreadCreate(osThread(PowerStateMachine),NULL);
 8008da0:	2100      	movs	r1, #0
 8008da2:	a801      	add	r0, sp, #4
 8008da4:	f7fc fe4e 	bl	8005a44 <osThreadCreate>
 8008da8:	4b02      	ldr	r3, [pc, #8]	; (8008db4 <POWER_CONTROL_START_MONITORING+0x2c>)
 8008daa:	6018      	str	r0, [r3, #0]
}
 8008dac:	b008      	add	sp, #32
 8008dae:	bd10      	pop	{r4, pc}
 8008db0:	08009060 	.word	0x08009060
 8008db4:	20004a34 	.word	0x20004a34

08008db8 <TIM3_IRQHandler>:

/*Timer 3 Interrupt Handler*/
void TIM3_IRQHandler(void)
{
 8008db8:	b510      	push	{r4, lr}
	if(TIM3->SR & TIM_SR_UIF)
 8008dba:	4c06      	ldr	r4, [pc, #24]	; (8008dd4 <TIM3_IRQHandler+0x1c>)
 8008dbc:	6923      	ldr	r3, [r4, #16]
 8008dbe:	07db      	lsls	r3, r3, #31
 8008dc0:	d400      	bmi.n	8008dc4 <TIM3_IRQHandler+0xc>
	{
		PacketLossCount();
		TIM3->SR &= ~TIM_SR_UIF;
	}
}
 8008dc2:	bd10      	pop	{r4, pc}
		PacketLossCount();
 8008dc4:	f7ff fe8e 	bl	8008ae4 <PacketLossCount>
		TIM3->SR &= ~TIM_SR_UIF;
 8008dc8:	6923      	ldr	r3, [r4, #16]
 8008dca:	f023 0301 	bic.w	r3, r3, #1
 8008dce:	6123      	str	r3, [r4, #16]
}
 8008dd0:	bd10      	pop	{r4, pc}
 8008dd2:	bf00      	nop
 8008dd4:	40000400 	.word	0x40000400

08008dd8 <TIM4_IRQHandler>:

/*Might be it's not necessary, just for debugging. (Just in case)*/
/*Timer 4 Interrupt Handler*/
void TIM4_IRQHandler(void)
{
 8008dd8:	b510      	push	{r4, lr}
	if(TIM4->SR & TIM_SR_UIF)
 8008dda:	4c06      	ldr	r4, [pc, #24]	; (8008df4 <TIM4_IRQHandler+0x1c>)
 8008ddc:	6923      	ldr	r3, [r4, #16]
 8008dde:	07db      	lsls	r3, r3, #31
 8008de0:	d400      	bmi.n	8008de4 <TIM4_IRQHandler+0xc>
	{
		FrameFailCount();
		TIM4->SR &= ~TIM_SR_UIF;
	}
}
 8008de2:	bd10      	pop	{r4, pc}
		FrameFailCount();
 8008de4:	f7ff fe86 	bl	8008af4 <FrameFailCount>
		TIM4->SR &= ~TIM_SR_UIF;
 8008de8:	6923      	ldr	r3, [r4, #16]
 8008dea:	f023 0301 	bic.w	r3, r3, #1
 8008dee:	6123      	str	r3, [r4, #16]
}
 8008df0:	bd10      	pop	{r4, pc}
 8008df2:	bf00      	nop
 8008df4:	40000800 	.word	0x40000800

08008df8 <__libc_init_array>:
 8008df8:	b570      	push	{r4, r5, r6, lr}
 8008dfa:	4d0d      	ldr	r5, [pc, #52]	; (8008e30 <__libc_init_array+0x38>)
 8008dfc:	4c0d      	ldr	r4, [pc, #52]	; (8008e34 <__libc_init_array+0x3c>)
 8008dfe:	1b64      	subs	r4, r4, r5
 8008e00:	10a4      	asrs	r4, r4, #2
 8008e02:	2600      	movs	r6, #0
 8008e04:	42a6      	cmp	r6, r4
 8008e06:	d109      	bne.n	8008e1c <__libc_init_array+0x24>
 8008e08:	4d0b      	ldr	r5, [pc, #44]	; (8008e38 <__libc_init_array+0x40>)
 8008e0a:	4c0c      	ldr	r4, [pc, #48]	; (8008e3c <__libc_init_array+0x44>)
 8008e0c:	f000 f8e4 	bl	8008fd8 <_init>
 8008e10:	1b64      	subs	r4, r4, r5
 8008e12:	10a4      	asrs	r4, r4, #2
 8008e14:	2600      	movs	r6, #0
 8008e16:	42a6      	cmp	r6, r4
 8008e18:	d105      	bne.n	8008e26 <__libc_init_array+0x2e>
 8008e1a:	bd70      	pop	{r4, r5, r6, pc}
 8008e1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e20:	4798      	blx	r3
 8008e22:	3601      	adds	r6, #1
 8008e24:	e7ee      	b.n	8008e04 <__libc_init_array+0xc>
 8008e26:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e2a:	4798      	blx	r3
 8008e2c:	3601      	adds	r6, #1
 8008e2e:	e7f2      	b.n	8008e16 <__libc_init_array+0x1e>
 8008e30:	080093e0 	.word	0x080093e0
 8008e34:	080093e0 	.word	0x080093e0
 8008e38:	080093e0 	.word	0x080093e0
 8008e3c:	080093e4 	.word	0x080093e4

08008e40 <__retarget_lock_acquire_recursive>:
 8008e40:	4770      	bx	lr

08008e42 <__retarget_lock_release_recursive>:
 8008e42:	4770      	bx	lr

08008e44 <memset>:
 8008e44:	4402      	add	r2, r0
 8008e46:	4603      	mov	r3, r0
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d100      	bne.n	8008e4e <memset+0xa>
 8008e4c:	4770      	bx	lr
 8008e4e:	f803 1b01 	strb.w	r1, [r3], #1
 8008e52:	e7f9      	b.n	8008e48 <memset+0x4>

08008e54 <_free_r>:
 8008e54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e56:	2900      	cmp	r1, #0
 8008e58:	d044      	beq.n	8008ee4 <_free_r+0x90>
 8008e5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e5e:	9001      	str	r0, [sp, #4]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	f1a1 0404 	sub.w	r4, r1, #4
 8008e66:	bfb8      	it	lt
 8008e68:	18e4      	addlt	r4, r4, r3
 8008e6a:	f000 f8a9 	bl	8008fc0 <__malloc_lock>
 8008e6e:	4a1e      	ldr	r2, [pc, #120]	; (8008ee8 <_free_r+0x94>)
 8008e70:	9801      	ldr	r0, [sp, #4]
 8008e72:	6813      	ldr	r3, [r2, #0]
 8008e74:	b933      	cbnz	r3, 8008e84 <_free_r+0x30>
 8008e76:	6063      	str	r3, [r4, #4]
 8008e78:	6014      	str	r4, [r2, #0]
 8008e7a:	b003      	add	sp, #12
 8008e7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e80:	f000 b8a4 	b.w	8008fcc <__malloc_unlock>
 8008e84:	42a3      	cmp	r3, r4
 8008e86:	d908      	bls.n	8008e9a <_free_r+0x46>
 8008e88:	6825      	ldr	r5, [r4, #0]
 8008e8a:	1961      	adds	r1, r4, r5
 8008e8c:	428b      	cmp	r3, r1
 8008e8e:	bf01      	itttt	eq
 8008e90:	6819      	ldreq	r1, [r3, #0]
 8008e92:	685b      	ldreq	r3, [r3, #4]
 8008e94:	1949      	addeq	r1, r1, r5
 8008e96:	6021      	streq	r1, [r4, #0]
 8008e98:	e7ed      	b.n	8008e76 <_free_r+0x22>
 8008e9a:	461a      	mov	r2, r3
 8008e9c:	685b      	ldr	r3, [r3, #4]
 8008e9e:	b10b      	cbz	r3, 8008ea4 <_free_r+0x50>
 8008ea0:	42a3      	cmp	r3, r4
 8008ea2:	d9fa      	bls.n	8008e9a <_free_r+0x46>
 8008ea4:	6811      	ldr	r1, [r2, #0]
 8008ea6:	1855      	adds	r5, r2, r1
 8008ea8:	42a5      	cmp	r5, r4
 8008eaa:	d10b      	bne.n	8008ec4 <_free_r+0x70>
 8008eac:	6824      	ldr	r4, [r4, #0]
 8008eae:	4421      	add	r1, r4
 8008eb0:	1854      	adds	r4, r2, r1
 8008eb2:	42a3      	cmp	r3, r4
 8008eb4:	6011      	str	r1, [r2, #0]
 8008eb6:	d1e0      	bne.n	8008e7a <_free_r+0x26>
 8008eb8:	681c      	ldr	r4, [r3, #0]
 8008eba:	685b      	ldr	r3, [r3, #4]
 8008ebc:	6053      	str	r3, [r2, #4]
 8008ebe:	4421      	add	r1, r4
 8008ec0:	6011      	str	r1, [r2, #0]
 8008ec2:	e7da      	b.n	8008e7a <_free_r+0x26>
 8008ec4:	d902      	bls.n	8008ecc <_free_r+0x78>
 8008ec6:	230c      	movs	r3, #12
 8008ec8:	6003      	str	r3, [r0, #0]
 8008eca:	e7d6      	b.n	8008e7a <_free_r+0x26>
 8008ecc:	6825      	ldr	r5, [r4, #0]
 8008ece:	1961      	adds	r1, r4, r5
 8008ed0:	428b      	cmp	r3, r1
 8008ed2:	bf04      	itt	eq
 8008ed4:	6819      	ldreq	r1, [r3, #0]
 8008ed6:	685b      	ldreq	r3, [r3, #4]
 8008ed8:	6063      	str	r3, [r4, #4]
 8008eda:	bf04      	itt	eq
 8008edc:	1949      	addeq	r1, r1, r5
 8008ede:	6021      	streq	r1, [r4, #0]
 8008ee0:	6054      	str	r4, [r2, #4]
 8008ee2:	e7ca      	b.n	8008e7a <_free_r+0x26>
 8008ee4:	b003      	add	sp, #12
 8008ee6:	bd30      	pop	{r4, r5, pc}
 8008ee8:	20004a3c 	.word	0x20004a3c

08008eec <cleanup_glue>:
 8008eec:	b538      	push	{r3, r4, r5, lr}
 8008eee:	460c      	mov	r4, r1
 8008ef0:	6809      	ldr	r1, [r1, #0]
 8008ef2:	4605      	mov	r5, r0
 8008ef4:	b109      	cbz	r1, 8008efa <cleanup_glue+0xe>
 8008ef6:	f7ff fff9 	bl	8008eec <cleanup_glue>
 8008efa:	4621      	mov	r1, r4
 8008efc:	4628      	mov	r0, r5
 8008efe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f02:	f7ff bfa7 	b.w	8008e54 <_free_r>
	...

08008f08 <_reclaim_reent>:
 8008f08:	4b2c      	ldr	r3, [pc, #176]	; (8008fbc <_reclaim_reent+0xb4>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4283      	cmp	r3, r0
 8008f0e:	b570      	push	{r4, r5, r6, lr}
 8008f10:	4604      	mov	r4, r0
 8008f12:	d051      	beq.n	8008fb8 <_reclaim_reent+0xb0>
 8008f14:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008f16:	b143      	cbz	r3, 8008f2a <_reclaim_reent+0x22>
 8008f18:	68db      	ldr	r3, [r3, #12]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d14a      	bne.n	8008fb4 <_reclaim_reent+0xac>
 8008f1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f20:	6819      	ldr	r1, [r3, #0]
 8008f22:	b111      	cbz	r1, 8008f2a <_reclaim_reent+0x22>
 8008f24:	4620      	mov	r0, r4
 8008f26:	f7ff ff95 	bl	8008e54 <_free_r>
 8008f2a:	6961      	ldr	r1, [r4, #20]
 8008f2c:	b111      	cbz	r1, 8008f34 <_reclaim_reent+0x2c>
 8008f2e:	4620      	mov	r0, r4
 8008f30:	f7ff ff90 	bl	8008e54 <_free_r>
 8008f34:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008f36:	b111      	cbz	r1, 8008f3e <_reclaim_reent+0x36>
 8008f38:	4620      	mov	r0, r4
 8008f3a:	f7ff ff8b 	bl	8008e54 <_free_r>
 8008f3e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008f40:	b111      	cbz	r1, 8008f48 <_reclaim_reent+0x40>
 8008f42:	4620      	mov	r0, r4
 8008f44:	f7ff ff86 	bl	8008e54 <_free_r>
 8008f48:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008f4a:	b111      	cbz	r1, 8008f52 <_reclaim_reent+0x4a>
 8008f4c:	4620      	mov	r0, r4
 8008f4e:	f7ff ff81 	bl	8008e54 <_free_r>
 8008f52:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008f54:	b111      	cbz	r1, 8008f5c <_reclaim_reent+0x54>
 8008f56:	4620      	mov	r0, r4
 8008f58:	f7ff ff7c 	bl	8008e54 <_free_r>
 8008f5c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008f5e:	b111      	cbz	r1, 8008f66 <_reclaim_reent+0x5e>
 8008f60:	4620      	mov	r0, r4
 8008f62:	f7ff ff77 	bl	8008e54 <_free_r>
 8008f66:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008f68:	b111      	cbz	r1, 8008f70 <_reclaim_reent+0x68>
 8008f6a:	4620      	mov	r0, r4
 8008f6c:	f7ff ff72 	bl	8008e54 <_free_r>
 8008f70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f72:	b111      	cbz	r1, 8008f7a <_reclaim_reent+0x72>
 8008f74:	4620      	mov	r0, r4
 8008f76:	f7ff ff6d 	bl	8008e54 <_free_r>
 8008f7a:	69a3      	ldr	r3, [r4, #24]
 8008f7c:	b1e3      	cbz	r3, 8008fb8 <_reclaim_reent+0xb0>
 8008f7e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008f80:	4620      	mov	r0, r4
 8008f82:	4798      	blx	r3
 8008f84:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008f86:	b1b9      	cbz	r1, 8008fb8 <_reclaim_reent+0xb0>
 8008f88:	4620      	mov	r0, r4
 8008f8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008f8e:	f7ff bfad 	b.w	8008eec <cleanup_glue>
 8008f92:	5949      	ldr	r1, [r1, r5]
 8008f94:	b941      	cbnz	r1, 8008fa8 <_reclaim_reent+0xa0>
 8008f96:	3504      	adds	r5, #4
 8008f98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f9a:	2d80      	cmp	r5, #128	; 0x80
 8008f9c:	68d9      	ldr	r1, [r3, #12]
 8008f9e:	d1f8      	bne.n	8008f92 <_reclaim_reent+0x8a>
 8008fa0:	4620      	mov	r0, r4
 8008fa2:	f7ff ff57 	bl	8008e54 <_free_r>
 8008fa6:	e7ba      	b.n	8008f1e <_reclaim_reent+0x16>
 8008fa8:	680e      	ldr	r6, [r1, #0]
 8008faa:	4620      	mov	r0, r4
 8008fac:	f7ff ff52 	bl	8008e54 <_free_r>
 8008fb0:	4631      	mov	r1, r6
 8008fb2:	e7ef      	b.n	8008f94 <_reclaim_reent+0x8c>
 8008fb4:	2500      	movs	r5, #0
 8008fb6:	e7ef      	b.n	8008f98 <_reclaim_reent+0x90>
 8008fb8:	bd70      	pop	{r4, r5, r6, pc}
 8008fba:	bf00      	nop
 8008fbc:	200005ac 	.word	0x200005ac

08008fc0 <__malloc_lock>:
 8008fc0:	4801      	ldr	r0, [pc, #4]	; (8008fc8 <__malloc_lock+0x8>)
 8008fc2:	f7ff bf3d 	b.w	8008e40 <__retarget_lock_acquire_recursive>
 8008fc6:	bf00      	nop
 8008fc8:	20004a39 	.word	0x20004a39

08008fcc <__malloc_unlock>:
 8008fcc:	4801      	ldr	r0, [pc, #4]	; (8008fd4 <__malloc_unlock+0x8>)
 8008fce:	f7ff bf38 	b.w	8008e42 <__retarget_lock_release_recursive>
 8008fd2:	bf00      	nop
 8008fd4:	20004a39 	.word	0x20004a39

08008fd8 <_init>:
 8008fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fda:	bf00      	nop
 8008fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fde:	bc08      	pop	{r3}
 8008fe0:	469e      	mov	lr, r3
 8008fe2:	4770      	bx	lr

08008fe4 <_fini>:
 8008fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fe6:	bf00      	nop
 8008fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fea:	bc08      	pop	{r3}
 8008fec:	469e      	mov	lr, r3
 8008fee:	4770      	bx	lr
